<!--Saved by Quest 5.7.6606.27193-->
<asl version="550">
  <implied element="object" property="alt" type="simplestringlist" />
  <implied element="command" property="pattern" type="simplepattern" />
  <implied element="command" property="script" type="script" />
  <implied element="command" property="multiple" type="AssociatedScope" />
  <implied element="object" property="displayverbs" type="simplestringlist" />
  <implied element="object" property="inventoryverbs" type="simplestringlist" />
  <implied element="walkthrough" property="steps" type="simplestringlist" />
  <implied element="timer" property="interval" type="int" />
  <implied element="timer" property="script" type="script" />
  <implied element="turnscript" property="script" type="script" />
  <!-- <include ref="EditorEnglish.aslx"/> -->
  <template name="DefaultXyzzy">{random:Surprisingly, absolutely nothing happens.:Your surroundings begin to fold in on themselves, but they immediately go right back to normal.:Wrong game!}</template>
  <template name="LanguageId">en</template>
  <template name="Again1">again</template>
  <template name="Again2">g</template>
  <template name="NothingToRepeat">There is nothing to repeat.</template>
  <template name="UnresolvedObject">I can't see that.</template>
  <template name="UnresolvedLocation">You can't go there.</template>
  <template name="DefaultObjectDescription">Nothing out of the ordinary.</template>
  <template name="DefaultSelfDescription">Looking good.</template>
  <template name="SeeListHeader">You can see</template>
  <template name="GoListHeader">You can go</template>
  <template name="And">and</template>
  <template name="Nothing">nothing</template>
  <template name="Or">or</template>
  <template name="NothingToUndo">Nothing to undo!</template>
  <template name="NotCarryingAnything">You are not carrying anything.</template>
  <template name="CarryingListHeader">You are carrying</template>
  <template name="UnrecognisedCommand">I don't understand your command.</template>
  <template name="YouAreIn">You are in</template>
  <template name="LookAt">Look at</template>
  <template name="Take">Take</template>
  <template name="SpeakTo">Speak to</template>
  <template name="Use">Use</template>
  <template name="Drop">Drop</template>
  <template name="GoTo">Go to</template>
  <template name="Go">Go</template>
  <template name="SwitchOn">Switch on</template>
  <template name="SwitchOff">Switch off</template>
  <template name="Open">Open</template>
  <template name="Close">Close</template>
  <template name="Eat">Eat</template>
  <template name="NeutralGender">it</template>
  <template name="MaleGender">he</template>
  <template name="FemaleGender">she</template>
  <template name="SelfGender">you</template>
  <template name="NeutralPluralGender">they</template>
  <template name="MalePluralGender">they</template>
  <template name="FemalePluralGender">they</template>
  <template name="NeutralArticle">it</template>
  <template name="MaleArticle">him</template>
  <template name="FemaleArticle">her</template>
  <template name="SelfArticle">yourself</template>
  <template name="NeutralPluralArticle">them</template>
  <template name="MalePluralArticle">them</template>
  <template name="FemalePluralArticle">them</template>
  <template name="NeutralPossessive">its</template>
  <template name="MalePossessive">his</template>
  <template name="FemalePossessive">her</template>
  <template name="SelfPossessive">your</template>
  <template name="NeutralPluralPossessive">their</template>
  <template name="MalePluralPossessive">their</template>
  <template name="FemalePluralPossessive">their</template>
  <template name="SelfAlias">me</template>
  <template name="SelfAlt">me; myself; self</template>
  <template name="AllObjects">all; everything</template>
  <template name="ParserIgnorePrefixes">the; a; an</template>
  <template name="Score">Score</template>
  <template name="Health">Health</template>
  <template name="Money">Money</template>
  <template name="CannotDoThat">You can't do that.</template>
  <template name="Done">Done.</template>
  <template name="ContainerContentsPrefix">containing</template>
  <template name="SurfaceContentsPrefix">on which there is</template>
  <template name="LockedExit">That way is locked.</template>
  <template name="NoKey">You do not have the key.</template>
  <template name="UnlockMessage">Unlocked.</template>
  <template name="LockMessage">Locked.</template>
  <template name="DefaultOops">There is nothing to correct.</template>
  <template name="VerbObjectSeparator">with; using</template>
  <template name="DefaultMultiObjectVerb">That doesn't work.</template>
  <template name="MultiObjectVerbMenu">With which object?</template>
  <template name="UseOnMenu">On which object?</template>
  <template name="GiveToMenu">To which object?</template>
  <template name="NoObjectsAvailable">There are no objects available to do that with.</template>
  <template name="Yes">Yes</template>
  <template name="No">No</template>
  <template name="By">by</template>
  <template name="NothingToTake">Nothing here to take.</template>
  <template name="NothingToDrop">You've nothing to drop.</template>
  <template name="NothingToWear">You've nothing to wear.</template>
  <template name="NothingToRemove">You've nothing to take off.</template>
  <template name="wornmodifier">worn</template>
  <template name="Wear">Wear</template>
  <template name="wear">put #object# on; wear; put on; don; wear</template>
  <template name="Remove">Remove</template>
  <template name="remove">take #object# off; remove; take off; doff</template>
  <template name="CompassNW">northwest</template>
  <template name="CompassN">north</template>
  <template name="CompassNE">northeast</template>
  <template name="CompassW">west</template>
  <template name="CompassE">east</template>
  <template name="CompassSW">southwest</template>
  <template name="CompassS">south</template>
  <template name="CompassSE">southeast</template>
  <template name="CompassUp">up</template>
  <template name="CompassDown">down</template>
  <template name="CompassIn">in</template>
  <template name="CompassOut">out</template>
  <template name="CompassDirectionPrefix"></template>
  <template name="CompassDirectionSuffix"></template>
  <template name="UpDownDirectionPrefix"></template>
  <template name="UpDownDirectionSuffix"></template>
  <template name="InOutDirectionPrefix"></template>
  <template name="InOutDirectionSuffix"></template>
  <template name="CompassNWShort">nw</template>
  <template name="CompassNShort">n</template>
  <template name="CompassNEShort">ne</template>
  <template name="CompassWShort">w</template>
  <template name="CompassEShort">e</template>
  <template name="CompassSWShort">sw</template>
  <template name="CompassSShort">s</template>
  <template name="CompassSEShort">se</template>
  <template name="CompassUpShort">u</template>
  <template name="CompassDownShort">d</template>
  <template name="CompassInShort"></template>
  <template name="CompassOutShort">o</template>
  <template name="InventoryLabel">Inventory</template>
  <template name="StatusLabel">Status</template>
  <template name="PlacesObjectsLabel">Places and Objects</template>
  <template name="CompassLabel">Compass</template>
  <template name="InButtonLabel">in</template>
  <template name="OutButtonLabel">out</template>
  <template name="EmptyListLabel">(empty)</template>
  <template name="NothingSelectedLabel">(nothing selected)</template>
  <template name="TypeHereLabel">Type here...</template>
  <template name="ContinueLabel">Continue...</template>
  <template name="go"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="lookdir"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></template>
  <template name="look">^look$|^l$</template>
  <template name="lookat">look at; look; x; examine; exam; ex</template>
  <template name="take">take; get; pick up</template>
  <template name="undo">^undo$</template>
  <template name="inventory">^i$|^inv$|^inventory$</template>
  <template name="quit">^quit$</template>
  <template name="drop">drop</template>
  <template name="use">use</template>
  <template name="speakto">speak to; speak; talk to; talk</template>
  <template name="open">open</template>
  <template name="close">close</template>
  <template name="put"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></template>
  <template name="removefrom"><![CDATA[^(remove|take) (?<object1>.*) (from|out of|off) (?<object2>.*)$]]></template>
  <template name="ask"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></template>
  <template name="tell"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></template>
  <template name="tellto"><![CDATA[^(tell|ask) (?<object>.*) to (?<text>.*)$]]></template>
  <template name="alttellto"><![CDATA[^(?<object>.*), (?<text>.*)$]]></template>
  <template name="oops"><![CDATA[^oops (?<text>.*)$]]></template>
  <template name="buy">buy; purchase</template>
  <template name="climb">climb</template>
  <template name="drink">drink</template>
  <template name="eat">eat</template>
  <template name="givesingle">give</template>
  <template name="give"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></template>
  <template name="hit">hit</template>
  <template name="kill">kill</template>
  <template name="kiss">kiss</template>
  <template name="knock">knock</template>
  <template name="lick">lick</template>
  <template name="lie">lie on; lie upon; lie down on; lie down upon</template>
  <template name="listento">listen to</template>
  <template name="lock">lock</template>
  <template name="move">move</template>
  <template name="pull">pull</template>
  <template name="push">push</template>
  <template name="read">read</template>
  <template name="search">search</template>
  <template name="show">show</template>
  <template name="sit">sit on; sit upon; sit down on; sit down upon</template>
  <template name="smell">smell; sniff</template>
  <template name="taste">taste</template>
  <template name="throw">throw</template>
  <template name="tie">tie</template>
  <template name="touch">touch</template>
  <template name="turnon">turn on; turn #object# on; switch on; switch #object# on</template>
  <template name="turnoff">turn off; turn #object# off; switch off; switch #object# off</template>
  <template name="turn">turn</template>
  <template name="unlock">unlock</template>
  <template name="untie">untie</template>
  <template name="useon"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></template>
  <template name="listen">^listen$</template>
  <template name="DefaultListen">You can't hear much.</template>
  <template name="jump">^jump$</template>
  <template name="DefaultJump">You jump, but nothing happens.</template>
  <template name="sitdown">^sit$|^sit down$</template>
  <template name="DefaultSitDown">No time for lounging about now.</template>
  <template name="liedown">^lie$|^lie down$</template>
  <template name="DefaultLieDown">No time for lounging about now.</template>
  <template name="sleep">^sleep$|^rest$</template>
  <template name="DefaultSleep">No time for lounging about now.</template>
  <template name="wait">^wait$|^z$</template>
  <template name="DefaultWait">Time passes.</template>
  <template name="xyzzy">^xyzzy$</template>
  <template name="help">^help$|^\?$</template>
  <template name="save">^save$</template>
  <template name="DefaultHelp"><![CDATA[<u>Quick Help</u><br/><br/>
<b>- Objects:</b>  Try LOOK AT..., SPEAK TO..., TAKE..., DROP..., OPEN..., GIVE... TO..., USE... ON/WITH...<br/>
<b>- Inventory:</b>  See which items you are carrying by typing I, INV or INVENTORY.<br/>
<b>- Moving around:</b>  Press the compass buttons, or type GO NORTH, SOUTH, E, GO TO...<br/>
<b>- Shortcuts:</b>  Press the up arrow and down arrow to scroll through commands you have already typed in. Try X... as a shortcut for LOOK AT...]]></template>
  <template name="LanguageSpecificObjectTypes"></template>
  <template name="EditorVerbDefaultExpression">"You can't #verb# " + object.article + "."</template>
  <dynamictemplate name="TakeSuccessful">"You pick " + object.article + " up."</dynamictemplate>
  <dynamictemplate name="TakeUnsuccessful">"You can't take " + object.article + "."</dynamictemplate>
  <dynamictemplate name="FullInventory">WriteVerb(object, "be") + " too heavy to be taken."</dynamictemplate>
  <dynamictemplate name="MaxObjectsInInventory">"You can't carry any more items."</dynamictemplate>
  <dynamictemplate name="MaxObjectsInContainer">"You can't put more items in " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropSuccessful">"You drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DropUnsuccessful">"You can't drop " + object.article + "."</dynamictemplate>
  <dynamictemplate name="ObjectCannotBeStored">"You can't put " + GetDisplayName(object) + " in there."</dynamictemplate>
  <dynamictemplate name="AlreadyTaken">"You are already carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="NotCarrying">"You are not carrying " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantUse">"You can't use " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantGive">"You can't give " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSpeakTo">WriteVerb(object, "say") + " nothing."</dynamictemplate>
  <dynamictemplate name="ObjectNotOpen">CapFirst(GetDisplayAlias(object)) + " " + Conjugate(object, "be") + " not open."</dynamictemplate>
  <dynamictemplate name="AlreadyOpen">WriteVerb(object, "be") + " already open."</dynamictemplate>
  <dynamictemplate name="AlreadyClosed">WriteVerb(object, "be") + " already closed."</dynamictemplate>
  <dynamictemplate name="CantOpen">"You can't open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CantClose">"You can't close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="OpenSuccessful">"You open " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CloseSuccessful">"You close " + object.article + "."</dynamictemplate>
  <dynamictemplate name="AlreadyThere">WriteVerb(object, "be") + " already there."</dynamictemplate>
  <dynamictemplate name="ObjectContains">WriteVerb(object, "contain")</dynamictemplate>
  <dynamictemplate name="ContainerFull">WriteVerb(object, "be") + " full."</dynamictemplate>
  <dynamictemplate name="DisambiguateMenu">"Please choose which '" + text + "' you mean:"</dynamictemplate>
  <dynamictemplate name="UndoTurn">"Undo: " + text</dynamictemplate>
  <dynamictemplate name="DefaultAsk">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="DefaultTell">WriteVerb(object, "do") + " not reply."</dynamictemplate>
  <dynamictemplate name="LockedObject">WriteVerb(object, "be") + " locked."</dynamictemplate>
  <dynamictemplate name="AlreadyLocked">WriteVerb(object, "be") + " already locked."</dynamictemplate>
  <dynamictemplate name="AlreadyUnlocked">WriteVerb(object, "be") + " already unlocked."</dynamictemplate>
  <dynamictemplate name="CannotLockOpen">"You cannot lock " + object.article + " when " + object.gender + " " + Conjugate(object, "be") + " open."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOn">WriteVerb(object, "be") + " already switched on."</dynamictemplate>
  <dynamictemplate name="AlreadySwitchedOff">WriteVerb(object, "be") + " already switched off."</dynamictemplate>
  <dynamictemplate name="SwitchedOn">"You switch " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="SwitchedOff">"You switch " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="Eaten">"You eat " + object.article + "."</dynamictemplate>
  <dynamictemplate name="ObjectDoesNotContain">CapFirst(GetDisplayAlias(object1)) + " " + Conjugate(object1, "do") + " not contain " + GetDisplayAlias(object2) + "."</dynamictemplate>
  <dynamictemplate name="YouLooking">"You are looking " + text +"."</dynamictemplate>
  <dynamictemplate name="LookAtDarkness">"It is too dark to make anything out."</dynamictemplate>
  <dynamictemplate name="WearSuccessful">"You put " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="WearUnsuccessful">"You can't wear " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CannotWearIfNotHeld">"You would need to get " + object.article + " before you can put " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="CannotRemoveIfNotHeld">"You would need to get " + object.article + " before you can take " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="AlreadyWearing">"You are already wearing " + object.article + "."</dynamictemplate>
  <dynamictemplate name="CannotRemoveIfNotWearing">"You are not wearing " + object.article + "."</dynamictemplate>
  <dynamictemplate name="NotRemovable">"You cannot remove " + object.article + "!"</dynamictemplate>
  <dynamictemplate name="CannotWearOver">"You cannot wear that over " + GetDisplayGarment(object) + "."</dynamictemplate>
  <dynamictemplate name="CannotWearWith">"You cannot wear that while wearing " + GetDisplayGarment(object) + "."</dynamictemplate>
  <dynamictemplate name="RemoveSuccessful">"You take " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="RemoveFirst">"You can't remove that while wearing " + GetDisplayGarment(object) + "."</dynamictemplate>
  <dynamictemplate name="DefaultBuy">"You can't buy " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultClimb">"You can't climb " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultDrink">"You can't drink " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultEat">"You can't eat " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultEnter">WriteVerb(game.pov, "can't") + " enter " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultGive">WriteVerb(object1, "do") + " not want " + object2.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultHit">"You can't hit " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKill">"You can't kill " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKiss">"You'd rather not kiss " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultKnock">"You can't knock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLick">"You can't lick " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultLie">"You can't lie on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultListenTo">"You listen, but " + object.gender + " makes no sound."</dynamictemplate>
  <dynamictemplate name="DefaultLock">"You can't lock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultMove">"You can't move " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPull">"You can't pull " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultPush">"You can't push " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultRead">"You can't read " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSearch">"You can't search " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultShow">"You can't show " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSit">"You can't sit on " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultSmell">"You sniff " + object.article + ", then immediately wish you'd kept your nose out of this."</dynamictemplate>
  <dynamictemplate name="DefaultTaste">"You can't taste " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultThrow">"You can't throw " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTie">"You can't tie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTouch">"You can't touch " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOn">"You can't turn " + object.article + " on."</dynamictemplate>
  <dynamictemplate name="DefaultTurnOff">"You can't turn " + object.article + " off."</dynamictemplate>
  <dynamictemplate name="DefaultTurn">"You can't turn " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUnlock">"You can't unlock " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUntie">"You can't untie " + object.article + "."</dynamictemplate>
  <dynamictemplate name="DefaultUseOn">"You can't use " + object2.article + " that way."</dynamictemplate>
  <dynamictemplate name="DefaultWear">"You can't wear " + object.article + "."</dynamictemplate>
  <!-- <include ref="Core.aslx"/> -->
  <delegate name="AddScript" parameters="object" type="" />
  <delegate name="AssociatedScope" parameters="" type="objectlist" />
  <game name="Pixie's Quest">
    <gameid>ba3a1705-de77-4b97-b22e-0800c1e2beb5</gameid>
    <version>1.5.0.8</version>
    <firstpublished>2017</firstpublished>
    <author>Dark Lizerd, XanMag, and K.V.</author>
    <aslversion>550</aslversion>
    <description><![CDATA[You must acquire and use your super-programming powers to complete this Quester's Quest of all Quests.<br/><br/>This game is for The Pixie.<br/>
    Thanks for everything you do!<br/>______________________________________________________<br/>Pixie's Quest<br/>by Dark Lizerd, XanMag, and K.V.<br/><br/>You must acquire and use your super-programming powers<br/>to complete this Quester's Quest of all Quests.<br/><br/>---------------<br/>For Quest 5.7.2]]></description>
    <showscore />
    <menufont>Source Sans Pro, Georgia, serif</menufont>
    <showhealth />
    <showmoney />
    <feature_lightdark />
    <feature_asktell />
    <feature_limitinventory />
    <feature_annotations />
    <feature_advancedwearables />
    <feature_advancedscripts />
    <appendobjectdescription />
    <allowlookdirections type="boolean">false</allowlookdirections>
    <multiplecommands type="boolean">false</multiplecommands>
    <defaultwebfont>Source Sans Pro</defaultwebfont>
    <attr name="autodescription_youarein_useprefix" type="boolean">false</attr>
    <attr name="autodescription_youcansee" type="int">3</attr>
    <attr name="autodescription_youcango" type="int">4</attr>
    <attr name="autodescription_description" type="int">2</attr>
    <customlocationcolour>#296231</customlocationcolour>
    <customlocationtextcolour>White</customlocationtextcolour>
    <commandpane />
    <cover>smallcover.png</cover>
    <showtitle type="boolean">false</showtitle>
    <defcmds>Look;Get all;UNDO;Wait;ClearScreen;Panes;Hints</defcmds>
    <cmdprompts type="stringlist">
      <value>Type here...</value>
      <value>This game is parsed before a live studio audience.</value>
      <value>Please enter a command...</value>
      <value>Are you typing or clicking?</value>
      <value>Enter LS or DIR at any time to view a list of accessible files...</value>
      <value>Coming Soon: SHARDS OF ∞</value>
      <value>Enter cat README.txt for a little help...</value>
      <value>Have you examined XanMag today?</value>
      <value>This space intentionally left blank.</value>
      <value>Now what?</value>
    </cmdprompts>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg;*.md;*.txt</publishfileextensions>
    <showpanes />
    <tower><![CDATA[<img  style="border:none;" src="{=GetFileURL("qdk-background.jpg")}" alt="QuestTower" width="32%" height="32%"/>]]></tower>
    <underlinehyperlinks />
    <locationmsg>" + CapFirst(GetDisplayName(game.pov.parent)) + "</locationmsg>
    <subtitle>SHARDS OF ∞: PART NIL</subtitle>
    <backgroundimage type="string"></backgroundimage>
    <colourblend type="boolean">false</colourblend>
    <colourblendtop>#296231</colourblendtop>
    <colourblendbottom>#fac4ff</colourblendbottom>
    <turnoffsavebutton />
    <shadowbox type="boolean">false</shadowbox>
    <menubackground>#296231</menubackground>
    <menuforeground>#fac4ff</menuforeground>
    <menuhoverbackground>#fac4ff</menuhoverbackground>
    <menuhoverforeground>#296231</menuhoverforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <customlocationbordercolour>#fac4ff</customlocationbordercolour>
    <menufontsize type="int">11</menufontsize>
    <suppressturnscripts type="boolean">false</suppressturnscripts>
    <turns type="int">0</turns>
    <category>Tribute</category>
    <panestheme>Classic</panestheme>
    <autodescription_youcansee_newline />
    <hintOptNo type="int">0</hintOptNo>
    <alphabet type="stringlist">
      <value>A</value>
      <value>B</value>
      <value>C</value>
      <value>D</value>
      <value>E</value>
      <value>F</value>
      <value>G</value>
      <value>H</value>
      <value>I</value>
      <value>J</value>
      <value>K</value>
      <value>L</value>
      <value>M</value>
      <value>N</value>
      <value>O</value>
      <value>P</value>
      <value>Q</value>
      <value>R</value>
      <value>S</value>
      <value>T</value>
      <value>U</value>
      <value>V</value>
      <value>W</value>
      <value>X</value>
      <value>Y</value>
      <value>Z</value>
    </alphabet>
    <scoreList type="stringlist" />
    <devMode type="boolean">false</devMode>
    <online type="boolean">false</online>
    <lastoutputbeforesave type="int">0</lastoutputbeforesave>
    <contactaddress>QuestQuesters@yahoo.com</contactaddress>
    <pov type="object">player1</pov>
    <onhealthzero type="script">
      FinishGame ("You have died!")
    </onhealthzero>
    <inituserinterface type="script"><![CDATA[
      JS.eval ("$('body').append('<style>@media only screen and (max-width: 956px) {#gamePanes, .game-stats {display: none !important;}}</style>');")
      JS.eval ("$(\"#txtCommand\").css(\"font-size\", \"16px\")")
      if (not StartsWith (GetFileURL (""), "quest")) {
        JS.eval ("ASLEvent ('AslSet', 'game.webplayer='" + isMobilePlayer().toString() + "');")
      }
      else {
        game.online = false
      }
      InitPxUi("")
      UpdateContentsInLists
      SetupSidenav
      SetBackgroundColour ("White")
      JS.setCss ("#gamePanes", "background:black")
      if (not StartsWith(GetFileURL(""), "quest")){
        SetTimeout(2){
          InitPxUi("")
          UpdateContentsInLists
          SetupSidenav
          SetBackgroundColour ("White")
          JS.setCss ("#gamePanes", "background:black")
        }
      }
      if (HasScript (game, "xminituserinterface")){
        invoke (game.xminituserinterface)
      }
      SetTimeout(2){
        if (GetBoolean (game, "glitching")){
          do (kv_glitch, "glitching")
        }
        if (GetBoolean (game, "took_glitch")){
          request (Show, "Location")
          statusmove
        }
      }
    ]]></inituserinterface>
    <unresolvedcommandhandler type="script">
      game.lasterror = command
      game.suppressturnscripts = true
      msg ("I didn't understand your command.")
    </unresolvedcommandhandler>
    <start type="script">
      UpdateContentsInLists
      FilterTakeDisplayVerbs
    </start>
  </game>
  <command name="lookat">
    <pattern>look at #object#; look #object#; x #object#; examine #object#; exam #object#; ex #object#</pattern>
    <script>
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (TypeOf(object, "look") = "script") {
        do (object, "look")
      }
      else {
        lookdesc = ""
        if (HasString(object, "look")) {
          lookdesc = object.look
        }
        if (LengthOf(lookdesc) = 0) {
          lookdesc = Template("DefaultObjectDescription")
        }
        if (GetBoolean(object, "switchedon")) {
          if (HasString(object, "switchedondesc")) {
            lookdesc = lookdesc + " " + object.switchedondesc
          }
        }
        else {
          if (HasString(object, "switchedoffdesc")) {
            lookdesc = lookdesc + " " + object.switchedoffdesc
          }
        }
        isDark = CheckDarkness()
        if (isDark and not GetBoolean(object, "lightsource")) {
          lookdesc = DynamicTemplate("LookAtDarkness", object)
        }
        msg (lookdesc)
      }
      ListObjectContents (object)
    </script>
  </command>
  <command name="take">
    <pattern>take #object#; get #object#; pick up #object#</pattern>
    <multiple>
      takeList = NewObjectList()
      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {
        if (obj.parent = game.pov.parent) {
          list add (takeList, obj)
        }
      }
      return (takeList)
    </multiple>
    <scope>notheld</scope>
    <multipleobjects type="script">
      game.pov.currentcommandpendingobjectscope = NewObjectList()
      foreach (obj, ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov)) {
        if (obj.parent = game.pov.parent and not DoesInherit(obj, "npc_type")) {
          list add (game.pov.currentcommandpendingobjectscope, obj)
        }
      }
    </multipleobjects>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("Nothing here to take.")
      }
      else {
        foreach (obj, object) {
          DoTake (obj, multiple)
        }
      }
    </script>
  </command>
  <command name="drop">
    <pattern>drop #object#</pattern>
    <multiple>
      return (GetDirectChildren(game.pov))
    </multiple>
    <scope>inventory</scope>
    <multipleobjects type="script">
      game.pov.currentcommandpendingobjectscope = GetDirectChildren(game.pov)
    </multipleobjects>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("Nothing here to take.")
      }
      else {
        foreach (obj, object) {
          DoDrop (obj, multiple)
        }
      }
    </script>
  </command>
  <command name="use">
    <pattern>use #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "use")) {
        do (object, "use")
      }
      else {
        if (GetBoolean(object, "use")) {
          candidates = CreateUseMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            game.pov.usemenuobject = object
            if (HasString(object, "usemenuprompt")) {
              menucaption = object.usemenuprompt
            }
            else {
              menucaption = Template("UseOnMenu")
            }
            ShowMenu (menucaption, candidates, true) {
              if (result <> null) {
                HandleUseOn (game.pov.usemenuobject, GetObject(result))
                game.pov.usemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantUse", object))
        }
      }
    ]]></script>
  </command>
  <command name="undo">
    <pattern type="string">^undo$</pattern>
    <isundo />
    <script>
      undo
    </script>
  </command>
  <command name="inventory">
    <pattern type="string">^i$|^inv$|^inventory$</pattern>
    <script>
      list = FormatObjectList(Template("CarryingListHeader"), game.pov, Template("And"), ".")
      if (list = "") {
        msg (Template("NotCarryingAnything"))
      }
      else {
        msg (list)
      }
    </script>
  </command>
  <command name="look">
    <pattern type="string">^look$|^l$</pattern>
    <script>
      ShowRoomDescription
    </script>
  </command>
  <command name="lookdir">
    <pattern type="string"><![CDATA[^look (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <script><![CDATA[
      if (HasScript(exit, "look")) {
        do (exit, "look")
      }
      else {
        message = DynamicTemplate("YouLooking",exit.alias)
        if (HasString(exit, "look")) {
          if (exit.look <> "") {
            message = exit.look
          }
        }
        if (exit.locked) {
          if (HasString(exit,"lockmessage")) {
            lockmessage = exit.lockmessage
          }
          else {
            lockmessage = Template("LockedExit")
          }
          msg (message+" "+lockmessage)
        }
        else {
          msg (message)
        }
      }
    ]]></script>
  </command>
  <command name="quit">
    <pattern type="string">^quit$</pattern>
    <script>
      request (Quit, "")
    </script>
  </command>
  <command name="go">
    <pattern type="string"><![CDATA[^go to (?<exit>.*)$|^go (?<exit>.*)$|^(?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <unresolved>You can't go there.</unresolved>
    <script>
      if (exit.visible) {
        if (exit.locked) {
          msg (exit.lockmessage)
        }
        else if (exit.runscript) {
          if (HasScript(exit, "script")) {
            do (exit, "script")
          }
        }
        else if (exit.lookonly) {
          msg ("You can't go there.")
        }
        else {
          if (HasString(exit, "message")) {
            if (not exit.message = "") {
              if (game.clearscreenonroomenter) {
                game.currentexitmessage = exit.message
              }
              else {
                msg (exit.message)
              }
            }
          }
          game.pov.parent = exit.to
        }
      }
      else {
        msg ("You can't go there.")
      }
    </script>
  </command>
  <command name="open">
    <pattern>open #object#</pattern>
    <script>
      TryOpenClose (true, object)
    </script>
  </command>
  <command name="close">
    <pattern>close #object#</pattern>
    <script>
      TryOpenClose (false, object)
    </script>
  </command>
  <command name="put">
    <pattern type="string"><![CDATA[^put (?<object1>.*) (on|in) (?<object2>.*)$]]></pattern>
    <scope>object1=inventory|object2=container</scope>
    <script>
      // put object1 in/on object 2
      canbedropped = true
      if (HasBoolean(object1, "drop")) {
        if (not object1.drop) {
          canbedropped = false
        }
      }
      if (object1.parent = object2) {
        msg (DynamicTemplate("AlreadyThere", object1))
      }
      else if (not ListContains(ScopeInventory(), object1)) {
        msg (DynamicTemplate("NotCarrying", object1))
      }
      else if (not canbedropped) {
        msg (DynamicTemplate("ObjectCannotBeStored", object1))
      }
      else if (not ListContains(ScopeReachable(), object1)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object1)))
      }
      else if (not ListContains(ScopeReachable(), object2)) {
        msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object2)))
      }
      else if (not object2.container) {
        msg (Template("CannotDoThat"))
      }
      else if (not object2.isopen) {
        msg (DynamicTemplate("ObjectNotOpen", object2))
      }
      else {
        if (GetBoolean(object2, "hidechildren")) {
          object2.hidechildren = false
        }
        params = NewDictionary()
        dictionary add (params, "object", object1)
        dictionary add (params, "destination", object2)
        if (HasScript(object2, "addscript")) {
          do (object2, "addscript", params)
        }
        else if (HasScript(object1, "drop")) {
          do (object1, "drop", params)
        }
        else {
          object1.parent = object2
          msg (Template("Done"))
        }
      }
      // must be carrying object1
      // item cannot be dropped
      // object1 must not be inside a closed container
      // object2 must not be inside a closed container
      // object2 must be an open container or surface
    </script>
  </command>
  <command name="removefrom">
    <pattern type="string"><![CDATA[^(remove|take) (?<object1>.*) (from|out of|off) (?<object2>.*)$]]></pattern>
    <scope>object1=contents|object2=container</scope>
    <script>
      // remove object1 from object2
      // if object2 does indeed contain object1, this is a synonym for "take object1"
      if (not Contains(object2, object1)) {
        msg (DynamicTemplate("ObjectDoesNotContain", object2, object1))
      }
      else {
        DoTake (object1, false)
      }
    </script>
  </command>
  <command name="givesingle">
    <pattern>give #object#</pattern>
    <script><![CDATA[
      if (HasScript(object, "givesingle")) {
        do (object, "givesingle")
      }
      else {
        if (GetBoolean(object, "givesingle")) {
          candidates = CreateGiveMenuList (object)
          if (ListCount(candidates) = 0) {
            msg (Template("NoObjectsAvailable"))
          }
          else {
            game.pov.givemenuobject = object
            if (HasString(object, "givemenuprompt")) {
              menucaption = object.givemenuprompt
            }
            else {
              menucaption = Template("GiveToMenu")
            }
            ShowMenu (menucaption, candidates, true) {
              if (result <> null) {
                HandleGiveTo (game.pov.givemenuobject, GetObject(result))
                game.pov.givemenuobject = null
              }
            }
          }
        }
        else {
          msg (DynamicTemplate("CantGive", object))
        }
      }
    ]]></script>
  </command>
  <command name="give">
    <pattern type="string"><![CDATA[^give (?<object1>.*) to (?<object2>.*)$]]></pattern>
    <script>
      HandleGiveTo (object1, object2)
    </script>
  </command>
  <command name="useon">
    <pattern type="string"><![CDATA[^use (?<object1>.*) (on|with) (?<object2>.*)$]]></pattern>
    <script>
      HandleUseOn (object1, object2)
    </script>
  </command>
  <command name="ask">
    <pattern type="string"><![CDATA[^ask (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "ask", "askdefault", "DefaultAsk")
    </script>
  </command>
  <command name="tell">
    <pattern type="string"><![CDATA[^tell (?<object>.*) about (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tell", "telldefault", "DefaultTell")
    </script>
  </command>
  <command name="tellto">
    <pattern type="string"><![CDATA[^(tell|ask) (?<object>.*) to (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tellto", "telltodefault", "DefaultTellTo")
    </script>
  </command>
  <command name="alttellto">
    <pattern type="string"><![CDATA[^(?<object>.*), (?<text>.*)$]]></pattern>
    <script>
      DoAskTell (object, text, "tellto", "telltodefault", "DefaultTellTo")
    </script>
  </command>
  <command name="oops">
    <pattern type="string"><![CDATA[^oops (?<text>.*)$]]></pattern>
    <isoops />
    <script><![CDATA[
      hasoops = false
      if (HasAttribute(game, "unresolvedcommand")) {
        if (game.unresolvedcommand <> null) {
          hasoops = true
        }
      }
      if (not hasoops) {
        msg (Template("DefaultOops"))
      }
      else {
        dictionary remove (game.unresolvedcommandvarlist, game.unresolvedcommandkey)
        dictionary add (game.unresolvedcommandvarlist, game.unresolvedcommandkey, text)
        HandleSingleCommandPattern ("", game.unresolvedcommand, game.unresolvedcommandvarlist)
      }
    ]]></script>
  </command>
  <verb name="speak">
    <pattern>speak to #object#; speak #object#; talk to #object#; talk #object#</pattern>
    <property>speak</property>
    <defaulttemplate>DefaultSpeakTo</defaulttemplate>
  </verb>
  <verb name="buy">
    <pattern>buy #object#; purchase #object#</pattern>
    <property>buy</property>
    <defaulttemplate>DefaultBuy</defaulttemplate>
  </verb>
  <verb name="climb">
    <pattern>climb #object#</pattern>
    <property>climb</property>
    <defaulttemplate>DefaultClimb</defaulttemplate>
  </verb>
  <verb name="drink">
    <pattern>drink #object#</pattern>
    <property>drink</property>
    <defaulttemplate>DefaultDrink</defaulttemplate>
  </verb>
  <verb name="eat">
    <pattern>eat #object#</pattern>
    <property>eat</property>
    <defaulttemplate>DefaultEat</defaulttemplate>
  </verb>
  <verb name="hit">
    <pattern>hit #object#</pattern>
    <property>hit</property>
    <defaulttemplate>DefaultHit</defaulttemplate>
  </verb>
  <verb name="kill">
    <pattern>kill #object#</pattern>
    <property>kill</property>
    <defaulttemplate>DefaultKill</defaulttemplate>
  </verb>
  <verb name="kiss">
    <pattern>kiss #object#</pattern>
    <property>kiss</property>
    <defaulttemplate>DefaultKiss</defaulttemplate>
  </verb>
  <verb name="knock">
    <pattern>knock #object#</pattern>
    <property>knock</property>
    <defaulttemplate>DefaultKnock</defaulttemplate>
  </verb>
  <verb name="lick">
    <pattern>lick #object#</pattern>
    <property>lick</property>
    <defaulttemplate>DefaultLick</defaulttemplate>
  </verb>
  <verb name="lieon">
    <pattern>lie on #object#; lie upon #object#; lie down on #object#; lie down upon #object#</pattern>
    <property>lie</property>
    <defaulttemplate>DefaultLie</defaulttemplate>
  </verb>
  <verb name="listento">
    <pattern>listen to #object#</pattern>
    <property>listen</property>
    <defaulttemplate>DefaultListenTo</defaulttemplate>
  </verb>
  <verb name="lock">
    <pattern>lock #object#</pattern>
    <property>lock</property>
    <defaulttemplate>DefaultLock</defaulttemplate>
  </verb>
  <verb name="read">
    <pattern>read #object#</pattern>
    <property>read</property>
    <defaulttemplate>DefaultRead</defaulttemplate>
  </verb>
  <verb name="search">
    <pattern>search #object#</pattern>
    <property>search</property>
    <defaulttemplate>DefaultSearch</defaulttemplate>
  </verb>
  <verb name="show">
    <pattern>show #object#</pattern>
    <property>show</property>
    <defaulttemplate>DefaultShow</defaulttemplate>
  </verb>
  <verb name="siton">
    <pattern>sit on #object#; sit upon #object#; sit down on #object#; sit down upon #object#</pattern>
    <property>sit</property>
    <defaulttemplate>DefaultSit</defaulttemplate>
  </verb>
  <verb name="smell">
    <pattern>smell #object#; sniff #object#</pattern>
    <property>smell</property>
    <defaulttemplate>DefaultSmell</defaulttemplate>
  </verb>
  <verb name="taste">
    <pattern>taste #object#</pattern>
    <property>taste</property>
    <defaulttemplate>DefaultTaste</defaulttemplate>
  </verb>
  <verb name="throw">
    <pattern>throw #object#</pattern>
    <property>throw</property>
    <defaulttemplate>DefaultThrow</defaulttemplate>
  </verb>
  <verb name="tie">
    <pattern>tie #object#</pattern>
    <property>tie</property>
    <defaulttemplate>DefaultTie</defaulttemplate>
  </verb>
  <verb name="touch">
    <pattern>touch #object#</pattern>
    <property>touch</property>
    <defaulttemplate>DefaultTouch</defaulttemplate>
  </verb>
  <verb name="turnon">
    <pattern>turn on #object#; turn #object# on; switch on #object#; switch #object# on</pattern>
    <property>turnon</property>
    <defaulttemplate>DefaultTurnOn</defaulttemplate>
  </verb>
  <verb name="turnoff">
    <pattern>turn off #object#; turn #object# off; switch off #object#; switch #object# off</pattern>
    <property>turnoff</property>
    <defaulttemplate>DefaultTurnOff</defaulttemplate>
  </verb>
  <verb name="turn">
    <pattern>turn #object#</pattern>
    <property>turn</property>
    <defaulttemplate>DefaultTurn</defaulttemplate>
  </verb>
  <verb name="unlock">
    <pattern>unlock #object#</pattern>
    <property>unlock</property>
    <defaulttemplate>DefaultUnlock</defaulttemplate>
  </verb>
  <verb name="untie">
    <pattern>untie #object#</pattern>
    <property>untie</property>
    <defaulttemplate>DefaultUntie</defaulttemplate>
  </verb>
  <command name="listen">
    <pattern type="string">^listen$</pattern>
    <script>
      msg (Template("DefaultListen"))
    </script>
  </command>
  <command name="jump">
    <pattern type="string">^jump$</pattern>
    <script>
      msg (Template("DefaultJump"))
    </script>
  </command>
  <command name="sit">
    <pattern type="string">^sit$|^sit down$</pattern>
    <script>
      msg (Template("DefaultSitDown"))
    </script>
  </command>
  <command name="lie">
    <pattern type="string">^lie$|^lie down$</pattern>
    <script>
      msg (Template("DefaultLieDown"))
    </script>
  </command>
  <command name="sleep">
    <pattern type="string">^sleep$|^rest$</pattern>
    <script>
      msg (Template("DefaultSleep"))
    </script>
  </command>
  <command name="wait">
    <pattern type="string">^wait$|^z$</pattern>
    <script>
      msg (Template("DefaultWait"))
    </script>
  </command>
  <command name="xyzzy">
    <pattern type="string">^xyzzy$</pattern>
    <script>
      msg (Template("DefaultXyzzy"))
    </script>
  </command>
  <command name="save">
    <pattern type="string">^save$</pattern>
    <script>
      request (RequestSave, "")
    </script>
  </command>
  <command name="wear">
    <pattern>put #object# on; wear #object#; put on #object#; don #object#; wear #object#</pattern>
    <scope>inventory</scope>
    <multipleobjects type="script">
      game.pov.currentcommandpendingobjectscope = ScopeInventory()
    </multipleobjects>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("You've nothing to wear.")
      }
      else {
        foreach (obj, object) {
          f = _DoWear(obj)
        }
        UpdateArmour
      }
    </script>
  </command>
  <command name="remove">
    <pattern>take #object# off; remove #object#; take off #object#; doff #object#</pattern>
    <scope>inventory</scope>
    <multipleobjects type="script">
      game.pov.currentcommandpendingobjectscope = ScopeInventory()
    </multipleobjects>
    <script>
      if (multiple and ListCount(object) = 0) {
        msg ("You've nothing to take off.")
      }
      else {
        foreach (obj, object) {
          f = _DoRemove(obj)
        }
      }
      UpdateArmour
    </script>
  </command>
  <command name="help">
    <pattern type="string">^help$|^\?$</pattern>
    <script><![CDATA[
      msg ("<center><a href='http://pr-if.org/doc/play-if-card/play-if-card-300dpi.png'><img onload=\"scrollToEnd();\" onerror=\"ASLEvent('P','"+Template("DefaultHelp")+"');$(this).remove();\" src='http://pr-if.org/doc/play-if-card/play-if-card-300dpi.png' width='100%'/></a></center>")
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="version_cmd">
    <pattern>version;info;about</pattern>
    <script><![CDATA[
      s = "<b>TITLE: </b>" + game.gamename + "<br/>"
      if (HasAttribute (game, "author")) {
        s = s + "<b>AUTHOR: </b>" + game.author + "<br/>"
      }
      s = s + "<b>VERSION: </b>" + game.version + "<br/>"
      s = s + "<b>IFID: </b>" + game.gameid
      msg (s)
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <verb name="push">
    <pattern type="string"><![CDATA[^(?<text>push) (?<object>.*)$]]></pattern>
    <property>push</property>
    <defaulttemplate>DefaultPush</defaulttemplate>
  </verb>
  <command name="kv_push_dir">
    <pattern type="string"><![CDATA[^(?<text>push|pull|move) (?<object>.*) (?<exit>north|east|south|west|northeast|northwest|southeast|southwest|in|out|up|down|n|e|s|w|ne|nw|se|sw|o|u|d)$]]></pattern>
    <script>
      if (HasAttribute(object, "pushable")) {
        object.parent = exit.to
        msg ("You " + text + " the " + GetDisplayAlias(object) + " " + exit.alias + ".")
        game.pov.parent = exit.to
      }
      else {
        msg ("You can't " + text + " it.")
      }
    </script>
  </command>
  <verb name="pull">
    <property>pull</property>
    <pattern type="string"><![CDATA[^(?<text>pull) (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultPull</defaulttemplate>
  </verb>
  <verb name="move">
    <property>move</property>
    <pattern type="string"><![CDATA[^(?<text>move) (?<object>.*)$]]></pattern>
    <defaulttemplate>DefaultMove</defaulttemplate>
  </verb>
  <object name="dreamRegion">
    <object name="room">
      <description>You have made your way through most of the Wumpus cavern and are nearing in on the most foul creature itself. You recheck your sword: sharp as ever. Your shield: at the ready. Your armor:  not a single gap.</description>
      <alias>Cave</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <exitslistprefix>There is an exit to the</exitslistprefix>
      <beforeenter type="script">
        JS.setCss ("#gameBorder", "background:white")
        JS.setCss ("body", "background:white")
        JS.eval ("$('#status').css('max-height','none');")
        JS.setInterfaceString ("TypeHereLabel", "Type here...")
      </beforeenter>
      <beforefirstenter type="script">
        ageCheck
        on ready {
          SetBackgroundOpacity (1.0)
          SetForegroundColour ("Black")
          SetBackgroundColour ("White")
          JS.setCss ("body", "background:white")
          JS.setCss ("body", "background-image:none")
          JS.uiHide ("#commandPane")
        }
      </beforefirstenter>
      <firstenter type="script"><![CDATA[
        msg ("<br/>You are startled when a fox jumps up onto a rock in front of you. You quickly draw your sword to defend yourself, then chuckle at being startled by an animal. Just as you relax a bit, the fox stands on its hind legs, and places a Robin Hood-like hat on his head.  He then draws a two-foot rapier, swishes it around, and takes a fencing pose facing you.")
      ]]></firstenter>
      <object name="player1">
        <inherit name="namedmale" />
        <alias>The Pixie</alias>
        <attr name="pov_look">You think back to the last reflective surface you came across. Chiseled good looks, a body that would make Mr. Universe envious, and the stamina to out perform even the best horses around, and charm that would best any man around.</attr>
        <money type="int">1000000</money>
        <object name="sword">
          <alt type="stringlist">
            <value>blade</value>
          </alt>
          <feature_usegive />
          <look><![CDATA[Your trusty blade.<br/><br/>Forged from the iron the holistic metallurgist extracted from the blood of your enemies.<br/><br/>It has a red glow emanating from it.  (That means there's either a Grue nearby... or a WUMPUS!!!)]]></look>
          <take />
          <drop type="boolean">false</drop>
          <dropmsg>You get ready to leave your sword behind, but remember that without it, you could not defeat the Wumpus, and would die here like the many bones of other adventurers have before you.</dropmsg>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <prefix>your</prefix>
          <use type="script">
            msg ("You swing your sword around like a little kid in a He-Man costume.")
          </use>
        </object>
        <object name="shield">
          <look><![CDATA[It's your jewel-encrusted (yet somehow lightweight) shield, gifted to you by Tanya.<br/>]]></look>
          <feature_usegive />
          <take />
          <drop type="boolean">false</drop>
          <dropmsg>You start to drop it, then think better of it.</dropmsg>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <prefix>your</prefix>
          <use type="script">
            msg ("You raise your shield. (If any words try to hurt you, you'll be completely safe.)")
          </use>
        </object>
      </object>
      <exit alias="east" to="Room5">
        <inherit name="eastdirection" />
      </exit>
      <object name="red fox1">
        <alias>red fox</alias>
        <look><![CDATA[You admire the shiny, rich, slick coat of the red fox. Not a hair out of place. He looks back at you with his deep, sapphire eyes. You blink, realising that more than a few seconds has transpired. The fox seems to smile a little more and nods his head...<br/>{once:<br/><i>'Was I just hypnotized by him???'</i> you wonder.}<br/>]]></look>
        <alt type="stringlist">
          <value>fox</value>
          <value>Reynard</value>
        </alt>
        <takemsg>He ducks under your hand, and spins out of reach. "Ha, Ha, too slow! You gotta be faster than that to catch Reynard the Fox!!" he taunts.</takemsg>
        <who><![CDATA["Don't you know!!!?? I am the renown Reynard the Fox!  <em>Acquisionaire Extraordinaire</em>!  Collector of fine arts and treasures!  At your service!" he says with a bow.]]></who>
        <treasure>"Why yes, yes indeed, I do collect treasures. Lots of treasures," replies Reynard.</treasure>
        <fight>"Why?  There is no need for that."</fight>
        <attack type="script"><![CDATA[
          RemoveObject (red fox1)
          msg ("You draw your sword and prepare to attack the fox, but he just jumps off of the rock and dips out through the exit.  You're kind of disappointed, but you put your sword away, \"Well, maybe next time...\"<br/><br/>You notice two brown rabbits duck in through the exit, following the fox. For a moment, you wonder where they were hiding.")
        ]]></attack>
      </object>
      <object name="dl_rock_kv">
        <alias>rock</alias>
        <look>It's just a rock.</look>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <scenery />
      </object>
      <command name="kv_nosave1">
        <pattern>save</pattern>
        <script>
          msg ("You can't save the game during the intro.")
        </script>
      </command>
      <command name="kv_noscore1">
        <pattern>score;check score;get the score</pattern>
        <script>
          msg ("Your score:  You broke the game!  You have the maximum score, but it shows 0!")
        </script>
      </command>
    </object>
    <object name="Room5">
      <description><![CDATA[You have now made your way to the cavern of the Wumpus. Looking in, you do not see the creature, but you can tell this is its lair. Cautiously, you make your way inside, carefully stepping over the skulls and bones of past explorers, swearing to avoid making the same mistakes they made... whatever they were.<br/>]]></description>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>Outside of the Cavern's Entrance</alias>
      <exit alias="east" to="Wumpus Cavern">
        <inherit name="eastdirection" />
      </exit>
      <object name="skeletons">
        <inherit name="plural" />
        <alias>skulls and bones</alias>
        <look>You'd rather not look at them too closely.</look>
        <scenery />
      </object>
      <command name="kv_nosave2">
        <pattern>save</pattern>
        <script>
          msg ("You can't save the game during the intro.")
        </script>
      </command>
      <command name="kv_noScoreRoom5">
        <pattern>score;check score;request score</pattern>
        <script>
          msg ("Your score:  You broke the game!  You have the maximum score, but it shows 0!")
        </script>
      </command>
    </object>
    <object name="Wumpus Cavern">
      <description><![CDATA[This is the lair of the most feared Wumpus, and unlike most of the other caverns and tunnels, this one is massive!!!<br/><br/>The cavernous roof towers over 40 feet above you! The far wall is over 100 feet away! There is a very large tunnel that leads off to the {command:More}, which seems to be how the creature makes its way here. Looking about the cavern itself, you do not find the Wumpus.  The floor is uneven, but not enough to provide enough cover for it to hide from you. You make your way down towards the center of the cavern to the large brown grass covered hill. You carefully make your way around the hill keeping an eye out for where the creature could be. Without warning, the hill moves! It starts to get bigger!<br/>]]></description>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>Cavern Entrance</alias>
      <exitslistprefix type="string"></exitslistprefix>
      <object name="roof">
        <look>It's at least 40 feet above you.</look>
        <scenery />
      </object>
      <object name="wall">
        <scenery />
        <look>It's at least 100 feet away.</look>
      </object>
      <object name="tunnel">
        <scenery />
        <look>It leads to the More.</look>
      </object>
      <object name="floor">
        <scenery />
        <look>It's uneven.</look>
      </object>
      <object name="hill">
        <scenery />
        <look>It's huge!  And it's moving!!!</look>
      </object>
      <object name="grass">
        <scenery />
        <look>It's coarse and brown.</look>
      </object>
      <command name="kv_nosave3">
        <pattern>save</pattern>
        <script>
          msg ("You can't save the game during the intro.")
        </script>
      </command>
      <command name="kv_noScoreWumpusCavern">
        <pattern>score;check score;request score</pattern>
        <script>
          msg ("Your score:  You broke the game!  You have the maximum score, but it shows 0!")
        </script>
      </command>
      <exit alias="More" to="dl_wc2" />
      <command name="kv_more">
        <pattern>m;more;go more;go to more;go m; go to m</pattern>
        <script>
          game.pov.parent = exit3.to
        </script>
      </command>
    </object>
    <object name="dl_wc2">
      <alias>Wumpus Cavern</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <exitslistprefix type="string"></exitslistprefix>
      <description><![CDATA[The hill keeps getting bigger, and then the large head appears! It is tall, but narrow, and, as it cocks it's head to one side, you see one eye, which is at least four feet across! It looks at you, and, with a beeping-sounding roar, it rises up to its full height so that its long, bunny-rabbit ears scrape across the roof.<br/><br/>It roars again with its beeping sound and rushes down at you!!!<br/><br/>As it nears in on you with more beeping sonic attacks, it opens it's cavernous maw and...]]></description>
      <exit alias="Beeping" to="Your Bedroom" />
      <command name="kv_go_beeping">
        <pattern>beeping;b;go beeping;go to beeping;go b;go to b</pattern>
        <script>
          JS.setCss ("#txtCommand", "display:  none")
          MoveObject (game.pov, Your Bedroom)
        </script>
      </command>
      <object name="hill2">
        <look><![CDATA[That's no hill!  It's the Wumpus!<br/>]]></look>
        <alias>hill</alias>
        <scenery />
      </object>
      <object name="head">
        <scenery />
        <look><![CDATA[The Wumpus's head is tall, but narrow.<br/>]]></look>
      </object>
      <object name="eye">
        <scenery />
        <look><![CDATA[It's at least four feet across it!<br/>]]></look>
      </object>
      <object name="ears">
        <look><![CDATA[They are big, bunny-rabbit-like ears.<br/>]]></look>
        <scenery />
      </object>
      <object name="roof2">
        <alias>roof</alias>
        <scenery />
        <look><![CDATA[There is nothing special up there.<br/>]]></look>
      </object>
      <command name="kv_nosave4">
        <pattern>save</pattern>
        <script>
          msg ("You can't save the game during the intro.")
        </script>
      </command>
      <command name="kv_noScoreWumpusCavern2">
        <pattern>score;check score;request score</pattern>
        <script>
          msg ("Your score:  You broke the game!  You have the maximum score, but it shows 0!")
        </script>
      </command>
    </object>
    <object name="Your Bedroom">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <description type="script"><![CDATA[
        JS.uiHide ("#gamePanes")
        JS.eval ("var scrollToEndBak1 = scrollToEnd;scrollToEnd = function(){};")
        if (game.pov = player1) {
          game.menuoutputsection = StartNewOutputSection()
          JS.addText (ProcessText("You sit upright in your bed, breathing hard and clutching your chest! Your covers are scattered around your bed, and your pillow is on your dresser on the other side of the room.  After a few moments, you settle down and push the button on your alarm clock, at which point, the beeping stops.<br/><br/>You get up, get dressed and notice a piece of paper on the floor, which you pick up and read...<br/><b><samp>\"Quest Towers, 3rd floor, 12:00 noon.\"</samp></b><br/><br/>You flip the note over again looking for any other clues. Finding none, you wad up the note and throw it in the trashcan... then you remember the party last night. The group you work with said they almost had the project finished, but they needed your final run through -- your input on a couple of problems they were having.<br/><br/>Looking at your clock, you realize you only have about 30 minutes to get there on time. So, you grab your inventory items, you rush out the door, grab a passing taxi, and arrive at the Quest Towers with 10 minutes to spare.<br/><br/>{command:look:<center>" + game.tower + "<center><br/><b>PRESS ANY KEY TO CONTINUE</b>}"))
          EndOutputSection (game.menuoutputsection)
          wait {
            JS.eval ("var scrollToEnd = scrollToEndBak1;scrollToEndBak1 = null;")
            MakeObjectVisible (armor)
            JS.uiHide ("#txtCommand")
            HideOutputSection2 (game.menuoutputsection)
          }
        }
        else {
          JS.uiShow ("#txtCommand")
          msg ("You sit upright in your bed, breathing hard and clutching your chest! Your covers are scattered around your bed, and your pillow is on your dresser on the other side of the room.<br/><br/>You finally settle down and push the button on your alarm clock, at which point, the beeping stops.<br/><br/>\"Pixie, Pixie! PLEASE tell us you're still working on the group project!\" says KV.<br/><br/>\"Yeah, Pix,\" mumbles XanMag. \"We tried to do it without you, but you should have SEEN what we ended up with!\"<br/><br/>\"Pure crap,\" DL chimes in. \"The player was a Quest programmer, of all things! Can you believe that?\"<br/><br/>\"There were some good bits,\" XM interjects. \"Gal was my favorite.\"<br/><br/>\"I liked DL's parts,\" adds KV.<br/><br/>\"I just had a dream that I was playing a game just like that!\" you exclaim. \"Come to think of it,\" you continue, addressing each member of the group in turn, \"you, and you, and you were there...\"<br/><br/>\"Wait a minute, guys,\" says DL, pointing towards something in your inventory. \"LOOK!!!\"<br/><br/>That's when you see it.<br/><br/>XM's certificate is still in your inventory, and it still contains one of the:<br/><br/><center>{command:l:<h3>SHARDS OF ∞</h3>}<br/><br/><h3><b>PRESS ANY KEY.</b></h3></center>")
          wait {
            JS.eval ("var scrollToEnd = scrollToEndBak1;scrollToEndBak1 = null;")
            ClearScreen
            JS.goUrl ("https://media.textadventures.co.uk/games/cNFLuCu1cUqmUv0I9_KEIQ/index.html")
            MoveObject (player, kv_EndGameRoom)
          }
        }
      ]]></description>
      <beforeenter type="script">
        ClearScreen
      </beforeenter>
      <enter type="script">
        JS.uiHide ("#txtCommand")
      </enter>
      <beforefirstenter type="script">
      </beforefirstenter>
      <firstenter type="script">
      </firstenter>
    </object>
    <object name="Cave Entrance">
      <alias>Cave Entrance</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <triedToLeave type="int">0</triedToLeave>
      <description><![CDATA[You have made your way through most of the Wumpus cavern and are nearing in on the most foul creature itself. You recheck your sword, sharp as it ever has been. Your shield, at the ready. Your armor does not have a single gap that would let the creature harm you.{if game.pov=player: <br/><br/>You are startled when a fox jumps up on a rock in front of you. Quickly, you draw your sword to defend yourself. You chuckle at being startled by an animal. Just as you relax a bit, the fox stands on its hind legs, places a Robin Hood-like hat on his head, draws a two-foot rapier, swishes it around, then takes a fencing pose facing you. (Did this happen before, or did you dream that part?)<br/>}]]></description>
      <beforeenter type="script">
      </beforeenter>
      <enter type="script">
        if (not kv_green_shard.parent = game.pov) {
          ClearScreen
          msg ("You haven't acquired the shard.")
          MoveObject (player, kv_Crate Mart)
        }
        else {
        }
      </enter>
      <beforefirstenter type="script"><![CDATA[
        MoveObjectHere (shield)
        MoveObjectHere (sword)
        dictionary add (game.povstatusattributes, "money", "Money: !")
        if (not kv_green_shard.parent = player) {
          msg ("You haven't acquired the shard.")
          MoveObject (player, Crate Mart)
        }
        else {
          msg ("You hear a distant beeping sound upon entering the crate.  Your eyelids immediately become heavy and fall closed.<br/><br/>You shake your head to wake yourself up.  That beeping...<br/><br/>It makes you think, <i>'just ten minutes of sleep... That's all I need...'</i><br/><br/>In an effort to convince The Cratesman you're okay, you turn to tell him so, but The Cratesman isn't there anymore.  Neither is Crate Mart.<br/><br/>You spin back around to examine your surroundings, finding your sword, your shield, and your armor.  ...and a treasure!<br/><br/>You pick it all up, promptly donning your armor.<br/>")
          AddToInventory (sword)
          AddToInventory (shield)
          WearGarment (armor)
          brown rabbits.prefix = "the"
        }
        wait {
          game.pov.atBeginningAgain = true
        }
      ]]></beforefirstenter>
      <object name="armor">
        <inherit name="wearable" />
        <inherit name="kvtype" />
        <look><![CDATA[Slicker than owl shit, lighter than air, more powerful than JavaScript...<br/><br/>Your armor suits you.]]></look>
        <feature_wearable />
        <visible type="boolean">false</visible>
        <worn type="boolean">false</worn>
        <armour type="int">99</armour>
        <feature_startscript />
        <feature_usegive />
        <hintlist type="stringlist">
          <value>Hint 1:  Have you tried dropping the armor, then turning it 69,105 times?</value>
          <value>Hint 2:  Hint 1 won't work unless you have acquired the eye of the Wumpus.</value>
          <value>Hint 3:  You can't get the eye of the Wumpus on your own.  One of the rabbits has to help you.</value>
          <value>Hint 4:  The rabbits dwell in the Inbetwixt.</value>
          <value>Hint 5:  To get to the Inbetwixt, you must befriend a talking fox.</value>
          <value>Hint 6:  The talking foxes need socks.  If you give them some, they will help you.</value>
        </hintlist>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>your</prefix>
        <attr name="_initialise_" type="script">
          CloneObject (armor)
          WearGarment (armor1)
          armor1.visible = true
        </attr>
        <use type="script">
          msg ("There's no need to USE your armor.  You either wear it, or you don't!")
        </use>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Wear</value>
          <value>Remove</value>
        </inventoryverbs>
      </object>
      <exit alias="in" to="Room6">
        <inherit name="indirection" />
        <runscript />
        <script type="script"><![CDATA[
          if (red fox.parent = game.pov.parent) {
            msg ("<br/>The fox blocks your path. \"Oh no you don't! We are not finished here! On guard!\"")
          }
          else {
            MoveObject (player, Room6)
          }
        ]]></script>
      </exit>
      <object name="Treasure">
        <look>It's a bunch of money.</look>
        <drop type="boolean">false</drop>
        <dropmsg>No way!  You're keeping the money!</dropmsg>
        <take />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>{once:some}{notfirst:the}</prefix>
        <ontake type="script">
          game.showmoney = true
          game.pov.money = 1000000
          RemoveObject (Treasure)
        </ontake>
      </object>
      <object name="brown rabbits">
        <inherit name="plural" />
        <visible />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>some</prefix>
        <eat>You'd have to cook them first.</eat>
        <listen><![CDATA["What's up, Doc?" says one rabbit.<br/>"The world will end," says the other.  "28 days 6 hours 42 minutes 12 seconds."<br/>]]></listen>
        <touch>Which one?  The rabbit?  Or the rabbit?</touch>
        <climb>Don't make us call animal control!</climb>
        <drink>Come on!  You're just trying to find a verb we forgot!</drink>
        <hit>You're no match against them!</hit>
        <kill>Your last name isn't Fudd.</kill>
        <knock>What?  Knock the rabbits? Really?</knock>
        <lick>This is not that kind of game!</lick>
        <lock>Locked.</lock>
        <read>You read the rabbits' auras.  They are a super-intelligent shade of blue.</read>
        <throw>You'd have to pick them up first.  (Good luck with that!)</throw>
        <taste>Did you actually enter that command?</taste>
        <search>Do you mean like a full-body-cavity search?  Because we'll call the Humane Society on you!</search>
        <tie>You try to tie the rabbits' ears to one another, but the rabbits just shake their heads around just before you get the knot securely tied.</tie>
        <unlock>{once:You unlock the rabbits' true potential.}{notfirst:You've already unlocked the rabbits' potential.}</unlock>
        <untie>They're not tied together.</untie>
        <push>You nudge each rabbit a little with one foot.</push>
        <move>{once:You ask the rabbits if they'd like you to help them move.  They just look at you quizzically.}{notfirst:The rabbits don't need you to move them.}</move>
        <usestandardverblist />
        <takemsg>You try to take them, but the rabbits move too quickly.</takemsg>
        <look type="script">
          msg ("There are two of them, and they seem to be whispering something to each other.")
        </look>
      </object>
      <object name="red fox">
        <visible />
        <look><![CDATA[You admire the shiny, rich, slick coat of the red fox. Not a hair out of place. He looks back at you with his deep, sapphire eyes. You blink, realising that more than a few seconds has transpired. The fox seems to smile a little more and nods his head...<br/><br/><i>'Was I just hypnotized by him???'</i> you wonder.<br/>(You have this strange de ja view moment...)<br/><br/>]]></look>
        <takemsg>He ducks under your hand, and spins out of reach. "Ha, Ha, too slow! You gotta be faster than that to catch Reynard the Fox!!" he taunts.</takemsg>
        <usedefaultprefix />
        <displayverbs type="stringlist">
          <value>look at</value>
          <value>take</value>
        </displayverbs>
        <who><![CDATA["Don't you know!!!?? I am the renown Reynard the Fox!  <em>Acquisionaire Extraordinaire</em>!  Collector of fine arts and treasures!  At your service!" he says with a bow.]]></who>
        <treasure>"Why yes, indeed I am after a certain treasure that you currently have, but I will soon relieve from you. I would ask, but what is the fun in that? After all, I am a thief, not a beggar!" You try to remember what you have that could be so valuable.</treasure>
        <fight>"Sure, a duel it shall be!!! ON GUARD!" And with that, he swings his rapier again, then waits for your first move.</fight>
        <attackCount type="int">0</attackCount>
        <alt type="stringlist">
          <value>fox</value>
          <value>Reynard</value>
        </alt>
        <attack type="script"><![CDATA[
          if (red fox.attackCount < 4) {
            red fox.attackCount = red fox.attackCount + 1
          }
        ]]></attack>
        <changedattackCount type="script"><![CDATA[
          switch (red fox.attackCount) {
            case (1) {
              msg ("You swing at the fox, but he parries, spins, and slashes you across the face. It stings, but did not draw any blood. \"I knew a mouse that fought better than you! Maybe he could give you a few lessons!\" <br/>")
            }
            case (2) {
              msg ("You manage to parry his slow swing, immediately countering with a good solid slash... at nothing!<br/><br/>You turn a three-sixty, but the fox is nowhere to be seen! <br/><br/>Suddenly, a sharp sting across your ass tells you where he is! You turn to face the fox, and find that he is juggling a {colour:green:green shard} in his left hand. <br/><br/>A quick inventory check tells you that it is YOUR {colour:green:green shard}! NOW, you are furious! It's time to get SERIOUS!!!<br/>")
              RemoveObject (kv_green_shard)
            }
            case (3) {
              msg ("You charge in, swinging left and right, hoping, if nothing else, you will connect with this pest and get your crystal back. <br/><br/>After a few swings, the only thing you manage to connect with is the air in front of you. You hear laughter off to your right. <br/><br/>\"MAN!!! I tell you... The next time I go on a trip through the jungle, I'm bringing you along to clear the brush in the path! I've never seen such a display of devotion to a task than what you just demonstrated!!! But, I got what I was after, and, with that, I bit you a fond farewell...\" <br/><br/>The fox turns and dashes into the cavern.<br/><br/>The rabbits hop along behind him. {popup:*:Find out about Reynard, the rabbits, the holes, and more in SHARDS OF &infin;!}<br/><br/>(Quick!  You should dash after them to get your shard back!)")
              RemoveObject (red fox)
              RemoveObject (brown rabbits)
            }
            default {
              msg ("<b>Author's note: Error running fox.changedAttackCount script.</b>")
              MakeObjectInvisible (red fox)
            }
          }
        ]]></changedattackCount>
      </object>
    </object>
    <object name="kv_EndGameRoom">
      <alias><![CDATA[&nbsp;]]></alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <description type="script"><![CDATA[
        msg ("<center><h1>SHARDS OF ∞</h1><h3>THE BEGINNING</h3><h4>THANKS FOR PLAYING!</h4></center><hr/><center><h3>IF YOU LIKED THIS, YOU MIGHT ALSO LIKE:</h3><a href=\"https://textadventures.co.uk/user/view/EMxhs1Hs8UaIB5HFBLMp4A/xanmag\">Text adventures by XanMag</a><br/><br/><a href=\"https://textadventures.co.uk/user/view/EAQf-0Zm706miXjTq_GpFw/darklizerd\">Text adventures by DarkLizerd</a><br/><br/><a href=\"https://textadventures.co.uk/user/view/gudejtsx9komagj-tffyfg/richard-headkid\">Text adventures by Richard Headkid</a><br/><br/><a href=\"https://textadventures.co.uk/user/view/_O1rjdv47U2x-bATbXE_tw/the-pixie\">Text adventures by The Pixie</a><br/><br/><a href=\"https://textadventures.co.uk/forum/quest\">The Quest Forum</a></center>")
        ShowMenu ("GAME OVER<br/>What would you like to do?", Split("UNDO your last command;RESTART from the beginning;QUIT the game;Read your TRANSCRIPT", ";"), false) {
          switch (result) {
            case ("UNDO your last command") {
              invoke (undo.script)
            }
            case ("RESTART from the beginning") {
              // FIXME when updating to 5.8!!!
              // JS.RestartGame ()
              ClearScreen
              ShowRoomDescription
              msg ("Press CTRL+R to restart!")
            }
            case ("QUIT the game") {
              JS.setCss ("#gamePanes", "display:block;background:transparent")
              finish
            }
            case ("Read your TRANSCRIPT") {
              ClearScreen
              ShowRoomDescription
              JS.showScrollback ()
            }
            default {
              ClearScreen
              ShowRoomDescription
            }
          }
        }
      ]]></description>
    </object>
    <object name="Room6">
      <description><![CDATA[You charge into the cavern, hot on the trail of that fox! But you stop in your tracks and look around but can't find him anywhere. Carefully, you make your way into the cavern.  You carefully step over the skulls and bones of past explorers swearing not to make the same mistakes they made... what ever they were. You watch where you step, trying to not to step on any bones to give away your location. You hear a crunch and catch sight of the fox as he ducks out the exit on the far side of the cavern.<br/>]]></description>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>Cave</alias>
      <exit alias="east" to="Wumpus Cavern">
        <inherit name="eastdirection" />
      </exit>
    </object>
  </object>
  <object name="startingup">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <objectslistprefix type="string"></objectslistprefix>
    <description type="script">
    </description>
    <enter type="script"><![CDATA[
      ClearScreen
      InitPxUi("")
      SetBackgroundOpacity(0.8)
      PrintCentered ("<div onclick=\"sendEndWait()\"><br/><img width=\"10%\" src=\"" + GetFileURL("px_avatar.png") + "\"  onload=\"$(this).fadeIn(10000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #fac4ff;\" /><br/><br/><br/><img src=\"" + GetFileURL("titlesplash.png")  + "\"  onload=\"$(this).fadeIn(1500);\" style=\"display:none;box-shadow:0px 0px 15px 5px #fac4ff;\" /></div><br/><br/><img onclick=\"ASLEvent('HandleNavCmdClick', 'l');\" src=\"" + GetFileURL("Initialising.png")  + "\"  onload=\"$(this).fadeOut(5500);\" /><br/></center><br/>")
      PrintCentered ("<span onclick=\"sendEndWait()\">  <img src=\"" + GetFileURL("anykeytocontinue.png") + "\" id=\"titleimage\" onload=\"$(this).fadeIn(10000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #fac4ff;\" /></span>")
      wait {
        MoveObject (player, startingup2)
      }
    ]]></enter>
    <beforeenter type="script">
      game.classiclocation = false
      JS.eval ("$('#location').css('background', '#296231')")
      JS.eval ("$('#commandPane').insertBefore($('#inventoryLabel'))")
      JS.setPanes ("black", "white")
      game.faketurns = 0
      checkMaxScore
      JS.setCss ("#gamePanes", "background:black")
      EnableTurnScript (kv_locationAlerts)
      EnableTurnScript (kv_panesOption)
      EnableTurnScript (checkQuests_kv)
      EnableTurnScript (kv_hasalerts)
      EnableTurnScript (kv_scoring_gamename)
      EnableTurnScript (rh_ingame)
      EnableTurnScript (kv_shardintheroom)
      EnableTurnScript (kv_watchforhelp)
      EnableTurnScript (completelyThanked)
      JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
      AddQuest (DarkLizerd, "Visit Dark Lizerds room", "Visit Dark Lizerd's world")
      AddQuest (KV, "KVs_World", "Visit KV's gateway.")
      JS.setCommands ("Look;Get all;UNDO;Wait;Save;ClearScreen;Panes;Hints", "black")
      JS.setCss ("#gameContent", "background:url('" + GetFileURL("qdk-background.jpg") + "');")
      JS.uiHide ("#txtCommand")
      game.parserignoreprefixes = Split("a;an;the;fucking;damn;damned;the fucking;the damn;the damned", ";")
    </beforeenter>
    <object name="startingup2">
      <objectslistprefix type="string"></objectslistprefix>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <description type="script"><![CDATA[
        SetBackgroundOpacity (0.8)
        SetForegroundColour ("Black")
        SetBackgroundColour ("Black")
        JS.setCss ("#divOutput", "background:white")
        JS.eval ("$('#status').css('max-height','0');")
        ClearScreen
        JS.uiHide ("#txtCommand")
        PrintCentered ("{command:look:<br/><img src=\"" + GetFileURL("px_avatar.png")  + "\" id=\"titleimage\" onload=\"$(this).fadeIn(300);\" style=\"box-shadow:0px 0px 15px 5px #fac4ff;display:none\" /><br/><br/>}")
        PrintCentered ("<span style=\"font-size:260%\">{game.gamename}</span><br/><span style=\"font-size:145%\">by {game.author}</span><br/>")
        msg ("<span onclick=\"sendEndWait()\"><center>This game is for The Pixie. Thanks for everything you do!</center><br><hr/><br></span>")
        msg ("")
        PrintCentered ("<span style=\"background:#296231;padding:6px;box-shadow:0px 0px 15px 5px #fac4ff;;text-shadow:0 0 4px black\"><b>    <span onclick=\"sendEndWait()\">{colour:#fac4ff:PRESS ANY KEY TO BEGIN}</span></b></span><br/>")
        wait {
          SetBackgroundOpacity (1.0)
          JS.uiShow ("#location")
          JS.uiShow ("#txtCommand")
          JS.setCss ("div#gameBorder", "box-shadow:0px 0px 15px 5px black;")
          JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;display:block;")
          ClearScreen
          PrintCentered ("")
          game.backgroundimage = ""
          MoveObject (player, Quest Forum)
          UpdateContentsInLists
          JS.uiShow ("#gamePanes")
        }
      ]]></description>
      <beforeenter type="script">
      </beforeenter>
    </object>
    <object name="player">
      <alias>The Pixie</alias>
      <look>You'll have to find a mirror to do that.</look>
      <attr name="can_clone" type="boolean">false</attr>
      <score>Score: !/?</score>
      <statusattributes type="stringdictionary">
        <item>
          <key>activeQuests</key>
          <value><![CDATA[<a onclick="ASLEvent('HandleNavCmdClick', 'quest');" style=";cursor:pointer;" title="Click here to view a list of active Quests&#33;">Active Quests: !</a>]]></value>
        </item>
      </statusattributes>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
      </inventoryverbs>
      <loadedrh />
      <allQuestsComplete type="boolean">false</allQuestsComplete>
      <activeQuests type="int">0</activeQuests>
      <activeQuestList type="stringdictionary" />
      <completedQuests type="stringlist">
        <value><![CDATA[<span style=\"font-size:150%\"><b>Completed Quests:</b></span>]]></value>
      </completedQuests>
      <notLow type="boolean">false</notLow>
      <thanked type="boolean">false</thanked>
      <favorites type="objectlist"></favorites>
      <object name="kv_device">
        <inherit name="container_open" />
        <feature_usegive />
        <alias>Quest PX</alias>
        <feature_container />
        <transparent type="boolean">false</transparent>
        <close type="boolean">false</close>
        <open type="boolean">false</open>
        <hidechildren type="boolean">false</hidechildren>
        <listchildren />
        <isopen />
        <look><![CDATA[It's just your average, run of the mill, super-awesome Quest device. You don't have any actual service inside of the game world<a style="text-decoration:none" href="#" title="Once you've brought your account up to date, service will be reactivated."><sup>1</sup></a>, but you can still receive incoming messages and such.<br/><br/>{command:use quest device:USE THE QUEST PX}]]></look>
        <drop type="boolean">false</drop>
        <dropmsg>They don't make cases for this model, and you don't plan on dropping it until you get one!</dropmsg>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
        </inventoryverbs>
        <listchildrenprefix>The screen reads:</listchildrenprefix>
        <contentsprefix>which is displaying</contentsprefix>
        <entries type="stringlist" />
        <alt type="stringlist">
          <value>Quest PX device</value>
          <value>Quest device</value>
          <value>PX</value>
          <value>device</value>
        </alt>
        <take />
        <scenery type="boolean">false</scenery>
        <visible />
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
        </displayverbs>
        <attr name="feature_switchable" type="boolean">false</attr>
        <hintlist type="stringlist">
          <value>Hint:  USE QUEST PX</value>
        </hintlist>
        <use type="script"><![CDATA[
          game.menuoutputsection = StartNewOutputSection()
          PrintCentered ("<div style=\"background:inherit;padding:12px\" ><br/><img width=\"10%\" <img src=\"" + GetFileURL("quest_square.png")  + "\"  title=\"QUEST PX\" id=\"titleimage\" onload=\"$(this).fadeIn(2000);\" style=\"display:none;\" /><br/><br/><img src=\"" + GetFileURL("viewalerts.png")  + "\"  title=\"Click here to view your alerts!\" id=\"titleimage\" onload=\"$(this).fadeIn(3000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #269261;\"  onclick=\"ASLEvent('HandleButtonClick','view alerts')\" /><br/><br/><img <img src=\"" + GetFileURL("viewbookmarks.png")  + "\"  title=\"Click here to view your bookmarks!\" id=\"titleimage\" onload=\"$(this).fadeIn(4000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #269261;\"  onclick=\"ASLEvent('HandleButtonClick','view bookmarks')\" /><br/><br/><img src=\"" + GetFileURL("viewdocs.png")  + "\" title=\"Click here to view the online Quest documentation!\"  id=\"titleimage\" onload=\"$(this).fadeIn(5000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #269261;\"  onclick=\"ASLEvent('HandleButtonClick','view the Quest documentation')\" /><br/>{if player.loadedrh:<br/><img <img src=\"" + GetFileURL("consulthints.png")  + "\" title=\"Clicking this is a waste of time!\"  id=\"titleimage\" onload=\"$(this).fadeIn(5500);\" style=\"display:none;box-shadow:0px 0px 15px 5px #269261;\"  onclick=\"ASLEvent('HandleButtonClick','hints')\" /><br/><br/><img <img src=\"" + GetFileURL("viewcommands.png")  + "\" title=\"View the command list (for copying and pasting purposes)!\"  id=\"titleimage\" onload=\"$(this).fadeIn(6000);\" style=\"display:none;box-shadow:0px 0px 15px 5px #269261;\"  onclick=\"ASLEvent('HandleButtonClick','scopecommands')\" /><br/>}</div>")
          EndOutputSection (game.menuoutputsection)
          msg ("")
          SetTimeout(1){
            JS.scrollToEnd()
          }
        ]]></use>
        <onswitchon type="script">
          picture ("quest_square.png")
        </onswitchon>
        <ask type="scriptdictionary">
          <item key="time">
            msg ("\"Time is an illusion,\" says a soft, smooth voice.")
          </item>
        </ask>
        <favorites type="objectlist">The Quest Forum</favorites>
        <alerts type="objectlist">kv_welcome_alert; kv_js_post</alerts>
        <object name="kv_welcome_alert">
          <scenery type="boolean">false</scenery>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <alias>NEW ALERT: Welcome, Pix!</alias>
          <look type="script"><![CDATA[
            RemoveObject (kv_welcome_alert)
            if (not ListContains(kv_device.alerts, kv_welcome_alert)) {
              list add (kv_device.alerts, kv_welcome_alert)
            }
            msg ("<p style=\"border:1px solid black;border-radius:65px;background:black;color:white;font-family:'Droid Sans';padding:19px\"><br/>Pix,<br/><br/>Welcome to the game!<br/><br/>You can enter: <code style=\"color:red\">GAMENAME title</code> to change the title to whatever you please.<br/><br/>Be sure to USE the Quest PX! (As if you didn't know THAT already!)<br/><br/>Oh, and you may need this before the game is over: <br/><span><code style=\"color:red\">JS.eval (\"$('#status').css('top', '0%')\")</code><br/><br/>R.H.<br/><br/></span></p>")
            JS.scrollToEnd ()
            if (HasAttribute(kv_device, "alertsnow")) {
              if (ListContains(kv_device.alertsnow, kv_welcome_alert)) {
                list remove (kv_device.alertsnow, kv_welcome_alert)
              }
            }
            alertCheck
            kv_welcome_alert.alias = "Welcome, Pix! (viewed alert)"
          ]]></look>
        </object>
        <object name="kv_js_post">
          <alias>post about JS</alias>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <visible />
          <scenery type="boolean">false</scenery>
          <fav type="script"><![CDATA[
            msg ("<img src='"+GetFileURL("jspost.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/g60vk5rov0k4uc2sek2nvg/javascript-in-a-command\">View this post in your browser.</a>")
            JS.scrollToEnd ()
          ]]></fav>
          <look type="script"><![CDATA[
            if (HasAttribute(kv_device,"alerts")) {
              if (ListContains(kv_device.alerts, kv_js_post)) {
                list remove (kv_device.alerts, kv_js_post)
              }
            }
            if (HasAttribute(kv_device,"favorites")) {
              if (not ListContains(kv_device.favorites, kv_js_post)) {
                list add (kv_device.favorites, kv_js_post)
                msg ("This post has been automatically added to your Bookmarks. <br>(USE YOUR QUEST DEVICE TO VIEW YOUR BOOKMARKS.)")
              }
            }
            msg ("<img src='"+GetFileURL("jspost.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/g60vk5rov0k4uc2sek2nvg/javascript-in-a-command\">View this post in your browser.</a>")
            RemoveObject (kv_js_post)
            if (HasAttribute(kv_device,"alertsnow")) {
              list remove (kv_device.alertsnow, kv_js_post)
            }
            JS.scrollToEnd ()
            alertCheck
          ]]></look>
        </object>
      </object>
      <object name="kv_book">
        <inherit name="openable" />
        <alias>Pixie's book of magic</alias>
        <visible />
        <feature_container />
        <look><![CDATA[It's a nice, leather tome with gold letters.<br/><br/>{command:READ BOOK}{colour:.}<br/>]]></look>
        <drop type="boolean">false</drop>
        <take />
        <dropmsg>You're not dropping that!'</dropmsg>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <alt type="stringlist">
          <value>book</value>
        </alt>
        <hintlist type="stringlist">
          <value>Hint 1:  Have you tried reading the book?</value>
          <value>Hint 2:  Did you OPEN it before you tried to read it?</value>
          <value>Hint 3:  If you have your side panes on, you can directly interact with the spells in the book when it's open.</value>
        </hintlist>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <read type="script">
          if (kv_book.isopen) {
            scrollsin = NewList()
            foreach (scroll, GetDirectChildren(kv_book)) {
              if (not ListContains(scrollsin, scroll)) {
                list add (scrollsin, GetDisplayAlias(scroll))
              }
            }
            if (ListCount(scrollsin) > 0){
              ShowMenu ("Known Spells:", scrollsin, true) {
                HandleSingleCommand ("x " + result)
              }
            }
            else {
              msg ("You haven't copied any scrolls to it yet.")
            }
          }
          else {
            msg ("You'll have to open it first.")
          }
        </read>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <object name="MSG spell">
          <look><![CDATA[{b:Command pattern:}<br/><code style=\"background:lightgray;padding:4px\">msg (#text#)</code>]]></look>
          <scenery />
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Use</value>
          </inventoryverbs>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <drop type="boolean">false</drop>
          <alias>MSG Spell</alias>
          <feature_usegive />
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- MSG Spell]]></listalias>
          <use type="script"><![CDATA[
            msg ("<h1> Please enter a string or an {expression}:</h1><br/><center><h2><b>[ YOU HAVE ONE TURN, THEN PLAY WILL RESUME ] </b></h2></center>")
            get input {
              msg ("RESULT:")
              msg (result)
            }
          ]]></use>
        </object>
        <object name="DIR spell">
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Use</value>
          </inventoryverbs>
          <drop type="boolean">false</drop>
          <scenery />
          <feature_usegive />
          <alias>DIR Spell</alias>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- DIR Spell]]></listalias>
          <look type="script"><![CDATA[
            msg ("{b:Command Pattern:}<br/><br/><code style=\"background:lightgray;padding:4px\">DIR;LS</code><br/>")
          ]]></look>
          <use type="script">
            HandleSingleCommand ("dir")
          </use>
        </object>
        <object name="kv_tor_spell">
          <alias>TOR Spell</alias>
          <look><![CDATA[<pre><code>^(?<text1>cipher|decipher|code|decode|scramble|decipher) \(\"(?<text2>.*)\", (?<text3>.*)\)$</code></pre><br/><br/>Example: decipher ("Mjqqt", 5)]]></look>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- TOR Spell]]></listalias>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
        </object>
        <object name="kv_reverse_ spell">
          <alias>Reverse String Spell</alias>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- Reverse String Spell]]></listalias>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <look>reverse #text#</look>
        </object>
      </object>
    </object>
  </object>
  <object name="Quest Forum">
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <exitslistprefix>You can go to </exitslistprefix>
    <attr name="implementation_notes"><![CDATA[Dark Lizerd's room installed on 8-12-17<br/>]]></attr>
    <alias>Hub</alias>
    <description><![CDATA[{once:So, this is the hub, the nerve center of something that seems very important... }<br/>There are several people wandering around here, working on different things.  <br/>(Sometimes together, sometimes alone.)<br/>{if not DL_Room.visited:<br/>There is a strange, seemingly out of place doorway to the east, which casts an orange light on the floor just this side of it. There is a green field of grass with a desk, which is in the shade of an umbrella and sitting so that it is framed by the doorway. Someone wearing a dark cloak, which covers most of his features, is frantically working at the desk, moving papers around, and sometimes losing one to the ground below. Standing beside him is what looks like a short person covered in fur and wearing a leather skirt.<br/>}{once:<br/>In the southwest corner, by the water cooler, there are two people drinking and talking. When they notice that you are watching them, they excuse themselves and return to work.}<br/>]]></description>
    <hintlist type="stringlist">
      <value>Hint 1:  Have you tried going to it?</value>
      <value>Hint 2:  You can't go to it the first time.</value>
      <value>Hint 3:  The keypad is a red herring.  DL thought it would be funny to annoy you by stopping you the first time you tried to enter his room, but the keypad actually has nothing at all to do with the strange door.  Just try to go to the door twice.  The second attempt will be a success.</value>
    </hintlist>
    <onexit type="script">
      stop sound
    </onexit>
    <enter type="script"><![CDATA[
      SetBackgroundColour ("White")
      if (not Richard Headkid.parent = Quest Forum and not Richard Headkid.hasbeenmoved) {
        MoveObject (Richard Headkid, Quest Forum)
        msg ("<br/>{object:Richard Headkid:RH} appears out of nowhere, stashes a strange pouch into his pocket, and gets to work on the {object:group project}.<br/>")
        diskScript => {
          HandleSingleCommand ("give disk to rh")
        }
        disk.givetorh = diskScript
        list add (disk.inventoryverbs, "Give to RH")
      }
      if (GetBoolean(disk, "has_been_taken_by_rh") and Richard Headkid.parent = game.pov.parent) {
        msg ("<br/>{object:Richard Headkid:Richard Headkid} appears to be waiting for some poor soul to ask a question so he can <del>confuse them</del> try to help them out.<br />")
      }
      if (KV.parent = Quest Forum and not kv_token of appreciation.hasbeenmoved) {
        MoveObject (kv_token of appreciation, player)
        firsttime {
          AddQuest (KV, "cratemart", "Visit Crate Mart and collect the hidden item.")
        }
        MoveObject (kv_complete_alert, kv_device)
        msg ("{b:YOU HAVE A NEW ALERT!}<br/><br/>\"Pixie!\" KV walks up and hands you a token.<br/><br/>\"That's just a small token of my appreciation, sir! <br/><br/>\"I don't know why I made you go through all that just to get it... <br/>\"(I think it may have been XanMag's fault...)\"<br/>")
        msg ("<img width=\"19%\" src=\"" + GetFileURL("kv_token.png")  + "\" />")
        QuestComplete (KV, "token")
        IncreaseScore (10)
        msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 10  ]</b></center>")
        list add (game.scoreList, "Completed KV's gateway: 10 points")
      }
    ]]></enter>
    <firstenter type="script"><![CDATA[
      AddQuest (XanMag, "helpXan", "Help XanMag out with a thing or few.")
      game.xminituserinterface => {
        JS.setDivCount (ToInt(game.lastoutputbeforesave) * 3)
        if (game.online) {
          SetTimeout (2) {
            JS.updateLocation (game.locationmsg)
          }
        }
        game.classiclocation = false
        JS.eval ("$('div#commandPane').insertBefore('#inventoryLabel')")
        JS.setPanes ("black", "white")
        JS.setCommands ("Look;Get All;UNDO;Wait;Save;ClearScreen;Panes", "black")
        JS.setCss ("#gamePanes", "background:black")
        JS.setPanes ("black", "white")
        JS.addText (game.css)
        JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;")
        JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
        JS.setPanes ("black", "white")
        JS.setCommands ("Look;Get All; UNDO;Save;Clear the screen;Wait;Hide Panes")
        JS.setCss ("#location", "background:#296231")
        JS.setCss ("#status", "background-image:none;")
        JS.setCss ("#status.ui-widget-header", "background:#296231;")
        JS.setCss ("#status", "border:1px solid;")
        JS.setCss ("#gameBorder", "box-shadow:0px 0px 15px 5px black;")
        JS.setCss ("body", "background-color:#296231")
        JS.setCss ("#gameContent", "background-color:white")
        JS.setCss ("#gamePanes", "background:black")
        JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;")
        JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
        game.defaultbackground = "White"
        JS.setCss ("html, body", "background-image:none")
        oe => {
          JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;")
          JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
          SetBackgroundColour ("White")
          SetBackgroundColour ("White")
          JS.setCss ("html, body", "background-image:none")
          JS.setCss ("body", "background:#296231")
          JS.setCss ("#gameContent", "background:white")
        }
        game.pov.parent.beforeenter = oe
      }
      alertCheck
    ]]></firstenter>
    <beforefirstenter type="script">
      addHint (The Quest Forum, "Try examining it.")
      if (DictionaryContains(game.povstatusattributes, "money")) {
        dictionary remove (game.povstatusattributes, "money")
      }
      JS.setCss ("body", "background-color:#296231")
      JS.setCss ("#gamePanes", "background-color:black")
      // JS.setCss ("#commandPane", "display:block")
      SetupSidenav
      JS.setCss ("#status", "display:block")
      JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;")
      JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
      EnableTurnScript (kv_command_prompt_randomness)
      JS.eval ("$('#statusVarsLabel,#statusVarsAccordion').remove();")
      FinishTurn
      game.turns = 0
    </beforefirstenter>
    <beforeenter type="script">
      JS.eval ("$('#status').css('max-height','none');")
    </beforeenter>
    <destinations type="objectlist"></destinations>
    <object name="XanMag">
      <inherit name="namedmale" />
      <inherit name="container_limited" />
      <alt type="stringlist">
        <value>XM</value>
      </alt>
      <listalias>XM</listalias>
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <transparent />
      <hidechildren />
      <listchildren />
      <maxobjects type="int">1</maxobjects>
      <scenery type="boolean">false</scenery>
      <TaskCount type="int">3</TaskCount>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Speak to</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Drop</value>
      </inventoryverbs>
      <nocopy type="boolean">false</nocopy>
      <maxScore type="int">115</maxScore>
      <look type="script">
        firsttime {
          msg ("XanMag is a pretty normal fellow upon inspection.  His shirt is old and adorned with two Bells - apparently a beer logo - and his jeans are old and snug around his frumpy waist.  He is bouncing between activities as you would expect an over-caffeinated teenager with A.D.D. would despite the fact that he is not over-caffeinated, not a teenager, and has never been diagnosed as having attention deficit disorder.  Currently he {random:is scouring through the forum posts.:is fiddling with his iPhone.:is taking a long 'sip' from his fancy beer.:is flipping between browser tabs.:is listening to music streaming out of his laptop.:appears to be daydreaming.}")
        }
        otherwise {
          msg ("XanMag is easily distracted by all the stimuli around him.  Currently his focus is on {random:scouring through the forum posts.:fiddling with his iPhone.:\"sipping\" his fancy beer.:flipping between browser tabs.:listening to music streaming out of his laptop.:the enthralling daydream he is having.}")
        }
        DisplayHttpLink ("Visit XanMag's profile page.", "https://textadventures.co.uk/user/view/emxhs1hs8uaib5hfblmp4a/xanmag", false)
      </look>
      <speak type="script"><![CDATA[
        if (GetBoolean(XanMag, "aware")) {
          firsttime {
            msg ("\"Whoa,\" Xan says, seeming startled again.  \"What's up, Pixie?  Got any questions for me?  I'd love to help.\"  You realize he isn't real good at helping but he certainly does try.")
          }
          otherwise {
            msg ("You startle him with your comment, but he gathers himself and says, \"What's up?  Feel free to ask me about anything.  And I literally mean <i><b>ANYTHING</i></b>\"  You nod, but wonder how much help he could actually be to you.")
          }
        }
        else {
          msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you said.\"  With that, he returns to his tasks.")
          SetObjectFlagOn (XanMag, "aware")
        }
      ]]></speak>
      <changedTaskCount type="script"><![CDATA[
        if (XanMag.TaskCount = 2) {
          msg ("\"You really are something special, Pixie.  Your wonders know no bounds.  But,\" Xan shrugs and reddens a bit, \"I'm pretty inept as you damn well know.  If there is any chance at all, could you do a couple more things for me?\"  Xan returns to his distractions.<br/><br/>")
        }
        else if (XanMag.TaskCount = 1) {
          msg ("<br/>\"Oh, and, if you don't mind,\" Xan adds, \"There is still one more thing I need help with.  \"Do you mind?\"")
        }
        else if (XanMag.TaskCount = 0) {
          msg ("\"Hmm.\"  A tear wells up in Xan's eye.  \"I don't have the words for your kindness.\"  He thinks a while and disappears behind a curtain.  Odd, you didn't notice that curtain before...<br/><br/>When he returns, Xan hands you a piece of paper and extends you his hand.  You shake it, and with the utmost sincerity, Xan says, \"You, Pixie, are truly appreciated.\"")
          AddToInventory (certificateofappreciationXM)
          IncreaseScore (20)
          PrintCentered ("<b>[Your score has increased by 20!]</b>")
          list add (game.scoreList, "Completed all of XM's tasks: 20 points")
          QuestComplete (XanMag, "helpXan")
        }
      ]]></changedTaskCount>
      <ask type="scriptdictionary">
        <item key="music soundcloud soundation sound bands artists songs"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("\"I love my music,\" XM responds.  \"I've been known to make my own actually.  I've been having some trouble finding that new sound, however.\"  <br/><br/>He looks at you with renewed wonder and continues, \"I'm not sure if you have any experience, but if you run across a cool beat, use this to record it and let me have a listen!\"  With that, he returns to other things.")
              AddToInventory (flash drive)
            }
            otherwise {
              msg ("\"You have any cool, new beats recorded on that flash drive?  If so, let me have a listen!\"")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="iPhone phone cellphone"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"I love my my phone,\" XM responds.  \"Probably spend too much time on it, but, sometimes...\"  The rest of that sentence trails off in a string of unintelligible mumbling and he returns his attention to his phone.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="posts forumposts"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"What a goddamn mess these are,\" he replies.  \"I'd respond to them, but most of these questions I can't answer.\"<br/><br/>He looks at you as if he once again just realies who you are.  \"Oh, thank god.  It's <b><i>YOU</b></i>!  You mind doing something about all this?\"  Xan motions to the posts,mumbles what sounds like a \"Thanks again, bud...\" and returns his attention elsewhere.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="beer drink drinks libation"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"You like this kind, Pix?\"  He holds up a freshly opened bottle and wiggles it at you.  You see the image of a fish and catch the word 'Hear...' on the label.  \"I love this beer here.  Good stuff.\"  Xan takes a long gulp and returns his attention elsewhere.  ")
            firsttime {
              bartender.askedbeerXM = true
              IncreaseScore (2)
              PrintCentered ("<b>[Your score has increased by 2!]</b>")
              list add (game.scoreList, "Asked XM about beer: 2 points")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="laptop"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"Meh.  I use it for just about everything.  You can relate to that right, Pix?  Can't afford my own though so this one is on loan from my school.\"  Xan returns his attention again to his laptop.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="daydream dream"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("After the fourth call of his name, Xan snaps out of whatever trance he was in.  \"Oh, hey, Pix.  Didn't see you there.  Whatcha up to?  Hopefully you plan on hanging out a while.  I'm awfully busy and could use some help around here.\"  He motions to the posts lying around.<br/><br/>By 'help', you understand that he is almost entirely incapable of doing anything on his own with this.  You nod and grin trying to get the patronization out of your mannerisms.<br/><br/>He returns to whatever he was thinking about before you tried conversation.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="browser tabs browsertabs internet"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("He looks over at his laptop.  \"Oh.  You wouldn't be interested in those really.  Just personal browsing.\"  He quickly closes a few... ummm... suspicious looking tabs before you get too nosy.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="fantasy football fantasyfootball"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"I'm sure you have no interest in American Football, Pix, but if you must know...\" Xan rambles on for what feels like hours about his fantasy football team.  He really seems to enjoy verbally eviscerating and demasculating his fellow leaguemates.  It's quite a colorful monologue, but you have no real interest in it and, eventually, after a long while, you notice he has stopped talking and has returned his attention elsewhere.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="teaching teacher teach school students class classroom"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"Oh, hiya, Pix.  It's my job.  It's a love and hate type relationship, but mostly a love thing.  I enjoy teaching, but when it is not summertime, I have a harder time hanging out here in this 'time-sucker' of place.\"  <br/><br/>He returns to one of his many distractions.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="dance dancing"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"I love my music,\" Xan says.  <br/><br/>He flashes a few dance moves that are in perfect rhythm to song streaming from his laptop.  <br/><br/>\"Pretty sweet, huh, Pix?\"  You're not sure if <i>sweet</i> is what you would call that, but you nod your head affirmatively anyway.  Xan smiles and returns to his distractions.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="document worddocument writing author authoring story book"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("Xan looks at you with a skeptical eye.  \"Hm.  You've noticed that, huh?  Well, you are great and all, Pix, but that is kind of personal.  It's writing that I would prefer to keep secret.  <i>No one even knows the <b>name</b> of it yet</i>.\"  Xan looks genuinely concerned and a bit uneasy.  He returns to other things to end the awkwardness.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="anything nothing"><![CDATA[
          firsttime {
            player.said_anything = false
            if (EndsWith(player.currentcommand, "anything")) {
              player.said_anything = true
            }
            msg ("\"Well, that certainly is an interesting concept.  It's almost as interesting as {either player.said_anything:nothing|anything}.  Can you imagine nothing?  Nothing is the absence of anything.  Anything is everything including light and space.  You see, a long, long time ago... like 13.5 billion years ago, there was nothing.  Not even space.  Could you imagine?  Seems bizarre, right?  Well, get this,\" he continues, becoming more and more animated... \"Suddenly there was <i>some</i>thing,\" he gestures, hands flying wildly.  \"Something from... from what?!? What was that what, Pixie?\" He asks, flailing his arms around at... well, at whatever he is seeing in his mind's eye.  \"I'll tell you of the <i>what</i>,\" Xan continues, \"there are these things, called the Higgs-Boson.  I have one right here...\" Xan digs into his pocket and rummages around a bit.<br/><br/>\"Wait.  Look here!\" He pulls his hands violently from his pocket and presents a closed but open palm.  Your attention is drawn to a little brown tablet that inadvertently was ejected from Xan's pocket and has skittered across the floor.  Xan continues, \"You SEE it, Pix?  Do you?\"<br/><br/>You shake your head no.  \"Bingo!  Neither do I!  It has been avoiding me for years and years.  WE <i>know</i> it exists but we haven't been able to isolate it to study it.  Just imagine,\" he continues, still gesturing wildly. \"With this,\" as he references his empty palm, \"We might just be able to explain it ALL!!  There might just be an explanation to the beginning and the end.\"  <br/><br/>Xan trails off and looks around the room as if trying to spot an elusive shadow in a darkened room.  \"Beginning.  End.  What was I saying again?\"  Xan's attention has been redirected to other things. ")
            IncreaseScore (4)
            PrintCentered ("<b>[Your score has increased by 4!]</b>")
            list add (game.scoreList, "Asked XM about {either player.said_anything:nothing|anything}: 4 points")
            MakeObjectVisible (whitepillXM)
            SetObjectFlagOn (XanMag, "aware")
          }
          otherwise {
            msg ("Xan begins his lengthy diatribe on space and the Big Bang and the LHC and the evolution of the cosmos...<br/><br/>Hours later, you come to feeling exhausted.  Better get moving.")
          }
        ]]></item>
        <item key="blunt weed marajuana dank drugs smoke smoking cannabis plant joint joints"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            if (GetBoolean(PlantXM, "weedviewedXM")) {
              firsttime {
                msg ("\"You ain't the Po are you?\"  Xan looks at you with a skeptical eye.   \"Nah, just kidding, Pixie.  Yeah, I like the occasional puff.  How about you?  Oh, you don't have any on you.  Hmm.  Me either.  I can roll a beauty if you can bring me some.\" Xan returns to pretending to be busy with a thousand things.")
                SetObjectFlagOn (PlantXM, "weedableXM")
              }
              otherwise {
                if (Got(bluntXM)) {
                  msg ("\"Smoke 'em if you got 'em.\"  Odd.  He sounds like Rick Moranis in Spaceballs...")
                }
                else {
                  msg ("\"Yep.  Me likey.  You likey?\"  Xan returns to his 'work'.")
                }
              }
            }
            else if (Got(budsXM)) {
              msg ("\"Hey, Pix!  Is that what I think it is, or are you carrying a skunk in your pocket?  Let me see that!\"")
            }
            else {
              msg ("\"Yeah.  What about it?\"  Xan goes back to bouncing around like a long-tailed cat on a porch full of rockers.")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="hk hegemon khan hegemonkhan hege heg"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("\"HK does a lot here, Pix.  You know that.  He has certainly been helpful, like you, to the Quest Forums all these years.\"  At this point, Xan lowers his voice a bit.  \"Although...HK is a mystery/enigma/riddle wrapped up in a conundrum/puzzle/perplexity.  If you know what I mean.\"  <br/><br/>Xan winks at you and looks up quickly in the direction he last saw HK.  \"Who knows though.  He might be up to something.\"")
            }
            otherwise {
              msg ("\"Good dude that HK.  Just keep your eyes up.\"  Xan looks around the room at where he last saw HK before returning to accomplishing so little.")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="quest textadventures text adventures forum"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("Xan chuckles.  \"Why are you asking me?  You are the expert.\"  Xan returns to his work, but quickly turns back around again.  \"Oh.  You're serious.\"  Xan smiles.  \"You just must want to humor me, huh?  I love it here.  Good people.  Good friends.  Excellent helpers.  I can't complain.  Those spammers can be quite annoying though.\"<br/><br/>You bore quickly and Xan continues to babble.  Eventually you've noticed he has returned to his 'work'.")
            }
            otherwise {
              msg ("\"I like it here.  It's challenging and enjoyable.  Thank you for all of your help.\"")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="group project groupproject secret secretproject"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("\"Ummm....\" Xan looks around nervously, holding special attention at where he last spotted KV.  \"We aren't really supposed to talk about that here.  At least... not now.\"  Xan returns to his work.")
            }
            otherwise {
              msg ("\"Sorry, Pix.  I've told you once.  We aren't really allowed to talk about it here.  The 'boss',\" XM says while air-quoting the word 'boss', \"says so.\"")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="kavin richard headkid richardheadkid rh"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("\"That bloody twit?\" XM says in his best, yet still terrible, English accent gesturing to where he last saw RH.  \"He's some sort of savant I think.  Quite brilliant but a little...\" XM pauses to think.  \"A little off maybe? Better keep an eye on that one, Pix.\"  With a hardy slap on the shoulder, XM spins and returns to next-to-nothing.")
            }
            otherwise {
              msg ("\"Quite gifted that one.\"  He waves over at RH.  \"<i>This</i> was his idea in the first place and I think it has turned out just right!\"")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="dark lizerd darklizerd darklizard lizard dl"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            firsttime {
              msg ("\"Odd bird.  Just look at him.\"  He glances over his shoulder to make sure there are no eavesdroppers.  \"He always looks like he is up to something, if you know what I mean.  Or, maybe, he's just thinking up his next great idea.  Either way.  You might want to be wary of that one.\"  Xan returns to his chores.")
            }
            otherwise {
              msg ("\"Good guy, DL.  Right Pix?  Ask him for ideas.  He'll churn up something. Just keep your eyes on him.\"")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="prima primafacie facie"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            if (Contains (pedestalXM,IdeaInAnEnvelopeXM)) {
              firsttime {
                msg ("Xan looks at you and freezes.  His eyes widen.  \"Wait!\"<br/><br/>\"Eureka!\"  He shouts.  \"I've done it.  Wait.  No.  <i>You've</i> done it!  No, wait.  I've got it.  You... Me.   I've... Either way, whatever!\"  Xan exclaims excitedly.  \"I need to get to writing!\"")
                XanMag.TaskCount = XanMag.TaskCount - 1
                IncreaseScore (20)
                PrintCentered ("<b>[Your score has increased by 20!]</b>")
                list add (game.scoreList, "Asked XM about the idea: 20 points")
              }
              otherwise {
                msg ("\"It's coming along nicely thanks to us!\"  Xan gives you a high five and returns quickly to his computer.")
              }
            }
            else {
              msg ("Xan looks at you with a skeptical eye.  \"Hm.  Yeah.  I'm writing a book.  I'm a little obfuscated... opaqued...\"  He pauses and looks confused.  \"I've got writer's block okay?  Sorry.\"  Xan's face lengthens in sadness.  He returns to work.")
            }
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="xm xan mag xanmag himself he"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"Well,\" Xan looks around sheepishly.  \"I yam what I yam,\" he says in a terrible Popeye-like accent.  \"Look at me all you want.  You'll learn everything you need to know.\"")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="posts post forumpost forum"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"There are posts all over this stinking place.  Most are useful but, \"Some are just outright dumb.\"  He laughs and says, \"You know what I mean?\"  Xan returns to doing nothing and somehow makes that look challenging.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
        <item key="computer pc comp"><![CDATA[
          if (GetBoolean(XanMag, "aware")) {
            msg ("\"My computer is not too much to brag about.\"  He flicks it with a backhand before returning to his stuff.")
          }
          else {
            msg ("XanMag seems startled by your voice and looks at you in surprise.<br/><br/>\"You... you're... you're actually a real person?\"  Xan cocks his head and looks at you a little closer.  \"Pix?  Is that you?  It has to be you.  You look like a Pixie.\"  You nod affirmatively and wonder if that was meant to be an insult.  <br/><br/>\"Never expected to actually talk to you face to face.  You are exactly as I imagined you being.\"  Again... you are unsure if that's a compliment, indifference, or an insult.  The smile on XanMag's face though tells you that he meant no harm by his foot-in-mouth approach to conversation.<br/><br/>\"Oh,\" Xan pauses, \"Totally forgot what you asked me.\"  With that, he returns to his tasks.")
            SetObjectFlagOn (XanMag, "aware")
          }
        ]]></item>
      </ask>
      <object name="laptopXM">
        <inherit name="container_limited" />
        <scenery />
        <takemsg>This laptop belongs to XanMag.  He is currently at a "six".  You do not want to see him take it to a "ten".</takemsg>
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <hidechildren />
        <listchildren />
        <maxobjects type="int">1</maxobjects>
        <openmsg>It's already open and the screen can be viewed.</openmsg>
        <closemsg>No point in closing XM's laptop.</closemsg>
        <transparent />
        <nocopy type="boolean">false</nocopy>
        <alias>laptop</alias>
        <alt type="stringlist">
          <value>computer</value>
          <value>pc</value>
          <value>labtop</value>
        </alt>
        <look type="script">
          msg ("You take a quick peak at the laptop while XanMag is distracted.  It's sleek and modern and you wonder how XanMag could afford it on his measly teacher's salary.  Many tabs are open across the top of Chrome, but the screen is currently displaying {random:a fantasy football draft page.:some website called TheChive.:the Soundation home page.:the Soundcloud homepage.:a Yahoo! email page.:a website called Beer Advocate.} You also notice that there is a word document open in the background.")
        </look>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <object name="browser tabsXM">
          <scenery />
          <look>Just a bunch of seemingly unrelated tabs across the top of XM's laptop.</look>
          <alias>browser tabs</alias>
          <alt type="stringlist">
            <value>tabs</value>
            <value>browser</value>
            <value>internet</value>
          </alt>
        </object>
        <object name="word document">
          <look>It's in the background so you can't see it, but it is definitely there.  You wonder what information it contains...</look>
          <scenery />
          <feature_usegive />
          <nocopy type="boolean">false</nocopy>
          <read type="script">
            firsttime {
              msg ("You move the pointer over the word document icon and just before you are able to click it, Xan shoos you briskly away.  \"Sorry, Pix,\" I'd like to show you what I've been writing, but... but... \"It's kind of personal.\"  Xan's face flushes and he returns to other things.")
            }
            otherwise {
              msg ("Evidently, Xan doesn't want you snooping around his personal documents so you leave it be.")
            }
          </read>
          <use type="script">
            msg ("This is not your laptop to use.  Sorry.")
          </use>
          <exit alias="northeast" to="WorldofBeerXM">
            <inherit name="northeastdirection" />
          </exit>
        </object>
      </object>
      <object name="iPhoneXM">
        <scenery />
        <takemsg>No way.  XanMag is very protective of his stuff.</takemsg>
        <alias>iPhone</alias>
        <nocopy type="boolean">false</nocopy>
        <look type="script">
          msg ("It is your standard run-of-the-mill iPhone.")
        </look>
      </object>
      <object name="beerXM">
        <scenery />
        <takemsg>That will never happen.  You want to see XanMag go total apeshit?</takemsg>
        <alias>beer</alias>
        <drink>You try to snatch a quick libation off of Xan's beer, but he deflects your lips with a sharp backhand.  Looks like you'll be getting none of that.</drink>
        <nocopy type="string"></nocopy>
        <look type="script">
          msg ("It looks like XanMag is currently clutching a {random:Boddington's.:Old Speckled Hen.:Breckenridge Vanilla Porter.:Bell's Two Hearted.:Elysian Space Dust IPA.:Guiness.:Murphy's Irish Stout.}")
        </look>
      </object>
      <object name="musicXM">
        <scenery />
        <look>You can't really look at the music XanMag is listening to, can you?</look>
        <takemsg>The music is on the laptop and the laptop is untakeable.  Therefore, you cannot take the music.</takemsg>
        <listen>The music is very quiet but it sounds like you can make out the rhythm's of a {random:Tech N9ne:Hopsin:Dirty Heads:XanMag:Dispatch:State Radio:Atmosphere:Mac Lethal:Mayday:Krizz Kaliko:Sublime:Ces Cru} song.</listen>
        <alias>music</alias>
        <nocopy type="boolean">false</nocopy>
      </object>
      <object name="bluntXM">
        <alias>blunt</alias>
        <visible type="boolean">false</visible>
        <feature_usegive />
        <smell>It smells like you'll be writing a new text adventure after you smoke it!  (All the words will just FALL INTO PLACE!)</smell>
        <alt type="stringlist">
          <value>cigarette</value>
          <value>joint</value>
          <value>fatty</value>
        </alt>
        <look type="script">
          if (GetBoolean(bluntXM, "litXM")) {
            msg ("There are dark embers surrounding a faint orange glow at one end of the blunt.  It appears ready to be smoked.")
          }
          else {
            msg ("It's a big, fat, unlit blunt.  Smells a bit skunky.")
          }
        </look>
        <smoke type="script">
          msg ("You try and take a hit from a cool and unlit cigarette.  It just doesn't seem to work...")
        </smoke>
        <giveto type="scriptdictionary">
          <item key="GalGadotXM"><![CDATA[
            firsttime {
              msg ("\"Thanks, Pix!\"  Gal gives you a light kiss on the cheek.  \"It's a little stressed living in here.  If you know what I mean.\"  She takes the joint from you and it immediately starts to burn.  DAMN.  She <i>IS</i> hot!<br/><br/>She takes a long draw from the cigarette and hands it back to you.  <br/><br/>\"Thanks, dear.\"")
              firsttime {
                IncreaseScore (6)
                PrintCentered ("<b>[Your score has increased by 6!]</b>")
                list add (game.scoreList, "Passed the doobie to the left-hand side: 6 points")
              }
              RemoveObject (bluntXM)
              MoveObject (litbluntXM, player)
            }
            otherwise {
              msg ("\"Are you trying to take advantage of me, you little devil.\"  She wiggles her finger at you and smiles.  \"Sorry, sexy, I just can't risk another draw on that.\"")
            }
          ]]></item>
          <item key="KV">
            firsttime {
              msg ("\"Nah, I don't want RH to show back up.\"  KV shrugs.")
            }
            otherwise {
              msg ("\"Sorry, man.  No can do.\"")
            }
          </item>
          <item key="hegemonkhan">
            firsttime {
              msg ("HK sees your offer and declines.  He returns to deep thinking.")
            }
            otherwise {
              msg ("\"No thanks, Pix.\"")
            }
          </item>
          <item key="Dark_Lizerd">
            msg ("\"Meh.  Not interested.  I have better things to do.\"")
          </item>
          <item key="DarkLizerd">
            msg ("\"Meh.  Not interested.  I have better things to do.\"")
          </item>
          <item key="Richard Headkid">
            firsttime {
              msg ("\"You'll need a flame, or something at least really hot to light that.  And, sorry, I don't have one.  KV doesn't let me play with fire anymore.\"")
            }
            otherwise {
              msg ("\"That's still not lit, man,\" RH says.  \"Find a flame.   ...or something hot.\"")
            }
          </item>
          <item key="XanMag">
            firsttime {
              msg ("\"Your first rodeo, Pixie?\"  Xan laughs.  \"This needs lit.  Here.  Gimme that.\"  He snatches the joint from you and reaches into his pocket.  \"Shit.  I must have lost my lighter.  Just find a flame or something hot enough and light that up.  Bring it back when you are done?\"")
            }
            otherwise {
              msg ("\"Needs lit.  Something hot like a flame would do the trick.\"")
            }
          </item>
        </giveto>
      </object>
    </object>
    <command name="XM dance CMD">
      <pattern>dance; dance to music; dance for xm; dance for xanmag; dance with xanmag</pattern>
      <script>
        msg ("XanMag sees your movement and matches it with much more precision and professionalism.")
      </script>
    </command>
    <object name="whitepillXM">
      <visible type="boolean">false</visible>
      <look>You look closely at the pill.  It's light brown and has the letters AD etched in its surface.</look>
      <alias>brown pill</alias>
      <takemsg>{if BeginsWith(LCase(player.currentcommand), "take")):By take I assume you mean pick up?  }Okay.  Taken.</takemsg>
      <alt type="stringlist">
        <value>adderall</value>
      </alt>
      <eat>You, as far as I know, do not need adderall.  You are completely focused.  You hold on to it rather than tempt fate.</eat>
      <feature_usegive />
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Drop</value>
      </inventoryverbs>
      <nocopy type="boolean">false</nocopy>
      <take type="script">
        if (StartsWith (LCase(player.currentcommand), "take")) {
          msg ("By take I assume you mean pick up?  Okay.  Taken.")
          MoveObject (whitepillXM, player)
        }
        else {
          msg ("Okay.  Taken.")
          MoveObject (whitepillXM, player)
        }
      </take>
      <giveto type="scriptdictionary">
        <item key="XanMag"><![CDATA[
          msg ("You offer the pill to XanMag.<br/><br/>He takes it from you and without pausing long enough to wink, tosses it in his mouth and washes it down with a beer.<br/><br/>A few moments later Xan settles down and gets your attention.<br/><br/>\"Listen, you've been great all these years, Pix.  Go over to that hi-tech interface over there,\" he says, making direct and prolonged eye contact with you, \"and log in.  My password is 'frittata'.  Once you log-in, there will be a little something that pops-up that I need help with.  As always, thanks a ton!\"  <br/><br/>A couple minutes pass and XanMag becomes distracted again.")
          MakeObjectVisible (hitechinterface)
          firsttime {
            IncreaseScore (2)
            PrintCentered ("<b>[Your score has increased by 2!]</b>")
            list add (game.scoreList, "Gave XM his pill: 2 points")
          }
          RemoveObject (whitepillXM)
        ]]></item>
        <item key="Richard Headkid"><![CDATA[
          msg ("\"Don't need it!  I'm focused enough!\"<br/><br/>You highly doubt that, but whatever.")
        ]]></item>
        <item key="GalGadotXM">
          msg ("\"I'm sure that is a perfectly safe little Adderall you have there, Pixie,\" says mumbles, \"But, I'm not the one that needs that.\"")
        </item>
        <item key="Dark_Lizerd">
          msg ("\"No thanks.  I can stay focused, unlike some people,\" DL replies glancing over at XM and RH.")
        </item>
        <item key="DarkLizerd">
          msg ("\"No thanks.  I can stay focused, unlike some people,\" DL replies glancing over at XM and RH.")
        </item>
        <item key="hegemonkhan">
          msg ("HK definitely does not need this!")
        </item>
      </giveto>
    </object>
    <object name="hitechinterface">
      <alias>hi-tech interface</alias>
      <look>It's not really all that hi-tech really.  It's a small keyboard attached to a small monitor.  It seems ready for you to use.</look>
      <visible type="boolean">false</visible>
      <takemsg>It's securely fastened to the thingy.</takemsg>
      <feature_usegive />
      <nocopy type="string"></nocopy>
      <use type="script"><![CDATA[
        msg ("You start by pressing any key.<br/><br/>A single line pops-up:<br/>")
        PrintCentered ("<b><u>PLEASE ENTER PASSWORD NOW:</u></b>")
        get input {
          switch (LCase(result)) {
            case ("frittata") {
              firsttime {
                msg ("You type 'frittata' with the keyboard and the letters pop up on the small monitor.  You press enter and wait.")
                IncreaseScore (4)
                PrintCentered ("<b>[Your score has increased by 4!]</b>")
                list add (game.scoreList, "Entered the correct password into XM's interface: 4 points")
                wait {
                  msg ("Nothing changes on the screen, but you hear a strange <b>zaawhaaaap</b>.  A sound you image would come from tossing a vulture into a giant bug zapper.<br/><br/>Hmmm...<br/><br/>Nothing else.")
                  MakeObjectVisible (mindmelt portal)
                  mindmelt portal.enter => {
                    msg ("As you approach the black hole, you dumb feel the washness over you...  <br/><br/>The last thing you recall is a faint sucking sound...")
                    wait {
                      MoveObject (player, BeatLabXM)
                    }
                  }
                  mindmelt portal.go => {
                    msg ("As you approach the black hole, you the dumbness wash over you...  <br/><br/>The last thing you recall is a faint sucking sound...")
                    wait {
                      MoveObject (player, BeatLabXM)
                    }
                  }
                }
              }
              otherwise {
                msg ("If you haven't noticed, the 'mindmelt' door has already been opened.")
              }
            }
            default {
              msg ("The monitor flickers and goes blank.  Looks like you may need to use it again if you want another shot at this.")
            }
          }
        }
      ]]></use>
    </object>
    <object name="mindmelt portal">
      <look>It's a strange black hole about the size of a manhole cover.  The dark circle is opened and wedged into a corner of the hub.  Just lookin' at it make you feel dumberer. You could probably 'enter portal' if you choose to.</look>
      <scenery type="boolean">false</scenery>
      <visible type="boolean">false</visible>
      <alias>mind-melt portal</alias>
      <alt type="stringlist">
        <value>portal</value>
        <value>mindmelt portal</value>
        <value>mind portal</value>
        <value>black hole</value>
      </alt>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Enter</value>
      </displayverbs>
      <enterverb type="script"><![CDATA[
        msg ("As you approach the black hole, you the dumbness wash over you...  <br/><br/>The last thing you recall is a faint sucking sound...")
        wait {
          MoveObject (player, BeatLabXM)
        }
      ]]></enterverb>
    </object>
    <object name="hegemonkhan">
      <inherit name="namedmale" />
      <alt type="stringlist">
        <value>hk</value>
      </alt>
      <listalias>HK</listalias>
      <attr name="feature_usegive" type="boolean">false</attr>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>HK</alias>
      <nocopy type="boolean">false</nocopy>
      <attr name="feature_startscript" type="boolean">false</attr>
      <hintlist type="stringlist">
        <value>Hint 1:  "HK was too busy with school to collaborate on this one, but he does say, "THANKS, PIXIE!", and he approved his NPC's appearance here."</value>
        <value>Hint 2:  You can ask HK about the forum.</value>
        <value>Hint 3:  You can ask HK about his favorite story.</value>
      </hintlist>
      <speak>HK ignores you.{once:  Try asking him about the forum or his favorite story.}</speak>
      <look type="script"><![CDATA[
        msg ("HK/hegemonkhan/HegemonKhan is smiling and nodding at you, but most of his attention is on his work.<br/><br/>You decide he might not appreciate people bothering him while he's studying and avert your attention elsehere.<br/>")
        DisplayHttpLink ("Visit hegemonkhan's profile page on textadventures.co.uk", "https://textadventures.co.uk/user/view/c09F2iijXkGqmDNIeJwKqA/hegemonkhan", false)
      ]]></look>
      <telltodefault type="script">
        msg ("\"I can't " + text + " because I'm trying to study, Pix.,\" says HegemonKhan.")
      </telltodefault>
      <askdefault type="script">
        msg ("\"I wish I could help, Pixie,\" says HK, \"but I really need to study.\"")
      </askdefault>
      <telldefault type="script">
        msg ("HK nods but doesn't look up from his work.")
      </telldefault>
      <ask type="scriptdictionary">
        <item key="forum site website"><![CDATA[
          firsttime {
            msg ("HK takes/inhales a big/deep breath and...<br/>")
            JS.addText("<p>\"Pixie is the main forum poster (as well as developing quest and writing/creating guides/libraries for us, and whatever else he does as well with quest). Manowar is in charge of the quest servers. Not sure if this includes the quest site/forum, and/or if Pixie is the admins of the quest site/forum or if Manowar is, or both, meh. I hope Jay is still involved/helping/around with quest, but he's definately not been posting anymore, sighs. Jay and Pixie were the most knowledgeable and helpful posters here, but it's just been Pixie now (and KV too... a user who've learned a lot of coding and quest, quickly... sighs). From time to time, Pertex will post too, if there's an unanswered post, as he's also very knowledgeable and knows quest well, like Pixie and Jay. Most are probably busy with real life and/or managing/working on quest behind the scenes, from the public eye/forum-posting.<br/><br/>\"I try to help... too (somewhat code knowledgeable), and we got some other users too, who help, some who're very code knowledgeable and some less so.<br/><br/>\"I think XanMag is one of the quest game review moderators (as the site needed help with getting the games reviewed/organized), but I'm not sure how the site management structure is set up, how much mod power XanMag has, how many moderators/admins, and/or what/how-many type/roles of moderators there are. The site obviously isn't massive (it's not a social site with millions of users and lots of debates/arguments/trolls/flame/hostility wars to deal with), so there's probably not too much management structure.<br/><br/>\"I'm still perplexed at possibly how many accounts KV/Richard Headkid has on here... 'monster forum monster' and 'quest forum quest' users... feel like they're KV/Richard Headkid, too... I can't keep up with lots of his posts...\"  HK laughs and returns to his studies.</p>")
          }
          otherwise {
            msg ("\"I wish I could expound, Pixie,\" says HK, \"but I really need to study.\"")
          }
        ]]></item>
        <item key="story stories movie movies music tv television tv shows anime manga hentai"><![CDATA[
          msg ("HK grins broadly and says, \"can't select one... but can list many favorites, lol<br/>")
          JS.addText ("<p>\"(This will be really long... just doing this off the top of my head, which will be missing a lot of stuff... I'd have to put more work in for a more complete list...)</p><br/><hr><br/><p>\"(still under construction... I'll have to look up more movies/games/books/etc ... as I can't remember them off the top of my head...)</p><br/><p>\"(some of these aren't nessarily my favorites... lol. Most are, but some aren't, but including them anyways, for if anyone is interested in checking them out, and for just what I've seen, and also, some of these aren't really or are hardly as literature/stories too... meh)\"</p><br/>")
          JS.addText ("<hr><br/><p>GAMING:</p><br/><p>NES:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Shadowgate<br/>02. Maniac Mansion<br/>03. Final Fantasy 1+2<br/>04. Little Nemo<br/>05. Mega Man (1 to ?)<br/>06. Crystalis, Willow<br/>07. Zelda (1+2)<br/>08. Super Mario Bros (1-3)<br/>09. Metroid (1)<br/>10. Teenage Mutant Ninja Turtles (1+2)<br/>11. Fester's Quest<br/></code></pre><br/><p>SNES:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Breath of Fire 1+2<br/>02. Lufia 1+2<br/>03. Final Fantasy 5+6<br/>04. OgreBattle: March of the Black Queen (?/?)<br/>")
          JS.addText("05. Zelda: A Link to the Past (3 or 4)<br/>06. Super Mario World<br/>07. Super Metroid (3)<br/>08. Killer Insinct (1)<br/>09. Street Fighter 2<br/>10. Mortal Kombat (1-3, 3:Ultimate)<br/>11. Secret of Mana<br/>12. Chrono Trigger<br/>13. Mega Man X (1-3)<br/>14. 7th Saga<br/>15. Secret of Evermore<br/>16. the Gaia series (Soul Blazer:1/3, Illusion of Gaia:2/3, Terranigma:3/3)<br/>17. Jurassic Park<br/>18. EVO: Search for Eden<br/>19. Road Runner and Wile E. Coyote Death Valley Rally (game was unique/hard due to the road runner's speed and actual use of physics with its speed: inertia: doesn't stop right away: skids forward a bit, lol)<br/>20. Star Fox<br/></code></pre><br/><p>GB:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Zelda: Link's Awakening (3 or 4)<br/>02. Metroid Returns (2)<br/></code></pre><br/><p>N64:</p><br/><pre><code>01. Zelda: Ocarina of Time (5)<br/>02. Zelda: Minora's Mask (6)<br/></code></pre>")
          JS.addText("<br/><p>PS1:</p><br/><pre><code>01. Breath of Fire 3+4<br/>02. Parasite Eve (1)<br/>03. Final Fantasy 7+8<br/>04. OgreBattle: Tactics Ogre (?/?)<br/>05. Metal Gear Solid<br/></code></pre><br/><p>Computer (Apple/PC):</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Might and Magic (4+5)<br/>02. Wizards and Warriors (2000, heuristic park)<br/>03. Diablo 1+2<br/>04. Star Craft (1)<br/>05. Warcraft (1+2)<br/>06. Heroes of Might and Magic 3<br/>07. Pharaoh<br/>08. Civilization (1-4)<br/>09. Fall From Heaven 1 (mod for Civ4:BTS-xpac)<br/>10. Fall From Heaven 2 (mod for Civ4:BTS-xpac)<br/>11. Think Quick<br/>12. Oregon Train<br/>13. Amazon Trail<br/>14. Myst<br/>15. Riven<br/>16. TES: Morrowind<br/>17. Alpha Centauri<br/>18. Outpost<br/>19. Fallout (1+2)<br/>20. The Dig<br/>21. 7th Guest<br/>22. Colonization<br/>23. Sim City, Sim City 2000, Sim City 3000<br/>24. Sim Life<br/>25. Sim Ant<br/></code></pre><br/>")
          JS.addText ("<p>Arcade:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Mortal Kombat (1-3, 3:Ultimate)<br/>02. Street Fighter: Third Strike<br/>03. Killer Instinct (1)<br/>04. The King of Dragons<br/>05. Slaughter House<br/>06. Tekken (1-3)<br/></code></pre><br/><hr><br/><p>Books:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Wheel of Time series (Robert Jordan)<br/>02. Hobbit and Lord of the Rings series (J.R.R. Tolkien)<br/>03. Wizard of Earthsea (Ursula K. Le Guin)<br/>04. Mary Shelley's Frankenstein (Mary Shelley)<br/>05. Crime and Punishment (Fyodor Dostoyevsky)<br/>06. the Adventure series (by Willard Price)<br/>07. The Great Brain (F. Scott Fitsgerald)<br/>08. Where the Red Fern Grows (Wilson Rawls)<br/>09. The Foundation series (Asimov)<br/>10. The Dune series (Frank Herbert)<br/>11. the Ender series (Orson Scott Card)<br/>12. Jurassic Park+World (Michael Crighton)<br/>13. Andromeda Strain (Michael Crighton)<br/>14. The Terminal Man (Michael Crighton)<br/>15. Sphere (michael crighton)<br/>16. The Bhagavad Gita (religion)<br/>17. Bible (religion)<br/>18. The Chronicles of Narnia (C.S. Lewis)<br/>19. Arthurian series (Mary Stewart)<br/>20. The 'I' Inside (Alan Dean Foster)<br/>21. Journey to the Center of the Earth (Jules Verne)<br/>22. Call of the Wild (Jack London)<br/>23. Down River (Will Hobbs)<br/>24. True Confessions of Charlotte Doyle (AVI)<br/>25. The Man Who Was Poe (AVI)<br/>26. Something Upstairs (AVI)<br/>27. Nothing But the Truth (AVI)<br/>28. Never Cry Wolf (Farley Mowat)<br/>29. In the Shadow of the Gargoyle (Neil Gaiman)<br/>30. The Art of War (Sun Tzu)<br/>31. Johnny Tremain (Esther Forbes, most historically accurate)<br/>32. The Black Pearl (Scott O'Dell)<br/>33. Lord of the Flies (William Golding)<br/>34. The Egypt Game (Zilpha Keatley Snyder)<br/>35. The Time Machine (H. G. Wells)<br/>36. the US Constitution (legal)<br/></code></pre><br/><hr><br/><p>comics:</p><br/>")
          JS.addText("<pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>00. (none, I think)<br/></code></pre><br/><hr><br/><p>Movies/Tv-Films (american, asian/martial-arts but NOT anime, live-actor, animated):</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>001. Gladiator (Russel Crow)<br/>002. Underworld (1-5, only 1st was good though, Kate Beckinsale)<br/>003. Resident Evil (1-6, only 1+2 were good though, Mila Jovovich)<br/>004. Silent Hill (1+2, 1 was good but 2 not that good)<br/>005. Star Wars (1-6)<br/>006. Ultra Violet (Mila Jovovich)<br/>007. Equilibrium<br/>008. Braveheart (Mel Gibson)<br/>009. Last of Mohicans<br/>010. A.I. Artificial Intelligence (2001, a sci-fi pinocio story, done really really well)<br/>011. I, Frankenstein<br/>012. The Butterfly Effect<br/>013. The Goonies<br/>014. Flight of the Navigator<br/>015. Hulk (2003)<br/>016. Open Range (2003)<br/>017. Batteries Not Included (1, as 2 sucked)<br/>018. Kungfu Hustle<br/>019. Kiss of the Dragon (Jet Li)<br/>020. Brotherhood of the Wolf<br/>021. Terminator (1-3, Salvation)<br/>022. Red (1 only, as 2 sucked)<br/>023. Congo (Michael Crighton)<br/>024. Jurassic Park (1+2)<br/>025. Eaters of the Dead (michael crighton)<br/>026. I, Robot<br/>027. Aeon Flux (made by MTV surprisingly, but its a really good sci-fi movie)<br/>028. Mortal Kombat (1 only, as the others sucked)<br/>029. Street Fighter (1994 only, as the others sucked)<br/>030. Flight of Dragons<br/>031. The Pistol (about 'Pistol' Pete meravich, the white michael jordan who died young/short-nba-career from drugs, a story about this basketball player)<br/>032. Field of Dreams<br/>033. Lara Croft Tomb Raider (1, as 2 wasn't as good)<br/>034. Fracture<br/>035. Annie (original, 1982)<br/>036. The Sandlot (1, as 2 wasn't as good)<br/>037. Home Alone (1, as the rest weren't as good and just redundent/boring after 1 as well)<br/>038. The Secret of the Nimh (1, as 2 sucked)<br/>039. The Land Before Time (1, as the rest sucked)<br/>040. Stealth<br/>041. Honey I Shrunk the Kids<br/>042. Short Circuit (1+2)<br/>043. The Little Indian in the Cupboard<br/>044. Teenage Mutant Ninja Turtles (1 only: the original, as the rest sucked)<br/>045. The Rocketeer<br/>046. The Patriot (2000, most historically accurate)<br/>047. The Pirates of the Carribean (1, only 1st was good, the rest got too weird for me and weren't very good as well, and were also redudent/boring after seeing jack sparrow personality for first time in first movie)<br/>048. Undisputed (2-4, as 1st didn't have bokya, lol)<br/>049. The One (Jet Li)<br/>050. Ong Bak (1-3, Tony Jaa)<br/>051. The Protector (2005, Tony Jaa)<br/>052. The Legend of the Red Dragon (Jet Li)<br/>053. Iron Monkey (Jet Li)<br/>054. Frozen (disney animated/cartoon film)<br/>055. Tangled (disney animated/cartoon film)<br/>056. Aladdin (disney animated/cartoon film)<br/>057. Little Mermaid (disney animated/cartoon film)<br/>058. Lion King (disney animated/cartoon film)<br/>059. An American Tail (disney animated/cartoon film)<br/>060. Jumanji<br/>061. Willy Wonka and Chocolate Factory (original)<br/>062. October Sky<br/>063. The Ring (1 only, as 2 sucked)<br/>064. Dawn of the Dead<br/>065. Shawn of the Dead<br/>066. 28 Days/Weeks Later (1+2)<br/>067. The League of Extraordinary Gentleman<br/>068. Dragon Heart<br/>069. Pete's Dragon (original animated/cartoon film)<br/>070. The Sword in the Stone (disney animated/cartoon film)<br/>071. Robin Hood (disney animated/cartoon film)<br/>072. Bend It Like Beckem (girl soccer movie)<br/>073. Mr. Holland Opus (about deaf child of a musician)<br/>074. Search for Bobby Fisher (chess movie)<br/>075. The Count of Monte Christo<br/>076. Unfaithful<br/>077. Original Sin<br/>078. King Arthur (2004)<br/>079. Robin Hood: Prince of Thieves (1991)<br/>080. the rurouni kenshin series (live actors)<br/>081. Never Back Down (1 only, as rest sucked)<br/>082. Warrior (2011 -- the more I watch it, the better it gets each time, lol. It actually has a really deep story and etc stuff going on that I didn't realize/appreciate when I first saw it my first time. Tony is just badass in it, this is how real fights happen: the faster you win, the better you're as a fighter, lol. Fans/Spectators obviously don't like, but the best fights are the ones that are over the fastest... hehe. And Tony portrays this in it, hehe)<br/>083. Good Will Hunting (Robin Williams)<br/>084. Patch Adams (Robin Williams)<br/>085. The Fugitive<br/>086. Indiana Jones (only the original 3, as the new-remake: crystal skull whatever, sucked)<br/>087. The Phantom (1996 --- I think I'm like literally the only one who ever saw this and thus also knows of it, lol)<br/>088. Dark Kingdom / Ring of the Nibelungs (2004, kristanna loken, so fkn hot as Brunhilde, done so so so well!)<br/>089. The Grudge (1, as 2 sucked)<br/>090. Cinderella (2015, really good)<br/>091. Stardust (2007, really good)<br/>092. Divergent (1 only, as all the others sucked)<br/>093. Lady and the Tramp (disney)<br/>094. White Fang (only 1, as 2 sucked)<br/>095. Helen of Troy (4 part film/movie, Sienna Guillory as Helen, oo lala!)<br/>096. Oblivion (2013, tom cruise)<br/>097. The Mummy (1+2)<br/>098. The Scorpion King (The Mummy 3)<br/>099. Prince of Persia: The Sands of Time (2010)<br/>100. Chronicles of Riddick (2004)<br/>101. Bridge to Tarabithia<br/>102. Blade (1+2 only, as 3 sucked)<br/>103. Queen of the Damned (2002)<br/>104. Duck Tales: Treasure of the Lost Lamp (1990, really really good, disney)<br/>105. The Never Ending Story (1984)<br/>106. The Wizard (1989, boy who's a wiz at arcade games, runs away to compete in arcade championship)<br/>107. The 3 Musketeers (1993)<br/>108. The 3 Ninjas (1992)<br/>109. Ninja Assassin (2009)<br/>110. The Last Samurai (2003, tom cruise, really really good)<br/>111. The Warrior's Way (2010)<br/>112. Crouching Tiger Hidden Dragon (2000)<br/>113. Rambo (all, except the remake/new one)<br/>114. Die Hard: Live Free or Die Hard (2007)<br/>115. the Aliens series (1-4: Alien:1979, Aliens:1986, Alien 3: 1992, and Alien Resurrection:1997)<br/>116. The Mothman Prophesies<br/>117. Twelve Monkeys (1995, epic sci-fi time-travel movie, that seems to be lost/forgotten now, sighs)<br/>118. From Paris With Love (2010)<br/>119. James Bond: Casino Royale (2006, the rest of the bond films suck)<br/>120. the Matrix trilogy<br/>121. Colombiana (2011, same girl as in Guardians of the Galaxy, she's a really good and sexy actress: Zoe Saldana)<br/>122. the 'mexico' trilogy (El Mariachi:1992, Desperado:1995, Once Upon a Time in Mexico:2003)<br/>123. Machete (2010, and sequel: Machete Kills: 2013)<br/>124. The Mask of Zorro (1998: this was very good, but its sequel wasn't: The Legend of Zorro:2005)<br/>125. Star Trek (2009)<br/>126. Star Trek Into Darkness (2013)<br/>127. Wild Wild West (1999, I didn't find it actually that bad, though it certainly wasn't good, but it was decent, however I mainly like it just for the fanservice/hot-girls, lol)<br/>128. The 5th Element (not very good, but we're introduced to a young, beautiful, and nearly naked Mila Jovovich with pink hair, lol, whom will be our Resident Evil kickass Alice, hehe)<br/>129. Total Recall (2012, omg Kate Beckinsale is psycho-badess sexy in her role in this movie, most epic cat fight ever between her and jessica biel, as well as her vs the male protagonist too, whereas, in Underworld, she's the sexy cool-badass, lol)<br/>130. Miracle (2004, ice hockey movie, really good, true story/history)<br/>131. 300 (awesome, but its sequel sucked)<br/>132. the Batman trilogy (Batmen Begins, The Dark Knight, Batman Rises)<br/>133. Sin City (this was epic! but don't see it 4 times in the theatre in same day, lol, as even with its greatness, it gets boring on the 4th viewing of it, lol lol lol)<br/>134. Kick Ass (2010, as sequel sucked)<br/>135. Kill Bill (1+2)<br/>136. V for Vendetta (2005)<br/>137. Dare Devil (I didn't like it too much, but it's decent and the fight scenes/choreography is good too)<br/>138. The Watchmen (I didn't like it too much, but it's not bad, the fight scenes/choreography is good too)<br/>139. The Karate Kid (1-3, the original trilogy with Ralph machio and pat mugiagi, not the one with the girl karate kid and not the remake with will smith's boy and jacie chan)<br/>140. Serenity (2005, movie of the syfy's Firefly tv series, this movie is really good!)<br/>141. Evil Dead: Army of Darkness (the first two films were boring for me, but I love Army of Darkness)<br/>142. Firestarter (1, and sequel: Firestarter Rekindled)<br/>143. Elvira Mistress of the Dark (1988)<br/>144. Shawshank Redemption (1994)<br/>145. Cool Hand Luke (1967, Joy Harmon car wash, oo lala)<br/>146. Cirque du Freak: The Vampire's Assistant (2009, this is actually a pretty good vampire movie)<br/>147. Pride and Prejudice and Zombies (2016, I actually really like it and thought it was good)<br/>148. The Transporter (1+2 only, as 3 sucked)<br/>149. Dark Prince: The True Story of Dracula (2000, most historically accurate film)<br/>150. Drive (2011, epic!)<br/>151. Eragon (2006)<br/>152. How to Train your Dragon (1+2, disney)<br/>153. Conspiracy Theory (1997, mel gibson, epic/classic)<br/>154. 17 Again (2009)<br/>155. Catwoman (2004, halley barry)<br/>156. Unbreakable (2000)<br/>157. The Taking of Pelham 123 (2009)<br/>158. Sucker Punch (2011),<br/>159. Scott Pilgrim vs the World (2010)<br/>160. Back to the Future (1+2 only, as 3 sucked)<br/>161. Stay Alive (2006)<br/>162. Rocky (1-4, and epic rocky remake: rocky 6, but not creed and not rocky 5)<br/>163. Million Dollar Baby (2004, clint eastward, morgan freeman, girl boxing movie)<br/>164. Cinderella Man (2005, Russel Crow, boxing movie)<br/>165. The Fountain (2006, I liked it, but its not for most people)<br/>166. The Village (2004)<br/>167. Lady in the Water (2006)<br/>168. Signs (2002)<br/>169. Who Framed Roger Rabbit (1988)<br/>170. Cool World (1992)<br/>171. The Negotiator (1998)<br/>172. Coach Carter (2005)<br/>173. John Wick (2014, and sequel: 2017)<br/>174. John Carter (2012)<br/>175. Man of Steel (2013, I loved the warrior chick, \"a good death is its own reward\" and the evolution/trained/bred speech too, fkn sexy girl!, the super-human speed combat/fight choreography was awesome!)<br/>176. Man on Fire (2004, dakota fanning was epic, she made this movie)<br/>177. I Am Sam (2001, dakota fanning was epic, she made this movie)<br/>178. Crank (1+2: 2006, and sequel: 2009, though the sequel wasn't quite as good)<br/>179. The Punisher (2004, fkn epic, whereas the sequel was crap)<br/>180. Spawn (1997)<br/>181. The Avengers (2012)<br/>182. Captain America: The First Avenger (2011)<br/>183. Anaconda (1997, I actually really liked this one, and it had Ice Cube + Jennifer Lopez, hehe)<br/>184. Life (2017)<br/>185. Major Payne (1995)<br/>186. G.I. Jane (1997)<br/>187. Apollo 13 (1995)<br/>188. Dante's Peak (1997)<br/>189. Radio (2003)<br/>190. Snow White and the Huntsman (2012, this was good, but its sequel sucked)<br/>191. Willow (1988)<br/>192. Dredd (2012)<br/>193. Blood: The Last Vampire (2009, the movie sucked, but the fight choreography was awesome)<br/>194. Hitman (2007, but its sequel sucked)<br/>195. The Time Machine (2002, really good movie)<br/>196. Maleficent (2014, disney, live-actors)<br/>197. Hearts In Atlantis (2001)<br/>198. Down Periscope (1996)<br/>199. Beauty and the Beast (1991, disney, animated, not the new live-actor one)<br/>200. The Hunchback of Notre Dame (1996, disney, animated, Esmeralda is disney's sexiest and biggest-breasted girl, hehe, oo lala)<br/>201. The Nightmare Before Christmas (1993, but it's sequel Corpse Bride sucked)<br/>202. How the Grinch Stole Christmas (1966, disney, cartoon/animated film/movie)<br/>203. Beetlejuice (1988)<br/>204. Batman (1989)<br/>205. Mars Attacks (1996)<br/>206: Abraham Lincoln: Vampire Hunter (2012)<br/>207. Caroline (2009)<br/>208. Cutthroat Island (1995, really good female pirate movie)<br/>209. Hook (1991, but the sequel/s sucked)<br/>210. Peter Pan (1953, disney, animated, the original)<br/>211. Doomsday (2008)<br/>212. Water World (1995, I actually liked the movie)<br/>213. A League of their Own (1992, tom hanks, historical: women baseball during WW2)<br/>214. The Terminal (2004, tom hanks)<br/>215. Gods of Egypt (2016)<br/>216. Iron Will (1994, wolf/husky dog sled movie)<br/>217. The Phantom of the Opera (2004)<br/>218. A Sound of Thunder (2005, sci-fi/time-travel movie)<br/>219. Minority Report (2002, really good sci-fi movie)<br/>220. A Time To Kill (1996)<br/>221. A Knight's Tale (2001, heath ledger)<br/>222. Iron Man (2008, the first, as the rest sucked)<br/>223. Knight and Day (2010, tom cruise)<br/>224. Sinbad: Legend of the Seven Seas (2003, disney, animated/cartoon movie)<br/></code></pre><br/><hr><br/><p>Tv Shows/Series (cartoons-animated and live-actors, and also includes educational/science/etc shows too):</p>")
          JS.addText("<br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. He-Man<br/>02. GI-Joe<br/>03. Gargoyles (1+2)<br/>04. Pirates of Dark Water<br/>05. Teenage Mutant Ninja Turtles<br/>06. Transformers<br/>07. Captain Planet<br/>08. Power Rangers<br/>09. VR Troopers<br/>10. Doug<br/>11. Rugrats<br/>12. Hercules (Kevin Sorbo)<br/>13. Xena: Warrior Princess (Lucy Lawless)<br/>14. SeaQuest DSV<br/>15. Star Trek (Kirk)<br/>16. Star Trek: The Next Generation (Picard)<br/>17. Star Trek: Deep Space Nine (Cisco)<br/>18. Star Trek: Voyager (Janeway)<br/>19. Red Planet (disney cartoon, uber short/incomplete series, like a lot of american cartoons back then, sighs)<br/>20. Jayce and the Wheeled Warriors<br/>21. Secret World of Alex Mack (you got to watch this clip, a young teenage Jessica Alba!!!!!: ht.tps://www.youtube.com/watch?v=WREDQvgbLIo --- not that pretty/sexy back then, especially with that 80s/90s hair/clothes lol, but man did this ugly duckling turn into a smoking hot swan, lol. The main character isn't jessica alba - she only made a few appearances:minor character)<br/>22. Goof Troop<br/>23. Inspector Gadget<br/>24. Tail Spin<br/>25. Looney Tunes<br/>26. Double Dare (Nickoldeon)<br/>27. Are You Afraid of the Dark? (Nickolodeon)<br/>28. Hidden/Lost Temple (don't know exact name of it, Nickolodeon)<br/>29. American Gladiators<br/>30. Camp ??? (Nickolodeon, not sure on exact name of it either - too lazy to look it up, has 'Ug' camp leader in it)<br/>31. Wild and Crazy Kids (Nickolodeon)<br/>32. Van Hellsing (Syfy)<br/>33. Helix (Syfy)<br/>34. Defiance (Syfy)<br/>35. Dark Matter (Syfy)<br/>36. Killjoys (syfy)<br/>37. Young Riders<br/>38. Matlock<br/>39. Murder She Wrote<br/>40. MacGuyver<br/>41. Lost<br/>42. King Arthur and the Knights of Justice (a football team is teleported back in time, lol)<br/>43. Exo-Squad<br/>44. Chip-n-Dale Rescue Rangers<br/>45. Voltron<br/>46. Thunder Cats<br/>47. Ren and Stimpy<br/>48. The Simpsons<br/>49. Rin Tin Tin the Canine Cop<br/>50. Knight Rider<br/>51. Baywatch (only for pamela anderson, lol)<br/>52. Flipper<br/>53. Earth 2 (unfortunately, this never got many episodes/incomplete, sighs)<br/>54. The 12 Monkeys series (Syfy)<br/>55. Zorro<br/>56. The Magicians (Syfy, has a very good/interesting story/world, but it does have a lot of porno/adult/etc type of content in it, which takes a bit away from its interesting/good story/world, sighs)<br/>57. The Arrow (Oliver McQueen)<br/>58. The Addams Family<br/>59. The Munsters<br/>60. The Twilight Zone<br/>61. Golden Girls (these were some funny grannies, lol)<br/>62. Pawn Stars (History)<br/>63. Shipping Wars (FYI)<br/>64. Duck Dynasty<br/>65. Monsters Inside Me (Animal Planet)<br/>66. Myth Busters<br/>67. Fox News<br/>68. C-Span<br/>69. Top Shot (Military History)<br/>70. Big History<br/>71. Dual Survival (not that good anymore, as it was Cody that really made the show good, and runner up, Joe)<br/>72. The Legend of Mick Dodge<br/>73. Dude You're Screwed<br/>74. I shouldn't Be Alive<br/>75. Destroyed In Seconds<br/>76. Naked and Afraid (it's actually a good show, but lots of guys also like watching it for the naked female bottoms of the sexy ladies... not all are though... lol)<br/>77. Bar Rescue (Spike)<br/>78. Kitchen Nightmares (FYI)<br/>79. Face Off (Syfy)<br/>80. Uncut and Untamed (Animal Planet)<br/>81. Forged In Fire (History)<br/>82. The Shannara Chronicles<br/></code></pre><br/><hr><br/><p>Manga:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Claymore<br/></code></pre><br/><hr><br/><p>Anime (series and/or films):</p><br/>")
          JS.addText("<pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Dragon Ball (and DB Z, DB GT)<br/>02. Code Geass<br/>03. Full Metal Alchemist (and FMA: Brotherhood)<br/>04. Ghost in the Shell: Stand Alone Complex<br/>05. Claymore<br/>06. Shingeki no Kyojin (JP) / Attack on Titan (US)<br/>07. Blood+<br/>08. One Piece<br/>09. Naruto (and Naruto Shippuden)<br/>10. Bleach<br/>11. Trinity Blood<br/>12. Mobile Suit Gundam Wing<br/>13. Vanadies and Lord Marksman<br/>14. Rideback<br/>15. Spice and Wolf<br/>16. Wolf's Rain<br/>17. Ikkitousen (and DD, GG, XX)<br/>18. Tenjou Tenge<br/>19. Highschool of the Dead<br/>20. Fairy Tail<br/>21. Afro Samurai (1+2)<br/>22. Asobi Ni Iku Yo (JP) / Cat Planet Cuties (US)<br/>23. Black Lagoon<br/>24. Date A Live<br/>25. Death Note<br/>26. Chuu Bra<br/>27. B-Gata H-Kei<br/>28. Devil May Cry<br/>29. Eureka Seven<br/>30. Freezing<br/>31. Gai-Rei: Zero<br/>32. Gantz<br/>33. Girls Bravo<br/>34. Grenadier<br/>35. Gunslinger Girl<br/>36. Hajimeta No Gal<br/>37. Hellsing (and Ultimate)<br/>38. Highschool DxD (and Born and New)<br/>39. Hundred<br/>40. Jyu Oh Sei (JP) / Planet of the Beast King (US)<br/>41. Berserk (only seen the old/original, haven't watched the newly done one yet)<br/>42. Kobayashi-san Chi No Maid Dragon<br/>43. Kuragehime<br/>44. Kyoushoku Soukou Guyver (2005)<br/>45. Medaka Box (and Abnormal)<br/>46. Noien<br/>47. Oda Nobuna no Yabou<br/>48. My Little Sister Can't Be This Cute<br/>49. Phantom: Requiem for the Phantom<br/>50. Rosario to Vampire<br/>51. Rurouni Kenshin (both the long series and the 4-part origin ova films, but hadn't watched the Inferno ovas yet)<br/>52. S-CRY-ED<br/>53. Samurai Champloo<br/>54. Seiken No Blacksmith (JP) / The Sacred Blacksmith (US)<br/>55. Seirei no Moribito<br/>56. Kenichi<br/>57. Shinmai Maou no Testament<br/>58. Soul Eater<br/>59. Sword of the Stranger<br/>60. Tetsuwan Birdy Decode (JP) / Birdy the Mighty: Decode (US)<br/>61. The Big O<br/>62. Soul Taker<br/>63. Tokko<br/>64. Valkyrie Drive: Mermaid<br/>65. Witchblade<br/>66. Chobits<br/>67. Darker than Black<br/>68. Elfen Lied (make sure you spell 'LIED', as there's a hentai with nearly the same name: Elfen Laid - ya, whoopsy, so be careful!)<br/>69. Full Metal Panic<br/>70. Gankutsuou: The Count of Monte Cristo<br/>71. Grappler Baki<br/>72. MAR (marchen awakens romance)<br/>73. Mushishi<br/>74. Shikabane Hime<br/>75. Solty Rei<br/>76. Desert Punk<br/></code></pre><br/><hr><br/><p>Music/Songs/Bands:</p><br/><pre style=\"white-space: pre-wrap; word-break: keep-all;\"><code>01. Within Temptation<br/>02. Evervescence<br/>03. Epica<br/>04. Nightwish (back with Tarja only)<br/>05. Eminem<br/>06. Luca Turilli<br/>07. Kelly Clarkson<br/>08. Pink<br/>09. Claymore<br/></code></pre>")
        ]]></item>
      </ask>
    </object>
    <object name="DL_Keypad">
      <visible type="boolean">false</visible>
      <alias>keypad</alias>
      <takemsg>You pull on the keypad, but it is securely attached to the wall... Besides, what use is the keypad all by it's self?</takemsg>
      <hintlist type="stringlist">
        <value>Hint 1:  Have you tried taking it?</value>
        <value>Hint 2:  You can't take it.</value>
        <value>Hint 3:  The keypad is a red herring.  DL thought it would be funny to annoy you by stopping you the first time you tried to enter his room, but the keypad actually has nothing at all to do with the strange door..</value>
      </hintlist>
      <look type="script"><![CDATA[
        msg ("Just like a standard phone {object:DL_Keypad: keypad}, it has 10 numbers and the \"#\" and \"*\" keys.<br/>You notice a {object:DL_Card:card} hanging below the keypad.")
        MakeObjectVisible (DL_Card)
      ]]></look>
    </object>
    <object name="DL_Card">
      <look>The card is blank on this side, but it looks like there is writting on the other side. You turn the card over and read... "Out of Order" on the card... Oh well...</look>
      <visible type="boolean">false</visible>
      <alias>card</alias>
      <take type="script"><![CDATA[
        msg ("You take the card and hang it around your neck and walk around for a moment. You notice everyone is watching you, and you start to feel just a bit more daft than you normally would, so you remove the sign from around your neck and hang it back on the keypad. (Maybe after a few drinks, you might try the sign again.)")
        firsttime {
          IncreaseScore (1)
          list add (game.scoreList, "Took DL's card: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS JUST INCREASED BY 1  ]</b></center>")
        }
      ]]></take>
    </object>
    <object name="Dark_Lizerd">
      <inherit name="namedmale" />
      <visible type="boolean">false</visible>
      <alt type="stringlist">
        <value>DL</value>
        <value>dark</value>
        <value>lizard</value>
        <value>lizerd</value>
      </alt>
      <listalias>Dark Lizerd</listalias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <look><![CDATA[He looks just like the one in the other room... You suspect something strange is going on here because you still see him working at the desk. Staying at his side is another creature, much like the one from the other room, but with a dark tan fur.<br/>]]></look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <inroomdescription><![CDATA[{object:Dark_Lizerd} is wandering around here looking like he is hiding from someone. Funny that you did not notice him before. 'He must be really good at hiding in plain sight!' you say to yourself.<br />]]></inroomdescription>
      <alias>Dark Lizerd</alias>
      <nocopy type="boolean">false</nocopy>
      <maxScore type="int">7</maxScore>
      <take type="script"><![CDATA[
        msg ("You pick him up and hold him for a moment but feel silly, so you set him back down. \"Was it fun for you?\" he asks.")
        firsttime {
          IncreaseScore (1)
          list add (game.scoreList, "Picked up the other DL: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS INCREASED BY ANOTHER POINT. ]</b></center>")
        }
      ]]></take>
      <otherone type="script"><![CDATA[
        msg ("You ask Dark Lizerd about the 'other' one on the other room. Oh, that... Well you see, I was having problems translating Basic into Quest so I created a clone of myself to do half of the work, but things didn't go as planned. The clone thought he was me and tried to lock me up when I tried to explain it to him. I managed to escape so now I'm hiding out, out here... By the way, is he making progress?")
        if (not HasAttribute(Dark_Lizerd, "asked")) {
          IncreaseScore (1)
          list add (game.scoreList, "Asked DL about the 'other' DL: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
          Dark_Lizerd.asked = true
        }
      ]]></otherone>
      <clones type="script"><![CDATA[
        msg ("So, how many does he have working there now?")
        if (not HasAttribute(Dark_Lizerd, "asked")) {
          IncreaseScore (1)
          list add (game.scoreList, "Asked DL about clones: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
          Dark_Lizerd.asked = true
        }
      ]]></clones>
      <ask type="scriptdictionary">
        <item key="other one">
          HandleSingleCommand ("other one DL")
        </item>
        <item key="clone clones">
          HandleSingleCommand ("clones DL")
        </item>
      </ask>
    </object>
    <object name="brochure">
      <look><![CDATA[<div style="font-face:Georgia;padding:12px;border:1px solid black;"<center><h1>WELCOME TO YOUR 'THANK YOU' GAME!</h1>Hello, Pixie!<br/><br/>On behalf of everyone who has ever played or created a Quest game, THANK YOU!<br/><br/>As a little reward for all of your efforts, a few of us have gotten together and concocted what is now on your screen.<br/><br/>Each of us has hidden an object somewhere.<br/><br/>Can you find them all?<br/></center><br/></div><br/>]]></look>
      <take />
      <feature_usegive />
      <hintlist type="stringlist">
        <value>Hint 1:  You can take the brochure.</value>
        <value>Hint 2:  You can examine it.</value>
        <value>Hint 3:  You should USE it at least once.  (Hint, hint.)</value>
      </hintlist>
      <alias>brochure</alias>
      <use type="script"><![CDATA[
        msg ("You {random:fan yourself with the brochure.:consider making the brochure into a paper airplane, then think better of it.}")
        firsttime {
          IncreaseScore (1)
          list add (game.scoreList, "Used the brochure: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
        }
      ]]></use>
    </object>
    <object name="The Quest Forum">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <alias>The Quest Forum</alias>
      <nocopy type="boolean">false</nocopy>
      <not_all />
      <takemsg>You can't take it.  Try examining it.</takemsg>
      <look type="script">
        msg ("Click this link to view the Quest forum:")
        DisplayHttpLink ("https://textadventures.co.uk/forum/quest", "https://textadventures.co.uk/forum/quest", false)
      </look>
      <fav type="script">
        msg ("Opening page in browser...")
        JS.goUrl ("https://textadventures.co.uk/forum/quest")
      </fav>
    </object>
    <object name="group project">
      <scenery type="boolean">false</scenery>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <hintlist type="stringlist">
        <value>Hint 1:  You can try all day and all night long, but you'll NEVER get a peek at the project! (BWAHAHAHA!)</value>
      </hintlist>
      <alias>group project</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <not_all />
      <look type="script"><![CDATA[
        roll = NewObjectList()
        foreach (o, AllObjects()) {
          if (GetString (o, "gender") = "he") {
            if (o.parent = Quest Forum) {
              list add (roll, o)
            }
          }
        }
        if (ListCount(roll) > 0) {
          man = PickOneObject(roll)
          theman = GetDisplayName(man)
        }
        msg (theman + " moves in front of the screen just before you can {random:get a peek.:get a good look.:sneek a peek.:see what these guys are really working on.}")
      ]]></look>
    </object>
    <command name="travel_from_hub">
      <pattern>xyzzy;travel;t</pattern>
      <script>
        ShowMenu ("Travel to where?", Quest Forum.destinations, true) {
          msg ("You travel in some unspecified manner...")
          game.pov.parent = GetObject(result)
        }
      </script>
    </command>
    <object name="GeneralDiscussionPostXM">
      <visible type="boolean">false</visible>
      <alias>general discussion post</alias>
      <takemsg>You can't take it. Try examining it.</takemsg>
      <read>Just examine it please.</read>
      <look type="script"><![CDATA[
        msg ("<img src='"+GetFileURL("generalpost.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/general/topic/zi3qvd_s0kup9dabfes6rw/for-all-you-imbibers-out-there\">View this post in your browser.</a>")
        firsttime {
          GeneralDiscussionPostXM.viewedXM = true
          IncreaseScore (5)
          PrintCentered ("<b>[Your score has increased by 5!]</b>")
          list add (game.scoreList, "Looked at XM's post: 5 points")
        }
      ]]></look>
    </object>
    <object name="RH desk">
      <inherit name="surface" />
      <inherit name="kvtype" />
      <alias>Richard Headkid's desk</alias>
      <visible />
      <scenery type="boolean">false</scenery>
      <feature_container />
      <hidechildren />
      <listchildren type="boolean">false</listchildren>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <not_all />
      <nocopy type="boolean">false</nocopy>
      <hintlist type="stringlist">
        <value>Hint 1:  Have you tried moving it?</value>
        <value>Hint 2:  You can't move it.</value>
        <value>Hint 3:  Have you tried climbing onto it?</value>
        <value>Hint 4:  You can't climb onto it.</value>
        <value>Hint 5:  The desk is only there to put things on.</value>
      </hintlist>
      <pushable />
      <push>You push it a little.  It barely moves.</push>
      <takemsg>You'd rather not touch it.{once:  (It's the opposite of clean.)}</takemsg>
      <look type="script">
        if (Richard Headkid.parent = Quest Forum) {
          msg ("\"Sorry, Pix,\" says RH before you can get a good look. \"That's top secret stuff, right there!\"")
          RH desk.hidechildren = true
        }
        else {
          RH desk.listchildren = true
          msg ("")
        }
      </look>
      <object name="rh_PC">
        <inherit name="switchable" />
        <inherit name="kvtype" />
        <feature_container />
        <feature_switchable />
        <feature_usegive />
        <switchonmsg><![CDATA[&nbsp;]]></switchonmsg>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Switch on</value>
          <value>Switch off</value>
        </displayverbs>
        <alias>PC</alias>
        <hintlist type="stringlist">
          <value>Hint 1:  Have you turned it on?</value>
        </hintlist>
        <takemsg>That would be stealing.</takemsg>
        <not_all />
        <look type="script">
          if (rh_PC.switchedon) {
            HandleSingleCommand ("x monitor")
          }
          else {
            msg ("The PC is off.")
          }
        </look>
        <onswitchon type="script"><![CDATA[
          if (not rh_screen.switchedon) {
            rh_screen.switchedon = true
            msg ("<br/>You switch on the monitor as well.<br/>")
          }
          if (not KVs room.visited) {
            msg ("The PC whirrs to life...<br/>")
            if (not HasAttribute(rh_PC, "switchedononce")) {
              msg ("A new shade of black appears on the screen, then a message slowly appears...<br/><hr><br/><center style=\"background:black;border-radius:25px\"><br><br><img width=\"59%\" src=\"" + GetFileURL("gameon.png")  + "\"  id=\"titleimage\" onload=\"$(this).fadeIn(10000);\" style=\"display:none\" /><br/><br/><br></center><br/><br/><center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
              rh_PC.switchedononce = true
              MakeObjectVisible (rh_screen)
              rh_ANY key.scenery = false
              IncreaseScore (1)
              list add (game.scoreList, "Switched on the PC: 1 point")
              JS.eval ("setTimeout(function(){scrollToEndBak();},100);")
            }
          }
          else {
            msg ("Nothing happens.")
          }
        ]]></onswitchon>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Switch on</value>
          <value>Switch off</value>
        </inventoryverbs>
      </object>
      <object name="rh_ANY key">
        <inherit name="kvtype" />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <prefix>the</prefix>
        <take type="boolean">false</take>
        <scenery />
        <takemsg>You're supposed to PRESS any key, not TAKE any key.</takemsg>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <alias>ANY key</alias>
        <look>You see nothing special about the ANY key.</look>
        <nocopy />
        <hintlist type="stringlist">
          <value>Hint 1:  Press it!</value>
        </hintlist>
        <hit>You try to hit it, but it dodges the blow.</hit>
        <touch>You touch it, but you'll have to apply more pressure for anything to happen.  Perhaps you should try pressing it?</touch>
        <kill>You have neither gun nor sword.</kill>
        <pull>You try to pull it, but it simply doesn't wish to be pulled.</pull>
        <move><![CDATA[You try to move the ANY key, but it is impervious to your efforts.<br/>]]></move>
        <taste>It tastes just like chicken.</taste>
        <smell>It smells like your upper lip.</smell>
        <buy>It's not for sale.</buy>
        <climb>{once:You climb to the very top of the ANY key.  "Top of the world, Ma!" you exclaim.  Then you climb back down.}{notfirst:Been there.  Done that.}</climb>
        <lick><![CDATA[You ...um... <br><br>You know what?  No.  This is NOT that kind of game!]]></lick>
        <listen><![CDATA[<sub><i>"press me"</i></sub>]]></listen>
        <not_all />
        <press type="script"><![CDATA[
          msg ("You have initiated <code>blue_Telemat-booth.js</code>...<br/><br/>Reality flickers around you for a brief moment.<br/><br/>Once you regain your focus, you see a message on the screen.<br/><br/><div style=\"background:black;color:white;border-radius:25px\"><p style=\"padding:9px;font-family:Droid Sans Mono\"><br/>Hi there, Pixie!<br/><br/>You should use <code>cat filename.txt</code> or <code style=\"color:red\">print filename.txt</code> to view some files! (The newest one on the drive right now is README.txt.)<br/><br/>(You should probably peruse blue_Telemat-booth.txt as well...)<br/><br/>I hope you like the game so far!<br/><br/>Best of luck!<br/>Richard Headkid<br/><br/></p></div>")
          MakeObjectVisible (px_blue_telemat_booth)
          MakeObjectInvisible (rh_ANY key)
          IncreaseScore (10)
          list add (game.scoreList, "Pressed the ANY key: 10 points")
          msg ("<br/><center><b>[ Your score has increased by 10 ]</b></center>")
        ]]></press>
      </object>
      <object name="rh_screen">
        <inherit name="switchable" />
        <inherit name="kvtype" />
        <alias>monitor</alias>
        <alt type="stringlist">
          <value>screen</value>
        </alt>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <visible type="boolean">false</visible>
        <gameon>Pix,

How's the game?

Are you into it?

Have you tried using JavaScript in the game?

JS.setCommands ("Look;Wait;Stand", "blue")

The above should work... in fact, anything starting with JS. should work (thanks to you)!

...but that's what this game is all about!

Thanks, Pixie!

PS

Try entering: gamename Pixie Kicks Ass


(Feel free to replace 'Pixie Kicks Ass' with the game name of your choicegameon>
        <feature_switchable />
        <hintlist type="stringlist">
          <value>Hint 1:  You could look at it...</value>
        </hintlist>
        <takemsg>It's not worth the trouble.</takemsg>
        <not_all />
        <look type="script"><![CDATA[
          if (rh_ANY key.visible) {
            msg ("{either rh_screen.switchedon:{once:As soon as you look at it, the screen goes blank, but it sounds as if it's still powered on.}<br/><br/><hr><br/><center style=\"background:black;border-radius:25px\"><br><br><h1>DON'T PANIC!!!</h1><h3>PRESS THE ANY KEY TO CONTINUE</h3><br><br></center><br/><hr>|It's not switched on.}<br/>")
          }
          else {
            msg ("<<div style=\"background:black;color:white;border-radius:25px\"><p style=\"padding:9px;font-family:Droid Sans Mono\"><br/>Hi there, Pixie!<br/><br/>If you look at my PC once in a while, you may find new file listings. (The newest one on the drive right now is README.txt.)<br/>(You should probably peruse blue_Telemat-booth.txt as well...)<br/><br/>I hope you like the game so far!<br/><br/>Best of luck!<br/>Richard Headkid<br/><br/></p></div>")
          }
        ]]></look>
        <read type="script">
          HandleSingleCommand ("x screen")
        </read>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Switch on</value>
          <value>Switch off</value>
        </inventoryverbs>
      </object>
      <object name="rh_numberspic">
        <inherit name="kvtype" />
        <take />
        <alias>strange PNG</alias>
        <feature_usegive />
        <hintlist type="stringlist">
          <value>Hint 1:  Have you tried using it?</value>
          <value>Hint 2:  Yeah... Using it is pointless.  Try dropping it.</value>
        </hintlist>
        <look type="script"><![CDATA[
          // picture ("rh_zv.png")
          msg ("<img src=\"" + GetFileURL("rh_zv.png") + "\" />")
        ]]></look>
        <ondrop type="script"><![CDATA[
          msg ("<img src=\"" + GetFileURL("rh_.png") + "\" />")
          RemoveObject (rh_numberspic)
          MoveObjectHere (rh_pic)
          msg ("<br/>Now that you look at the picture from here, you can see it for what it is! It's RH!<br/>(He's an ASCII character!)")
          firsttime {
            IncreaseScore (1)
            list add (game.scoreList, "Dropped the strange PNG: 1 point")
            msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
          }
        ]]></ondrop>
        <use type="script"><![CDATA[
          msg ("You attempt to use the strange PNG as a towel, but, just before you suck on one corner, you realize there are no nutrients in the corner of the PNG...<br/>")
          msg ("...maybe you should just drop it...<br/>")
        ]]></use>
      </object>
    </object>
    <object name="px_blue_telemat_booth">
      <inherit name="kvtype" />
      <attr name="feature_container" type="boolean">false</attr>
      <alias>blue Telemat booth</alias>
      <usedefaultprefix />
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Enter</value>
      </displayverbs>
      <visible type="boolean">false</visible>
      <not_all />
      <linkcolour>MidnightBlue</linkcolour>
      <hintlist type="stringlist">
        <value>Hint 1:  Have you examined the booth?</value>
        <value>Hint 2:  Did you notice the pop-up?  (It's two words.)</value>
        <value>Hint 3:  Have you entered the booth?</value>
        <value>Hint 4: Enter the booth.</value>
      </hintlist>
      <takemsg>It's too big and bulky.</takemsg>
      <look type="script"><![CDATA[
        msg ("It's just a perfectly normal <span style=\"color:blue !important\">{popup:TeleMat&nbsp;booth:TeleMat booths offer instant travel around the world; just step inside, dial the number of your destination, and you will be instantly teleported there.}.")
      ]]></look>
      <enterverb type="script"><![CDATA[
        MoveObject (player, px_blue_telemat_booth)
        kv_token of appreciation.use => {
          params = NewDictionary()
          dictionary add (params, "object1", kv_token of appreciation)
          dictionary add (params, "object2", kv_slot)
          do (put, "script", params)
        }
        kv_token of appreciation.generatedverbslist = NewStringList()
        list add (kv_token of appreciation.generatedverbslist, "Use")
      ]]></enterverb>
      <onexit type="script"><![CDATA[
        kv_token of appreciation.use => {
          msg ("You can't do that.")
        }
        if (ListContains(kv_token of appreciation.generatedverbslist, "Use")) {
          list remove (kv_token of appreciation.generatedverbslist, "Use")
        }
      ]]></onexit>
      <beforeenter type="script">
      </beforeenter>
      <exit alias="out" to="Quest Forum">
        <inherit name="outdirection" />
      </exit>
      <command name="kv_dialing">
        <pattern>dial #text#;phone #text#;call #text#</pattern>
        <script><![CDATA[
          switch (text) {
            case ("69105") {
              MoveObject (player, px_blue_telemat_booth2)
              firsttime {
                MoveObject (kv_69105alert, kv_device)
                IncreaseScore (5)
                msg ("{b:YOU HAVE A NEW ALERT!}<br/><center><b>[  YOUR SCORE HAS INCREASED BY 5  ]</b></center>")
                list add (game.scoreList, "Dialed 69105 to travel to KV's gateway: 5 points")
              }
            }
            case ("911") {
              msg ("The line is busy.<br/>")
            }
            case ("home") {
              msg ("Oh, no... No E.T. jokes!<br/>")
            }
            default {
              msg ("Something went wrong.")
            }
          }
        ]]></script>
      </command>
      <object name="kv_phone">
        <inherit name="kvtype" />
        <alias>phone</alias>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <attr name="not_all" type="string"></attr>
        <hintlist type="stringlist">
          <value>Hint 1:  The phone is strictly cosmetic.  You can't do anything with it.</value>
        </hintlist>
        <takemsg>It's built into the booth.</takemsg>
        <look type="script"><![CDATA[
          msg ("It's a phone-like thingy. It has buttons.<br/><br/>(You're lucky, you know... If this were and INFOCOM game, you'd have to press each button, one by one, to dial a number...)<br/>")
          if (not kv_buttons.visible) {
            kv_buttons.visible = true
          }
        ]]></look>
      </object>
      <object name="kv_sticky note">
        <inherit name="kvtype" />
        <take type="boolean">false</take>
        <alias>sticky note</alias>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
        </inventoryverbs>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <attr name="not_all" type="string"></attr>
        <hintlist type="stringlist">
          <value>Hint 1:  Have you tried turning it?</value>
          <value>Hint 2: Turn the sticky note.</value>
        </hintlist>
        <takemsg>It's already in the best place it could be.</takemsg>
        <look type="script"><![CDATA[
          msg ("How many leaves were in the pile in Zork. <br>(DIAL THE ANSWER.)<br>")
          kv_sticky note.turn = "You turn the sticky note over.<br>There's a number scribbled on the back:<h3>{command:dial 69105:69105}</h3>"
          kv_sticky note.generatedverbslist = Split("Turn", ";")
        ]]></look>
      </object>
      <object name="kv_slot">
        <inherit name="container_open" />
        <inherit name="kvtype" />
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <alias>slot</alias>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
        </inventoryverbs>
        <attr name="not_all" type="string"></attr>
        <look><![CDATA[It reads:<br/><br/>"INSERT TOKEN"]]></look>
        <hintlist type="stringlist">
          <value>Hint 1:  Examining the slot should give you the only clue you'll need.</value>
          <value>Hint 2:  If you don't know what to do with this slot, you haven't done something yet.</value>
        </hintlist>
        <takemsg>{once:That's what she said!}{notfirst:Impossible.}</takemsg>
        <addscript type="script"><![CDATA[
          if (object = kv_token of appreciation) {
            msg ("You put the token into the slot, but it pops right back out of the the machine. You grab it, then reality flickers<a href=\"#\" style=\"text-decoration:none\" title=\"FOOTNOTE: Reality didn't flicker because you grabbed the token. It flickered because you put the token into the slot!\">*</a>...")
            MoveObject (player, kv_Crate Mart)
          }
          else {
            msg ("You can't do that.")
          }
        ]]></addscript>
      </object>
      <object name="kv_buttons">
        <inherit name="kvtype" />
        <visible />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <attr name="not_all" type="string"></attr>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <alias>buttons</alias>
        <alt type="stringlist">
          <value>button</value>
        </alt>
        <push>You push the buttons. Nothing happens. (Try dialing a number.)</push>
        <press>You push the buttons. Nothing happens. (Try dialing a number.)</press>
        <look><![CDATA[Perfectly normal. Useless here, but perfectly normal.<br/>]]></look>
        <hintlist type="stringlist">
          <value>Hint 1:  The buttons are useless.  They're only here so you won't say I was too lazy to include them!</value>
        </hintlist>
        <takemsg>They are part of the phone.</takemsg>
      </object>
      <command name="kv_dial69105">
        <pattern>69105</pattern>
        <script>
          HandleSingleCommand ("dial 69105")
        </script>
      </command>
    </object>
    <object name="post 23346">
      <alias>post 23346</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <scenery type="boolean">false</scenery>
      <alt type="stringlist">
        <value>post #23346</value>
      </alt>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <nocopy type="string"></nocopy>
      <not_all />
      <look type="script"><![CDATA[
        if (player.loadedrh) {
          if (kv_device.parent=player) {
            firsttime {
              msg ("Post automatically added to your bookmarks. (Enter {command:USE QUEST PX} to view your bookmarks.)")
            }
          }
        }
        msg ("<img src='" + GetFileURL("post23346.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/3524/why-is-quest-unpopular#23240\">View this post in your browser.</a>")
        if (player.loadedrh) {
          if (not ListContains(kv_device.favorites, post 23346)) {
            list add (kv_device.favorites, post 23346)
          }
        }
        JS.scrollToEnd ()
        MakeObjectInvisible (post 23346)
      ]]></look>
      <fav type="script"><![CDATA[
        msg ("<img src='" + GetFileURL("post23346.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/3524/why-is-quest-unpopular#23240\">View this post in your browser.</a>")
      ]]></fav>
    </object>
    <turnscript name="rh_ingame">
      <enabled type="boolean">false</enabled>
      <script><![CDATA[
        if (disk.parent = game.pov) {
          if (not GetBoolean(disk, "has_been_taken_by_rh") and game.pov.parent = Quest Forum and Richard Headkid.parent = Quest Forum) {
            msg ("<br/>\"Hey, Pixie!\" booms {object:Richard Headkid:Richard Headkid}. \"What'cha got there? <br/>\"Is that a {object:disk:planet disk}?!?!<br/>\"Can I see it? Please???\"<br/><br/>")
            DisableTurnScript (rh_ingame)
          }
        }
      ]]></script>
    </turnscript>
    <object name="water cooler">
      <look><![CDATA[The water cooler is empty.  It has no nozzles or knobs.  It apparently only exists for people to gather around in an effort to waste valuable time.<br/>]]></look>
      <scenery />
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <not_all />
    </object>
    <object name="curtain">
      <scenery />
      <look><![CDATA[{once:"Pay no attention to the curtain," says XM, nonchalantly.<br/>}{notfirst:"You can't see that," says XM.<br/>}]]></look>
      <takemsg>That appears to belong to the man behind it.</takemsg>
      <not_all />
    </object>
    <object name="strange doorway">
      <scenery type="boolean">false</scenery>
      <hintlist type="stringlist">
        <value>Hint 1:  Have you tried going to it?</value>
        <value>Hint 2:  You can't go to it the first time.</value>
        <value>Hint 3:  The keypad is a red herring.  DL thought it would be funny to annoy you by stopping you the first time you tried to enter his room, but the keypad actually has nothing at all to do with the strange door.  Just try to go to the door twice.  The second attempt will be a success.</value>
      </hintlist>
      <look><![CDATA[You look through the strange doorway.<br/><br/> There is a green field of grass with a desk, in the shade of an umbrella, sitting so that it is framed by the doorway. Someone wearing a dark cloak, that covers most of his features, is frantically working at the desk, moving papers around, and sometimes loosing one to the ground below. Standing beside him is what looks like a short person covered in fur and wearing a leather skirt.<br/>]]></look>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <takemsg>It's fixed in place.</takemsg>
      <not_all />
      <enterverb type="script"><![CDATA[
        // MakeObjectVisible (DL_Keypad)
        // firsttime {
          // msg ("As you get ready to go through the doorway, you notice a {object:DL_Keypad:keypad} on the wall. ")
          // }
        // otherwise {
          // MoveObject (player, DL_Room)
          // }
        firsttime {
          msg ("Before taking a step, you notice a {object:DL_Keypad:keypad} just next to the door and immediately dismiss it as a red herring...<br/>")
          DL_Keypad.visible = true
        }
        MoveObject (player, DL_Room)
      ]]></enterverb>
    </object>
  </object>
  <object name="DL_Room">
    <description><![CDATA[You are in a large field covered by an off-green grass, and a pale orange sun hangs in the cloudless sky over head. Before you is a desk with scattered {object:papers} all around. There is an {object:DL_umbrella:umbrella} shading the desk.<br/>Behind the desk is a person working hard on some sort of problem.  You watch as he picks up one paper, looks at another, then scribbles a note on both before setting them to the side. You watch as one of the papers slides off the edge of the desk and floats softly to the ground. You watch as the {object:DL_Bast:creature} grabs a paper from the ground and hands it to the person behind the desk, who {random: nods his head after taking the paper.: shakes his head and points to another one.}<br/>In the corners of the room are {object:trees} casting dark shadows underneath. Every now and then, you think you see something move!<br/><br/>]]></description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <attr name="implementation_notes"><![CDATA[This world is not on this planet...<br/><br/>Side note... Extra Dark Lizerds hiding in other worlds could be "fun"...<br/>(but not lizards that are "extra dark"...)<br/>]]></attr>
    <alias>DL's Room</alias>
    <beforefirstenter type="script">
    </beforefirstenter>
    <beforeenter type="script">
      msg ("You step through the doorway and feel like you just stepped onto a descending elevator . You stumble a few steps before catching your balance, but you still feel light headed.")
      QuestComplete (DarkLizerd, "Visit Dark Lizerds room")
      AddQuest (DarkLizerd, "Get the Planet Disk", "Find the Planet Disk")
    </beforeenter>
    <object name="DarkLizerd">
      <inherit name="namedmale" />
      <alt type="stringlist">
        <value>DL</value>
        <value>dark</value>
        <value>lizard</value>
        <value>lizerd</value>
      </alt>
      <listalias>Dark Lizerd</listalias>
      <inroomdescription type="string"></inroomdescription>
      <usestandardverblist type="boolean">false</usestandardverblist>
      <useindividualverblist type="boolean">false</useindividualverblist>
      <look><![CDATA[You see a person wearing a dark grey or black cowl that hides most of his features. For some strange reason, you are not totally comfortable around him. You almost get the feeling he is not quite human.<br/>]]></look>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
      </displayverbs>
      <project>"I'm helping with a secret project for a friend as a way of saying 'thank you'. ...but it's a secret so you can't tell anyone, OK?"</project>
      <papers><![CDATA["I'm trying to translate Basic to Quest, so that I can submit all the Basic projects I've been working on and a few more that I can translate. But the problem is that 'print' is now 'msg', and 'select case' is now 'switch' and 'switch' is also for turning things on and off, and 'input' is now 'GetInput' but there is no variable to collect the answer from, and Quest can convert Arabic to Roman, but only the numbers, and Spaces(5) will print 5 spaces, (or will it'msg' 5 spaces?) and there are objects that can be objects, or not objects, then there is no way to save data to a text file, but there is a way to read that file, but you cannot tell Quest how you want to read it, then you gotta figure out what you read which is hidden in some variable that is pre-programmed into Quest..."<br/><br/>  (5 minutes later, although it felt like hours)... you back away.]]></papers>
      <clones><![CDATA[You ask if there is any way you could help with the work he is working on, to which he replies, "I tried to create a clone of me to help with this work, but it did not turn out so well and I had to lock it away."<br/><br/>From one of the dark trees you hear a voice call out, "I am not the clone you stupid lizard! I am!"<br/><br/>"NO YOU ARE NOT!!!" DL yells back.  "Would a clone know what happened before he was cloned???!!! I think not! Therefore I am the original and not YOU!"<br/><br/>From another tree, you hear, "IDIOT!!! When you were cloned from ME, you learned everything I knew, INCLUDING WHAT HAPPENED BEFORE!!!"<br/><br/>The one at the desk yells back, "Yea??? What about this scar across my forehead! Why would that get cloned?"<br/><br/>(You suspect there is nothing to be gained by listening to any more of this.)]]></clones>
      <story>"The ancient Bastet had a history that covered over a million years," DL explains, "and they had a lifespan of 3000 years, but a disaster crashed their society and, after the fall, their lifespan is only about 50 years. I am still trying to sort out all the details, but, from what I can tell, they were a very peaceful race that never knew wars, crimes or any of that."</story>
      <take type="script"><![CDATA[
        msg ("You pick him up and hold him for a moment but feel silly, so you set him back down. \"Was it fun for you?\" he asks. You notice the creature giggle as she watches what you did.")
        firsttime {
          IncreaseScore (1)
          list add (game.scoreList, "Picked up DL: 1 point")
          msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
        }
      ]]></take>
      <askdefault type="script"><![CDATA[
        msg ("\"Can't you see I'm just a little busy translating Quest to Basic... No, that's not right, I'm translating something to Quest Basic, or was it to Basic Quest??? KILETA FRO KIM TAT!!! Now I confused!! Thanks!!! Now I gotta start over!!! \"<br/><br/>(You back up wondering just how far the tantrum will extend...)<br/>")
      ]]></askdefault>
      <telldefault type="script"><![CDATA[
        msg ("\"Can't you see I'm just a little busy translating Quest to Basic... No, that's not right, I'm translating something to Quest Basic, or was it to Basic Quest??? KILETA FRO KIM TAT!!! Now I confused!! Thanks!!! Now I gotta start over!!! \"<br/><br/>(You back up wondering just how far the tantrum will extend...)<br/>")
      ]]></telldefault>
      <creature type="script"><![CDATA[
        msg ("\"So, what is this creature you have here?\" you ask.<br/><br/>Dark Lizerd looks up at you, then at the creature. \"She is a Bast, or rather, a Child of Bastet. From some research on ancient Earth and ancient Egypt, I discovered that they visited there and taught your people agriculture among other things. Well, the Bastet did, but her people's story is rather a bit sad.\"")
        // set (DL_Bast, alias, Bast)
      ]]></creature>
      <ask type="scriptdictionary">
        <item key="project">
          HandleSingleCommand ("project DL")
        </item>
        <item key="papers">
          HandleSingleCommand ("papers DL")
        </item>
        <item key="clones">
          HandleSingleCommand ("clones DL")
        </item>
        <item key="story">
          HandleSingleCommand ("story DL")
        </item>
        <item key="creature">
          HandleSingleCommand ("creature DL")
        </item>
      </ask>
    </object>
    <exit alias="west" to="Quest Forum">
      <inherit name="westdirection" />
      <message type="string"></message>
      <runscript />
      <script type="script">
        msg ("You stumble out through the door and almost fall down. You feel like a heavy weight is pressing down on you. (strange!)")
        MakeObjectVisible (Dark_Lizerd)
        MoveObject (player, Quest Forum)
      </script>
    </exit>
    <exit name="DLN" alias="north" to="DL_Room">
      <inherit name="northdirection" />
      <lookonly type="boolean">false</lookonly>
      <look>You start to wander to the north to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</look>
      <lockmessage>You start to wander to the north to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you.) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</lockmessage>
      <locked />
    </exit>
    <exit name="DLE" alias="east" to="DL_Room">
      <inherit name="eastdirection" />
      <lookonly type="boolean">false</lookonly>
      <look>You start to wander to the north to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</look>
      <locked />
      <lockmessage>You start to wander to the east to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you.) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</lockmessage>
    </exit>
    <exit name="DLS" alias="south" to="DL_Room">
      <inherit name="southdirection" />
      <lookonly type="boolean">false</lookonly>
      <look>You start to wander to the north to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you.) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</look>
      <locked />
      <lockmessage>You start to wander to the south to see just how far the field extends when you suddenly run smack into a clear wall. (You hear a snickering behind you.) You examine the wall but discover that the view beyond is not painted on the wall, but is instead beyond it.</lockmessage>
    </exit>
    <object name="trees">
      <inherit name="plural" />
      <scenery />
      <look>You start to examine the trees, but something about them makes you nervous so you back away.</look>
      <usestandardverblist type="boolean">false</usestandardverblist>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist" />
    </object>
    <object name="papers">
      <inherit name="plural" />
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <inroomdescription type="string"></inroomdescription>
      <take type="boolean">false</take>
      <takemsg>You reach for the paper, but a long green arm snatches it first. "Thanks, I was looking for that one," he says.</takemsg>
      <look>The scattered papers have all sorts of writing and scribbles, with boxes and arrows pointing to other boxes with circles pointing to other shapes... For a moment you almost understood what you are looking at... Almost.</look>
      <scenery type="boolean">false</scenery>
      <ontake type="script">
      </ontake>
    </object>
    <object name="desk">
      <inherit name="surface" />
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <feature_container />
      <hidechildren />
      <listchildren type="boolean">false</listchildren>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Drop</value>
      </inventoryverbs>
      <look type="script"><![CDATA[
        msg ("The desk is made out of a dark wood, oak perhaps. On top are several piles of {object:papers} with strange writings and scribbles everywhere. {if disk.taken=False:{if globe.visible: Over to one side, sitting on a stack of papers, is a floating, spinning {object:globe} of a planet you don't recognize. He watches you for a moment before speaking. \"That is a globe of my home world, where we are now. If you like it, take it, I got more around here.\"} {if disk.visible: There is a {object:disk} about the size of a hockey puck sitting here.}}<br/>")
        firsttime {
          IncreaseScore (1)
          list add (game.scoreList, "Examined DL's desk: 1 point")
          msg ("<center><b>[ YOUR SCORE HAS INCREASED BY 1 ]</b></center>")
        }
      ]]></look>
      <object name="globe">
        <takemsg>You reach for the globe, but your hand passes right through it. Although you could not get it, it felt like you hand passed through a bubble of water, but you hand is still dry!</takemsg>
        <scenery type="boolean">false</scenery>
        <usedefaultprefix />
        <look>It is a floating, spinning globe of a planet you don't recognize. There are strange land masses with large and small, blue oceans with green tint.</look>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
        </inventoryverbs>
        <hintlist type="stringlist">
          <value>HINT 1: Try taking it.</value>
          <value>HINT 2:  Try pressing the button.</value>
        </hintlist>
        <visible />
        <take type="script">
          msg ("You reach for the globe, but your hand passes right through it. Although you could not get it, it felt like your hand passed through a bubble of water, but your hand is still dry!")
          msg ("\"Here,\" he says and reaches out and touches a {object:disk:disk} that you didn't notice under the globe, and the planet disappears.")
          MakeObjectInvisible (globe)
          MakeObjectVisible (disk)
        </take>
        <changedscenery type="script">
        </changedscenery>
      </object>
      <object name="disk">
        <inherit name="surface" />
        <take />
        <visible type="boolean">false</visible>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <look>It is a disk, about the same size as a hockey puck.  In fact, you would have thought it was one except for the small raised bump on one face.</look>
        <feature_container />
        <scenery type="boolean">false</scenery>
        <alt type="stringlist" />
        <alias>planet disk</alias>
        <feature_usegive />
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
        </inventoryverbs>
        <nocopy type="string"></nocopy>
        <taken type="boolean">false</taken>
        <dropmsg>You watch as the disk hovers in mid air for a moment, then plummets to the ground with a soft thud.</dropmsg>
        <hidechildren />
        <listchildren />
        <listchildrenprefix>It has</listchildrenprefix>
        <ontake type="script">
          SetObjectFlagOn (disk, "taken")
          AddQuest (KV, "giveDiskToRH", "Let a friend check out that planet disk.")
          QuestComplete (DarkLizerd, "Get the Planet Disk")
        </ontake>
        <givesingle type="script">
          if (Richard Headkid.parent = game.pov.parent) {
            HandleSingleCommand ("give disk to rh")
          }
          else {
            msg ("You try to give the disk to no one in particular.")
          }
        </givesingle>
        <ondrop type="script"><![CDATA[
          if (player.loadedrh) {
            if (Richard Headkid.parent = game.pov.parent) {
              msg ("<br>\"What the hell, Pix?!?\" RH asks politely. \"If you're just gonna drop it, you could at least let me see it!\"<br/><br/>You decide he's right, so you pick the disk back up and hand it over.<br/>")
              HandleSingleCommand ("give disk to rh")
            }
          }
        ]]></ondrop>
        <giveto type="scriptdictionary">
          <item key="Richard Headkid"><![CDATA[
            RemoveObject (Richard Headkid)
            QuestComplete (KV, "giveDiskToRH")
            msg ("As soon as you hand the disk over to RH, he produces a Strange Pouch, reaches one hand into it, and disappears!<br/><br/>(You now have access to his {object:RH desk:desk}.)<br/>")
            // MakeObjectVisible (RH desk)
            MoveObject (disk, Richard Headkid)
            SetObjectFlagOn (disk, "been_taken_by_rh")
            list remove (disk.generatedverbslist, "Give to RH")
          ]]></item>
        </giveto>
        <object name="planetdiskbutton">
          <look>A small black button that almost blends into the surface.</look>
          <take type="boolean">false</take>
          <takemsg>How do you expect to take the button off the disk?</takemsg>
          <alias>button</alias>
          <scenery />
          <alt type="stringlist">
            <value>button</value>
            <value>bump</value>
          </alt>
          <drop type="boolean">false</drop>
          <hintlist type="stringlist">
            <value>HINT:  Try pressing the button.</value>
          </hintlist>
          <push type="script"><![CDATA[
            firsttime {
              IncreaseScore (1)
              list add (game.scoreList, "Pressed the planet disk's button: 1 point")
              msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
            }
            if (not ListContains(ScopeVisible(), globe)) {
              MakeObjectVisible (globe)
              msg ("The planet re-appears, and starts to rotate slowly.")
            }
            else {
              MakeObjectInvisible (globe)
              msg ("The planet disappears from view.")
            }
          ]]></push>
          <press type="script">
            do (planetdiskbutton, "push")
          </press>
        </object>
      </object>
    </object>
    <object name="DL_umbrella">
      <alias>umbrella</alias>
      <scenery type="boolean">false</scenery>
      <takemsg>You try to take the umbrella, but it is firmly attached to the ground... Dark Lizerd watches you for a moment as you struggle with it. "Are you done messing with that?" he asks in a rather flat tone. He then moves it to put its shadow back to where he had it in the first place.</takemsg>
      <look>You look at the umbrella and notice the entertaining red and white stripes that start in the center and extend all the way to the edges. There are also some red and gold tassels that hang from around the edges, along with several, foot-long flaps that gently sway in the breeze. Oddly, looking around, you don't notice any other effects of a breeze, nor do you feel one.</look>
    </object>
    <object name="DL_Bast">
      <inherit name="female" />
      <alias>creature</alias>
      <look type="script">
        msg("You look over the rather short, tan fur covered, cat-like creature. She is wearing a simple leather skirt with wide straps that go over her shoulders. There is another leather piece connecting the straps that covers her chest. You notice her watching you intently, and it kinda makes you nervous, but you are not sure why. Maybe it is the way her tail slowly swings from side to side. You almost expect her to jump you at any moment.")
        this.prefix = "the"
      </look>
      <alt type="stringlist">
        <value>cat</value>
        <value>cat person</value>
        <value>cat girl</value>
      </alt>
      <takemsg>You reach for her, but she hisses and backs up, placing the desk between you and her. "That was a warning, maybe after she knows you better you could do that," DL says. "Otherwise, she could be very affectionate."</takemsg>
      <visible />
      <listalias>creature</listalias>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Speak to</value>
        <value>Take</value>
      </displayverbs>
      <useindividualverblist type="boolean">false</useindividualverblist>
      <speak><![CDATA[When you try to talk to her, she blinks as she slowly shakes her head, <i>'no.'</i>]]></speak>
    </object>
  </object>
  <verb name="dl_project">
    <property>project</property>
    <pattern>project</pattern>
    <defaultexpression>"You can't project " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_papers">
    <property>papers</property>
    <pattern>papers</pattern>
    <defaultexpression>"You can't papers " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_help">
    <property>help</property>
    <pattern>help</pattern>
    <defaultexpression>"You can't help " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_otherone">
    <property>otherone</property>
    <pattern>other one</pattern>
    <defaultexpression>"You can't other one " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_clones">
    <property>clones</property>
    <pattern>clones</pattern>
    <defaultexpression>"You can't clones " + object.article + "."</defaultexpression>
  </verb>
  <verb name="kv_press">
    <property>press</property>
    <pattern>press</pattern>
    <defaultexpression>"You can't press " + object.article + "."</defaultexpression>
  </verb>
  <verb name="kv_ride">
    <property>ride</property>
    <pattern>ride</pattern>
    <defaultexpression>"You can't ride " + object.article + "."</defaultexpression>
  </verb>
  <object name="BeatLabXM">
    <alias>Beat Laboratory</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <description type="script"><![CDATA[
      if (GetBoolean(flash drive, "given")) {
        msg ("The sound in here is deafening.  The ceiling is one giant speaker and is vibrating everything in the room.  It is definitely hard to hear in here.  So loud, in fact, that you can't even hear yourself think.  Everything in the room has disappeared, however.  The only thing left behind is the music and the giant number on the floor.<br/>")
      }
      else {
        msg ("The sound in here is deafening.  The ceiling is one giant speaker and is vibrating everything in the room.  It is definitely hard to hear in here.  So loud, in fact, that you can't even hear yourself think.  There is one particularly interesting bank of doo-hickeys here, in front of which is a beat up chair.<br/>")
      }
    ]]></description>
    <enter type="script">
      if (GetBoolean(flash drive, "given")) {
        play sound ("Drums237-drums only.mp3", false, true)
      }
      else {
        play sound ("Fired Up.mp3", false, true)
      }
    </enter>
    <onexit type="script">
      stop sound
      MoveObject (headphoneXM, BeatLabXM)
      if (headphoneXM.worn) {
        RemoveGarment (headphoneXM)
      }
    </onexit>
    <beforeenter type="script">
    </beforeenter>
    <object name="bankofdoohickeys">
      <alias>bank of doo-hickeys</alias>
      <alt type="stringlist">
        <value>computer</value>
      </alt>
      <look>It is a massive wall of levers and switches and buttons and cords and doo-hickeys that you have no name for.  There is, however, a big large button that catches your eye and next to it a small rectangular slot.  </look>
    </object>
    <object name="instrumentsXM">
      <look>A lot of these things you can name but none of which you can really play.  The only instrument that looks worth you time is the digital drum set setting in the corner of the room.</look>
      <scenery type="boolean">false</scenery>
      <alias>instruments</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <play type="script">
        HandleSingleCommand ("play drums")
      </play>
    </object>
    <object name="chairXM">
      <alias>chair</alias>
      <look>It's just a beat up, old chair that seems overused.</look>
      <sit>It smells of XanMag and that immediately turns you off of sitting in it.</sit>
      <takemsg>You cannot take the chair as it is XM's, not yours.</takemsg>
    </object>
    <object name="headphoneXM">
      <inherit name="wearable" />
      <alias>headphones</alias>
      <feature_wearable />
      <attr name="wear_layer" type="int">2</attr>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <look type="script">
        if (headphoneXM.worn) {
          msg ("They are kind of hard to see since they are covering your ears.  They are securely plugged in to some port on the doohickey via a really long cord.")
        }
        else {
          msg ("The headphones are securely plugged into the doohickey bank via a really long cord.  These look like really nice headphones - the noise cancelling type.")
        }
      </look>
      <onafterwear type="script">
        msg ("You put the headphones on and all the noise in the room is canceled out!  Cool!")
        stop sound
      </onafterwear>
      <onafterremove type="script">
        msg ("You remove the headphones and the blaring music returns!")
        play sound ("Fired Up.mp3", false, false)
      </onafterremove>
      <take type="script">
        msg ("You snatch up the headphones.")
        AddToInventory (headphoneXM)
      </take>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Wear</value>
        <value>Remove</value>
      </inventoryverbs>
    </object>
    <object name="drumsXM">
      <look>It's a set of digital drums ready to be played.</look>
      <alias>drums</alias>
      <visible />
      <scenery />
      <play type="script">
        if (GetBoolean (drumsXM,"recordable") and headphoneXM.worn) {
          msg ("You pick up the drumsticks and snap them on the digital drums to test it out.  You can clearly hear your beat through the headphones.  You proceed to hammer out and record one dope-ass beat!")
          SetObjectFlagOn (flash drive, "writtentoXM")
        }
        else if (GetBoolean (drumsXM,"recordable")) {
          msg ("You bang on the drums a bit but because of this loud music, you can't hear anything you are playing!  ")
        }
        else if (headphoneXM.worn) {
          msg ("You pick up the drumsticks and snap them on the digital drums to test it out.  You can clearly hear your beat through the headphones.  You proceed to hammer out one dope-ass beat!")
        }
        else {
          msg ("You bang on the drums for a bit of fun, but you can neither replay what you've played nor can you hear it!!")
        }
      </play>
    </object>
    <object name="rectangularslotXM">
      <inherit name="container_open" />
      <alias>rectangular slot</alias>
      <scenery />
      <alt type="stringlist">
        <value>rectangle</value>
      </alt>
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <hidechildren />
      <listchildren />
      <look type="script">
        if (GetBoolean(rectangularslotXM, "drivenXM")) {
          msg ("The rectangular slot is filled with a small flash drive.")
        }
        else {
          msg ("It's a small (and empty) rectangular slot that looks familiar, especially to someone as tech-saavy as you.")
        }
      </look>
      <addscript type="script">
        if (not object = flash drive) {
          msg ("You can't do that.")
        }
        else {
          if (GetBoolean(rectangularslotXM, "drivenXM")) {
            msg ("You've already put the flash drive in the USB port, you dolt.  And I thought you knew what you were doing??!")
          }
          else if (GetBoolean(flash drive, "writtentoXM")) {
            msg ("There is no need to re-record a beat.  You've already got one on here!")
          }
          else {
            msg ("You plug the flash drive into the rectangular slot.  It fits nicely.")
            SetObjectFlagOn (rectangularslotXM, "drivenXM")
            MoveObjectHere (flash drive)
          }
        }
      </addscript>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
    </object>
    <object name="buttonXM">
      <inherit name="switchable" />
      <alias>button</alias>
      <scenery />
      <feature_switchable />
      <switchonmsg>You push the button and a light just above it begins to blink.</switchonmsg>
      <switchoffmsg>You press the button and the light goes out.</switchoffmsg>
      <look type="script">
        if (IsSwitchedOn(buttonXM)) {
          msg ("Above the button there is a flashing red light and the word 'Record'.")
        }
        else {
          msg ("It's just a button with a small, unlit screen above it.")
        }
      </look>
      <onswitchon type="script">
        SetObjectFlagOn (drumsXM, "recordable")
      </onswitchon>
      <onswitchoff type="script">
        SetObjectFlagOff (drumsXM, "recordable")
      </onswitchoff>
      <push type="script">
        if (GetBoolean(drumsXM, "recordable")) {
          msg ("You push the button and the light fades off.")
          SwitchOff (buttonXM)
          SetObjectFlagOff (drumsXM, "recordable")
        }
        else {
          msg ("You push the button and the light begins to blink.")
          SwitchOn (buttonXM)
          SetObjectFlagOn (drumsXM, "recordable")
        }
      </push>
      <press type="script">
        do (buttonXM, "push")
      </press>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Switch on</value>
        <value>Switch off</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Switch on</value>
        <value>Switch off</value>
      </inventoryverbs>
    </object>
    <object name="mindmelt portal1">
      <look>It's a strange black hole about the size of a manhole cover.  Just looking at it gives you hope for brighter days. You could probably enter it if you choose.</look>
      <scenery type="boolean">false</scenery>
      <visible />
      <alias>mind-melt portal</alias>
      <alt type="stringlist">
        <value>portal</value>
        <value>mindmelt portal</value>
        <value>mind portal</value>
        <value>black hole</value>
      </alt>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Enter</value>
      </displayverbs>
      <enterverb type="script"><![CDATA[
        msg ("As you approach the black hole, you feel smarter and smarter...  <br/><br/>The last thing you recall is a faint sucking sound...")
        // MoveObjectHere (headphoneXM)
        wait {
          MoveObject (player, Quest Forum)
        }
      ]]></enterverb>
      <exit alias="out" to="Quest Forum">
        <inherit name="outdirection" />
      </exit>
    </object>
    <exit alias="northwest" to="WorldofBeerXM">
      <inherit name="northwestdirection" />
      <scenery type="boolean">false</scenery>
    </exit>
    <object name="floorXM">
      <look>It's an etching in the floor.  A number.  "5"</look>
      <alt type="stringlist">
        <value>number</value>
        <value>writing</value>
      </alt>
      <alias>floor</alias>
      <scenery />
      <read>"5"</read>
    </object>
  </object>
  <object name="WordDocumentXM">
    <alias>Word Document</alias>
    <usedefaultprefix />
    <description type="script">
      if (GetBoolean(bluntXM, "smokedXM")) {
        msg ("The room you're in is quite 'trippy'.  It reminds you of the old disco days with the flashing strobelight.  You are in a room, yes, but it is unlike any you have seen before.  The walls, floor and ceiling are a forest green tinted with intersecting gold lines.  The lines occasionally pulse as if filled with energy.  Whirling around the perimeter of the room is a cyclonic column of spinning, blue-white light.")
      }
      else {
        msg ("You are in a room, yes, but it is unlike any you have seen before.  The walls, floor and ceiling are a forest green tinted with a intersecting gold lines.  The lines occasionally pulse as if filled with energy.  Whirling around the perimeter of the room is a cyclonic column of spinning, blue-white light.  Being here is disorienting and it is making you nauseous.")
      }
    </description>
    <object name="swirlingcolumnXM">
      <alias>swirling column of light</alias>
      <look type="script">
        if (GetBoolean(bluntXM, "smokedXM")) {
          msg ("You look at the swirling wall of energy and can definitely make out some... unrandom text swirling in its seas.  In your current state, I bet you could actually read it if you wanted.")
        }
        else {
          msg ("You stand in a room, inside a swirling column of dizzying blue-white lights.  Trying to focus on the blur gives you a headache and makes your stomach lurch.  Before focusing on the floor once again, you can make out what appears to be some lettering flying and dancing within the maelstrom of energy.")
        }
      </look>
      <read type="script"><![CDATA[
        if (GetBoolean(bluntXM, "smokedXM")) {
          if (Got(notepad pencil)) {
            firsttime {
              msg ("You squint and focus on the swirling letters and begin to scribble down all you see in the notebook.  After what feels like hours of extreme concentration, you feel your transcription is complete.")
              SetObjectFlagOn (notepad pencil, "scribedXM")
              msg ("<br/></b>Your high seems to have faded.</b>")
            }
            otherwise {
              msg ("You've already copied everything down.  It's probably still in your notebook.  Try to read your notebook maybe?")
            }
          }
          else {
            msg ("You study the wall of text for a moment and concentrate.  There is definitely some order here and you try and commit it to memory, but it is simply too much for you to remember off the top of your head.")
          }
        }
        else {
          msg ("You squint and focus on the swirling letters:<br/><br/>REV...<br/>unccl....<br/><br/>You cannot proceed any farther.  You promptly vomit all over the floor.<br/><br/><center>[  YOUR HEALTH HAS DECREASED BY 10!  ]</center>")
          DecreaseHealth (10)
        }
      ]]></read>
    </object>
    <exit alias="northeast" to="WorldofBeerXM">
      <inherit name="northeastdirection" />
    </exit>
    <exit alias="southeast" to="daydreamroomXM">
      <inherit name="southeastdirection" />
    </exit>
    <object name="floorXM2">
      <look>It's an etching in the floor.  A number.  "5"</look>
      <alt type="stringlist">
        <value>number</value>
        <value>writing</value>
      </alt>
      <alias>floor</alias>
      <scenery />
      <read>"5"</read>
    </object>
  </object>
  <object name="WorldofBeerXM">
    <alias>World of Beer</alias>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <object name="barXM">
      <look>The bar disappears into the distance.  Weird.  It seems infinitely long.  One bartender stands behind it, working diligently.</look>
      <alias>bar</alias>
    </object>
    <object name="bartender">
      <inherit name="namedfemale" />
      <alt type="stringlist">
        <value>gal</value>
        <value>galgadot</value>
        <value>gadot</value>
        <value>girl</value>
        <value>woman</value>
      </alt>
      <look type="script"><![CDATA[
        firsttime {
          msg ("You glance at the bartender and exclaim, \"DAAAAMN.\"  She looks up at you, winks and smiles, and returns to her bartending duties.  Wait... What?!  That's Gal Gadot.  <i>What is she doing here?</i> you wonder, but you remember that you are inside the mind of XanMag so really anything is possible.<br/><br/>She seems to be working way too hard considering that she is the only one, other than you, in this bar.")
        }
        otherwise {
          msg ("Gal glances up at you and winks.  She returns to her bartending duties with diligence.  ")
        }
      ]]></look>
      <speak type="script">
        msg (" The beautiful bartender is interrupted by your voice and she looks up.  {random: \"Well, hot damn, sexy.\":\"Looking good, Pix.\":\"Oh, looky, looky.\":\"Look at this stud.\":\"My, my, my.  If I weren't just a figment.\":  She mumbles something along the lines of 'What I wouldn't give to get me a piece of...' the rest is mumbled inaudibly.:She stares you up and down and licks her lips.}  The incredibly sexy bartender soaks in your contenance with lustful eyes before returning back to work.")
      </speak>
      <ask type="scriptdictionary">
        <item key="bar">
          msg ("Gal takes a brief break from her hard work and says, \"This is wear he wants me, I guess so I'm glad to be here.\"  Gal returns to working hard behind the bar.")
        </item>
        <item key="music">
          msg ("\"Yes, that is one of the topics I'm fluent in.  The Great and Wonderful XanMag has made that so.\"  Gal winks and returns to bartending.")
        </item>
        <item key="sports golf basketball baseball soccer sport games darts coaching teaching coach teach">
          msg ("Gal doesn't seem to be too impressed talking to you about this but she smiles politely and says, \"Yes, that activity is something I'm willing to talk to Xan about.\"  The beautiful Gal Gadot returns to work.")
        </item>
        <item key="beer"><![CDATA[
          firsttime {
            msg ("\"Well,\" Gal says, \"Xan has a limitless supply of beer here.  If you can tell me his favorite beer, I'll let you leave with it.  If you cannot tell me, I have to assume that...\" Gal pauses and tucks a loose piece of hair behind her ear.  \"I have to assume you have hacked into his thoughts and I will remove you from here at once.\"<br/><br/>She smiles and winks at you.  \"Whenever you are ready just 'order a beer' and we can proceed.\"  Gal returns to working the bar.")
            SetObjectFlagOn (bartender, "askedbeerXM")
          }
          otherwise {
            msg ("Gal pauses from her work and looks up at you, \"Whenever you are ready, just 'order a beer' and we can proceed.\"  <br/><br/>She stares at you and cracks her knuckles as if to give you a warning.  Gal smiles and returns to her bartending duties.")
          }
        ]]></item>
        <item key="xanmag xan xm">
          msg ("\"He's got his head up my ass all the time,\" she sighs.")
        </item>
      </ask>
      <tell type="scriptdictionary">
        <item key="life mylife me pix pixie andy thepixie thepix"><![CDATA[
          firsttime {
            msg ("Well, well, well,\" Gal says with a sheepish smile.  \"Now doesn't <i>THAT</i> sound much more fascinating than...\" <br/><br/>Gal pauses and winks before continuing, \"Please don't mention that to XanMag.  I actually quite like being a figment of his imagination, but he's... he's...\" It seems Gal is having quite the trouble finding the words.<br/><br/>\"He's just so, Xan.  You know what I mean, Pix?\"  <br/><br/>With a wink and a smile, Gal returns to her work behind the bar.")
          }
          otherwise {
            msg ("\"You are very interesting, Pix.\"  She blows you a kiss and continues working.")
          }
        ]]></item>
      </tell>
    </object>
    <object name="taps">
      <look>Holy shit.  The taps are infinite and stretch farther than your eye can see.  There are literally millions of beers to choose from here and each tap is numbered.  If you want a drink, perhaps you should try talking with the bartender.</look>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
    </object>
    <command name="sex gadot xm CMD">
      <pattern type="string"><![CDATA[^(fuck|sex|bang|do|penetrate|hump|kiss|hug|flirt with) (?<object1>.*)$]]></pattern>
      <script><![CDATA[
        if (object1 = bartender) {
          firsttime {
            msg ("You make your move on Gal Gadot and before you can say \"uh...uhhhh.... oh, oh, oh, ooohhhh... aaahhhhhhh\" she politely stops you and says, \"This,\" gesturing to her body, \"only belongs to XanMag.\"  She returns to working behind the bar.  Damn that XM.  I guess you too have <i>your own</i> fantasies, yes?")
          }
          otherwise {
            msg ("You've tried that and XanMag's Gal Gadot has put the kibosh on that.  Damn him.")
          }
        }
        else {
          error ("This is not that kind of game!")
        }
      ]]></script>
    </command>
    <command name="order a beer XM CMD">
      <pattern>order a beer; order beer; order a drink; order drink; place order; put in an order</pattern>
      <script><![CDATA[
        if (GetBoolean(bartender, "askedbeerXM")) {
          firsttime {
            msg ("\"Well,\" she says with a smile, \"Here you go.  It's the only one I have.\"  She reaches into her back pocket and places a post on the bar.  Just as you reach out to take it, a stiff breeze picks it from the bar and whisks it out of the World of Beer.<br/><br/>In the distance you hear a faint sucking sound.<br/><br/>\"Oops.\"")
            MakeObjectVisible (GeneralDiscussionPostXM)
          }
          otherwise {
            if (HasAttribute(GeneralDiscussionPostXM, "viewedXM")) {
              msg ("\"Oh, good!  I'm glad you have found that post.  You can keep it.  Xan has ALL these numbered taps memorized.\"  Gal rolls her eyes and smiles.<br/><br/>She gestures into infinity at the innumerable taps.  \"I can only give you one of these beers to remove from here.  Any more than that and Xan might lose more than the memory of his favorite beer.  We can't have that, can we?\"  Gal laughes lightly.<br/><br/><b>\"So, what is the <u>numbered</u> beer he prefers?\"</b>")
              get input {
                switch (LCase(result)) {
                  case ("11","eleven","bells two hearted","two hearted","2 hearted","2 heart","bells two","hearted","11.") {
                    msg ("\"Well,\" Gal says, unable to hide her surprise, \"That <i>is</i> his favorite beer.\"  She crackles, flashes, and disappears.<br/><br/>Moments later she materializes into existence once more holding a frothy pint of Bell's Two Hearted Ale.<br/><br/>\"Here you go, Pix.\"  She slides the pint down the bar in your direction.  \"For you, no charge.\"  She blows you a kiss just before she disappears once again.")
                    IncreaseScore (7)
                    PrintCentered ("<b>[Your score has increased by 7!]</b>")
                    list add (game.scoreList, "Ordered the correct beer: 7 points")
                    MakeObjectVisible (PintOfBeerXM)
                    MakeObjectInvisible (bartender)
                  }
                  default {
                    msg ("She looks you over with a sad smile on her face.<br/><br/>\"I'm afraid that's not his favorite, Pix.\"  She shakes her head.  \"I can't risk having you run around here taking information willy-nilly.  It's in short supply as it is.\"  Gal hold her hands out and a dark stream of shadow leaps from her finger tips and strikes you square in the chest.  Despite it being quite the turn on, it does hurt a bit...")
                    wait {
                      MoveObject (player, Quest Forum)
                      DecreaseHealth (20)
                    }
                  }
                }
              }
            }
            else {
              firsttime {
                msg ("Gal looks at you suspiciously.  \"I get the feeling you haven't found that post I accidentally misplaced.\"  She pulls her lips back in a show of embarrassment.  Once you've taken a look at it, I can take your order.  Sorry,\" she says, \"put I don't have the time to read to you the nearly infinite selection of taps.\"  She smiles and returns to work.")
              }
              otherwise {
                msg ("\"Sorry, but you'll need to select from that list presented in the post... that I lost.  Let me know when you've found it.\"")
              }
            }
          }
        }
        else {
          msg ("Gal looks at you sympathetically.  \"Why don't we talk about it first, dear?\"  She smiles and returns to her work behind the bar.")
        }
      ]]></script>
    </command>
    <object name="PintOfBeerXM">
      <alias>pint of beer</alias>
      <look>It's a pint of XanMag's favorite beer - Bell's Two Hearted Ale.</look>
      <visible type="boolean">false</visible>
      <take />
      <feature_usegive />
      <drink type="script"><![CDATA[
        firsttime {
          msg ("This beer does look and smell wonderful, but it is not for you, Pix.  I mean, even though I know you deserve it... <br/><br/>Ah, what the hell, it's just a game, right?  Bottoms up!<br/><br/>You lift the glass and drink the beer.  It is absolutely magnificent!  A beer well-deserved, Pixie.<br/><br/>Whoa... what the...?  The glass has magically refilled.  Sweet! This must be the programmer's way of virtually \"buying\" you a beer without actually buying you a beer.  In fact, the programmer feels bad he can't <i>actually</i> buy you a beer in real life.  In it's place, however, is this game.  Hmmm... Looks like you got screwed.")
        }
        otherwise {
          msg ("Good thing this is entirely virtual.  You slam back another beer and another 16 ounces of golden nectar magically take its place.")
        }
      ]]></drink>
      <ontake type="script">
        beerXM.visible = false
      </ontake>
      <giveto type="scriptdictionary">
        <item key="XanMag"><![CDATA[
          msg ("As soon as you pull the beer from your inventory, a spot of drool immediately beads at the corner of XanMag's mouth.  He eyes you for a bit before saying, \"For me?\"<br/><br/>You nod affirmatively and he takes the beer and settles in for a relaxing drink.  A few minutes pass and the beer is all but gone and he looks up from his beer-coma realizing you are still loitering in his personal space.<br/><br/>\"Oh, hey, Pix.\"  Xan holds the empty glass above his head.  \"Cheers!  Thanks so much!\"  <br/><br/>Xan places the empty glass away and returns to his multi-tasking.")
          IncreaseScore (10)
          XanMag.TaskCount = XanMag.TaskCount - 1
          PrintCentered ("<b>[Your score has increased by 10!]</b>")
          list add (game.scoreList, "Gave XM the beer: 10 points")
          RemoveObject (PintOfBeerXM)
          beerXM.visible = true
        ]]></item>
        <item key="Richard Headkid"><![CDATA[
          firsttime {
            msg ("\"Lovely.  Don't mind if I do.\"  Before you can blink, RH has snatched the pint from you and guzzled the beer.  He hands you back an empty glass.  <br/><br/>RH belches the words, \tThank you.\"<br/><br/>Just as you are about to protest Richard's rudeness, you glance down and notice that the pint has magically refilled!")
          }
          otherwise {
            msg ("\"Thanks!\" Richard pounds another beer, and just like the last time, the pint magically refills.")
          }
        ]]></item>
        <item key="hegemonkhan">
          firsttime {
            msg ("\"I will have a sip.\"  HK sips the beer and contorts his face a bit.  \"Not my... cup of tea, Pix, but thanks nonetheless.  The beer refills to exactly one pint.")
          }
          otherwise {
            msg ("\"Tried that.  Not my first choice,\"  HK says.")
          }
        </item>
        <item key="DarkLizerd">
          firsttime {
            msg ("\"Nah.  Colludes my thoughts.  Thanks though.\"")
          }
          otherwise {
            msg ("\"Nah.  Colludes my thoughts.  Thanks though.\"")
          }
        </item>
        <item key="Dark_Lizerd">
          firsttime {
            msg ("\"Nah.  Colludes my thoughts.  Thanks though.\"")
          }
          otherwise {
            msg ("\"Nah.  Colludes my thoughts.  Thanks though.\"")
          }
        </item>
        <item key="GalGadotXM"><![CDATA[
          firsttime {
            msg ("\"Yum.  Don't mind if I do!\"  Gal picks up the beer and crushes the pint before you can blink.  \"Thanks, sweet stuff.\"  <br/><br/>Now <i>there</i> is a guy's Gal.  She kisses your cheek ever so slightly and returns to Xan's bidding.  The pint glass has magically refilled.")
          }
          otherwise {
            msg ("\"Now, Pixie,\" Gal says coyly, \"you wouldn't be trying to take advantage of me would you?  I've had my fill.  Thanks though.\"  She winks and returns to what she was doing before you tried to take advantage off her.")
          }
        ]]></item>
      </giveto>
    </object>
    <exit alias="southeast" to="BeatLabXM">
      <inherit name="southeastdirection" />
    </exit>
    <exit alias="southwest" to="WordDocumentXM">
      <inherit name="southwestdirection" />
      <visible />
    </exit>
    <object name="floorXM1">
      <look>It's an etching in the floor.  A number.  "5"</look>
      <alt type="stringlist">
        <value>number</value>
        <value>writing</value>
      </alt>
      <alias>floor</alias>
      <scenery />
      <read>"5"</read>
    </object>
  </object>
  <verb name="xm_play">
    <property>play</property>
    <pattern>play</pattern>
    <defaultexpression>"You can't play " + object.article + "."</defaultexpression>
  </verb>
  <object name="storageroomXM">
    <object name="flash drive">
      <look>It's a small rectangular flash drive about the size of your pinky.  XM gave this to you.</look>
      <feature_usegive />
      <nocopy />
      <usedefaultprefix />
      <take type="script">
        if (GetBoolean(rectangularslotXM, "drivenXM")) {
          msg ("You remove the flash drive from the slot.")
          SetObjectFlagOff (rectangularslotXM, "drivenXM")
          AddToInventory (flash drive)
        }
        else {
          msg ("Taken.")
          AddToInventory (flash drive)
        }
      </take>
      <use type="script">
        msg ("You use the little flash drive like a bad boy and then... oh wait.  Yeah.  You can't use this by itself.")
      </use>
      <givesingle type="script">
      </givesingle>
      <selfuseon type="scriptdictionary">
        <item key="rectangularslotXM">
          if (GetBoolean(rectangularslotXM, "drivenXM")) {
            msg ("You've already put the flash drive in the USB port, you dolt.  And I thought you knew what you were doing??!")
          }
          else if (GetBoolean(flash drive, "writtentoXM")) {
            msg ("There is no need to re-record a beat.  You've already got one on here!")
          }
          else {
            msg ("You plug the flash drive into the rectangular slot.  It fits nicely.")
            SetObjectFlagOn (rectangularslotXM, "drivenXM")
            MoveObjectHere (flash drive)
          }
        </item>
      </selfuseon>
      <giveto type="scriptdictionary">
        <item key="XanMag"><![CDATA[
          if (GetBoolean(flash drive, "writtentoXM")) {
            msg ("You manage to get Xan's attention and he takes the flash drive from you.  <br/><br/>\"Hm... Let's see what you've come up with, shall we?\"  He plugs the flash drive in the USB port and clicks around a bit on the laptop.  Your music starts playing and Xan gives it a listen.  <br/><br/>\"You know what, Pix?\"  He gives you a concerned look.<br/>")
            play sound ("Drums237-drums only.mp3", false, false)
            wait {
              msg ("<br/>\"This beat is... DOPE!!  As always, thanks again!\"<br/>")
              XanMag.TaskCount = XanMag.TaskCount - 1
              IncreaseScore (10)
              PrintCentered ("<b>[Your score has increased by 10!]</b>")
              list add (game.scoreList, "Hooked XM up with a dope beat: 10 points")
              SetObjectFlagOn (flash drive, "given")
              RemoveObject (bankofdoohickeys)
              RemoveObject (instrumentsXM)
              RemoveObject (chairXM)
              RemoveObject (headphoneXM)
              RemoveObject (flash drive)
              RemoveObject (drumsXM)
              RemoveObject (rectangularslotXM)
              RemoveObject (buttonXM)
            }
          }
          else {
            msg ("You manage to get Xan's attention and he takes the flash drive from you.  <br/><br/>\"Hm... Let's see what you've come up with, shall we?\"  He plugs the flash drive in the USB port and clicks around a bit on the laptop.  \"Hey, Pix!  It doesn't appear there is anything on here.\"<br/><br/>He hands you the flash drive.<br/><br/>\"Get me some beats, man.  Thanks!\"")
          }
        ]]></item>
        <item key="hegemonkhan">
          msg ("HK looks at it.  \"What is this?   I don't need that.  Try someone else.\"  HK returns to his work.")
        </item>
        <item key="Richard Headkid"><![CDATA[
          msg ("\"Mmm... No thanks, Pix.  I've already got so many external storage devices, I don't even know which one is storing what!\"<br/><br/>The Dickhead Kid returns to fiddling around with this and that, never settling on one task for more than a few seconds.<br/><br/><i>Harrumph</i> you think.  <i>He could have at least checked it out...</i>")
        ]]></item>
        <item key="Dark_Lizerd"><![CDATA[
          msg ("\"No thanks.  I don't have much need for that.\"<br/><br/>DL returns with laser-like focus on the task at hand.")
        ]]></item>
        <item key="DarkLizerd"><![CDATA[
          msg ("\"No thanks.  I don't have much need for that.\"<br/><br/>DL returns with laser-like focus on the task at hand.")
        ]]></item>
        <item key="GalGadotXM">
          msg ("\"I'm sure that whatever is on there is awesome, but I don't need that.  Thanks for thinking of me though.\"")
        </item>
        <item key="bartender"><![CDATA[
          msg ("\"I'm sure that whatever is on there is awesome, but I don't need that.  Thanks for thinking of me though.\"  Gal returns to her work behind the bar.  <br/><br/>God... she is HOT.")
        ]]></item>
      </giveto>
    </object>
    <object name="certificateofappreciationXM">
      <inherit name="surface" />
      <take />
      <takemsg>Taken.</takemsg>
      <drop type="boolean">false</drop>
      <dropmsg>No way, Pix!  That would hurt Xan's feelings too much!</dropmsg>
      <alias>Certificate of Appreciation</alias>
      <nocopy />
      <feature_container />
      <look type="script">
        if (GetBoolean(certificateofappreciationXM, "shardremovedXM")) {
          msg ("This is a slightly mangled and torn and partially bejeweled certificate of appreciation presented to you by XanMag.  You could still read it if you wanted.")
        }
        else {
          msg ("This is a bejeweled certificate of appreciation presented to you by XanMag.  There is a large pink crystal shard affixed to its surface.  At least he tried...  You could read it if you wanted.")
        }
      </look>
      <read type="script">
        if (GetBoolean(certificateofappreciationXM, "shardremovedXM")) {
          picture ("Pixie COA without shard.jpg")
        }
        else {
          picture ("Pixie COA with shard.jpg")
        }
      </read>
      <object name="pinkcrystalXM">
        <look>It's a large,  pink crystal that XanMag has affixed to a certificate.  Take it if you wish.</look>
        <alias>pink crystal</alias>
        <scenery type="boolean">false</scenery>
        <drop type="boolean">false</drop>
        <take type="script"><![CDATA[
          msg ("You twists and pull on the crystal and it separates from the paper with a big <i><b>riiiip</b></i>!!!<br/><br/>Upon closer inspection, you recognize this as something more than just a lousy bejewelment.  This is a shard of infinity!!")
          SetObjectFlagOn (certificateofappreciationXM, "shardremovedXM")
          RemoveObject (pinkcrystalXM)
          AddToInventory (pinkshardofinfinityXM)
        ]]></take>
      </object>
    </object>
    <object name="litbluntXM">
      <look>It's a lit blunt with darkened embers around a soft glow at one end.</look>
      <smell>It smells like you'll be writing a new text adventure after you smoke it!  (All the words will just FALL INTO PLACE!)</smell>
      <alias>lit blunt</alias>
      <feature_usegive />
      <alt type="stringlist">
        <value>joint</value>
        <value>cigarette</value>
        <value>fatty</value>
      </alt>
      <smoke type="script"><![CDATA[
        msg ("You take a really long draw from the blunt, hold your breath, inhale again, and let out a fanciful stream of smoke in inexplicably complicated shapes.  <br/><br/>Whatever you focus your attention on now seems to slow and clarify.")
        if (game.pov.parent = Quest Forum) {
          msg ("\"Whoa, Pix,\" Xan says.  You glance over at Xan through pinched eyelids.  \"That's damned impressive.\"  He gives you a thumbs up and returns to work.")
        }
        RemoveObject (litbluntXM)
        SetObjectFlagOn (bluntXM, "smokedXM")
      ]]></smoke>
      <giveto type="scriptdictionary">
        <item key="GalGadotXM">
          msg ("\"No thanks, hot stuff,\" Gal says in a slow drawl.  Apparently, she is still I bit high from her last toke.")
        </item>
        <item key="hegemonkhan">
          msg ("\"I like the smell, but I don't partake,\" Hk says as he politely declines.")
        </item>
        <item key="RH">
          msg ("RH's eyes widen, then he seems to sink a little.  \"KV won't let me.\"")
        </item>
        <item key="bartender">
          msg ("She eyes it with a glimmer of hunger in her eyes, but says, \"Working here!  Maybe later, Pix.\"")
        </item>
        <item key="Richard Headkid">
          msg ("RH's eyes widen, then he seems to sink a little.  \"KV won't let me.\"")
        </item>
        <item key="Dark_Lizerd">
          msg ("\"Ah... The seed of imagination is planted.\"  He takes a tiny puff and hands it back.")
        </item>
        <item key="DarkLizerd">
          msg ("\"Ah... The seed of imagination is planted.\"  He takes a tiny puff and hands it back.")
        </item>
        <item key="posterXM"><![CDATA[
          firsttime {
            msg ("You hold the blunt out toward the poster.  Ralph blinks and jumps from the poster.  He snatches the blunt, takes the biggest hit you've ever seen, and disappears into the poster.  Moments later he pops back into view and freezes once again in place.<br/><br/>Whoa.<br/><br/>Does he have <b>more</b> feathers stuck to his beak?")
          }
          otherwise {
            msg ("Already done that.  Ralph has been appeased in more ways than one.")
          }
        ]]></item>
      </giveto>
    </object>
    <object name="IdeaInAnEnvelopeXM">
      <inherit name="openable" />
      <alias>idea in an envelope</alias>
      <look>It's an envelope that contains a written edit of XanMag's work-in-progress novel.</look>
      <feature_container />
      <open />
      <close />
      <read>You've already expressed your opinions in this letter.  There is no need to rehash them.</read>
      <feature_usegive />
      <scenery />
      <take type="script">
        if (Contains (pedestalXM,IdeaInAnEnvelopeXM)) {
          msg ("There is no need to take the idea in the envelope off of the pedestal.  It is where it belongs.  Now what?")
        }
        else {
          msg ("You pick up the envelope stuffed with your idea about Xan's writing.")
          AddToInventory (IdeaInAnEnvelopeXM)
        }
      </take>
      <openscript type="script">
        msg ("You have already written and sealed your brilliant ideas within the envelope.  No reason to open it.")
      </openscript>
      <closescript type="script">
        msg ("It's already closed, dipshit.")
      </closescript>
      <giveto type="scriptdictionary">
        <item key="XanMag"><![CDATA[
          msg ("You hand the envelope over to XanMag.  He looks at it and peeks inside.<br/><br/>\"I do NOT need help with this, Pixie.  I need to come up with these ideas on my OWN or my efforts will all be for naught.\"<br/><br/>He shoves the envelope back in your hand.  Evidently this is not something that he does not want 'help' with.")
        ]]></item>
        <item key="hegemonkhan">
          msg ("HK looks at the envelope and says, \"That is not for me, Pixie.\"")
        </item>
        <item key="RH">
          msg ("\"Um... I don't need that, Pix.  Try Xan?\"")
        </item>
        <item key="Dark_Lizerd">
          msg ("DL looks at you with a perplexed look on his face but he grabs the envelope and gives it a quick read.  \"Interesting,\" he responds, \"and some pretty good advice, but this isn't mine.  I think this should go to Xan.\"  He hands the envelope back to you.")
        </item>
        <item key="DarkLizerd">
          msg ("DL looks at you with a perplexed look on his face but he grabs the envelope and gives it a quick read.  \"Interesting,\" he responds, \"and some pretty good advice, but this isn't mine.  I think this should go to Xan.\"  He hands the envelope back to you.")
        </item>
        <item key="GalGadotXM">
          msg ("\"I definitely do not need that, Pixie. My envelope is already full if you know what I mean.\"  Gal laughs at her own joke.  \"You should probably give that to Xan.")
        </item>
        <item key="bartender">
          msg ("Gal appears too busy to take the envelope from you.  Perhaps she doesn't need it?")
        </item>
        <item key="KV"><![CDATA[
          msg ("\"Yeah, I don't really need that, Pix,\" says KV, not taking it.  \"Try Xan.\"<br/>")
        ]]></item>
      </giveto>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
    </object>
    <object name="pinkshardofinfinityXM">
      <alias>pink shard of infinity</alias>
      <take />
      <takemsg>You are already carrying it!</takemsg>
      <drop type="boolean">false</drop>
      <dropmsg>Better not.  This seems pretty valuable.</dropmsg>
      <look type="script">
        firsttime {
          msg ("It's quite the bejewelment.  It has been removed from that cheesy Certificate of Appreciation XanMag gave you.  That paper is bascially worthless but this shard emits an aura of mysterious and great power.  At least that is the impression you get when holding it in your inventory.")
        }
        otherwise {
          msg ("Pink shard of infinity... emits a feeling of great power.")
        }
      </look>
    </object>
  </object>
  <verb name="kv_givetoRH">
    <property>givetorh</property>
    <pattern>give to rh</pattern>
    <defaultexpression>"You can't give " + object.article + "  to RH."</defaultexpression>
  </verb>
  <verb name="kv_bookmark">
    <property>bookmark</property>
    <pattern>bookmark</pattern>
    <defaultexpression>"You can't bookmark " + object.article + "."</defaultexpression>
  </verb>
  <verb name="kv_experience">
    <property>experience</property>
    <pattern>experience</pattern>
    <defaultexpression>"You can't experience " + object.article + "."</defaultexpression>
  </verb>
  <verb name="kv_check">
    <property>check</property>
    <pattern>check</pattern>
    <defaultexpression>"You can't check " + object.article + "."</defaultexpression>
  </verb>
  <verb name="kv_flip">
    <pattern>flip #object#</pattern>
    <defaulttext>You can't flip it.</defaulttext>
  </verb>
  <verb name="kv_consult">
    <property>consult</property>
    <pattern>consult</pattern>
    <defaultexpression>"You can't consult " + object.article + "."</defaultexpression>
  </verb>
  <turnscript name="kv_turn_count">
    <enabled />
    <script>
      if (not game.suppressturnscripts) {
        IncreaseObjectCounter (game, "turns")
      }
    </script>
  </turnscript>
  <command name="panes">
    <pattern>panes</pattern>
    <script>
      firsttime {
        game.showpanes = true
      }
      if (GetBoolean(game, "showpanes")) {
        game.showpanes = false
      }
      else {
        game.showpanes = true
      }
      game.suppressturnscripts = true
      hidemsg = "Panes disabled."
      showmsg = "Panes enabled."
      JS.eval ("if (isElementVisible('#gamePanes')){ uiHide('#gamePanes'); addTextAndScroll('"+ hidemsg + "') }else{uiShow('#gamePanes'); addTextAndScroll('"+ showmsg + "');}")
    </script>
  </command>
  <turnscript name="checkQuests_kv">
    <enabled type="boolean">false</enabled>
    <script>
      AreAllQuestsCompleted
    </script>
  </turnscript>
  <command name="kv_checkOpenQuests">
    <pattern>quest;quests;open quests;check quests;check open quests;q;cq;check quest</pattern>
    <script><![CDATA[
      // DisplayList (player.activeQuestList, false)
      // msg ("")
      d = player.activeQuestList
      hasQuests = false
      foreach (key, d) {
        if (not  DictionaryItem(d, key) = null) {
          hasQuests = true
        }
      }
      msg ("<br/><b>Active Quests:</b>")
      if (hasQuests) {
        foreach (key, d) {
          if (not  DictionaryItem(d, key) = null) {
            msg ("Quest: " + DictionaryItem(d, key))
          }
        }
      }
      else {
        msg ("You have no active Quests at the moment.<br/>")
      }
      if (HasAttribute(player, "failedQuests")) {
        msg ("Failed Quest(s):")
        DisplayList (player.failedQuests, false)
        msg ("")
      }
      if (ListCount(player.completedQuests) > 1) {
        foreach (cmp, player.completedQuests) {
          msg (cmp)
        }
      }
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="kv_score">
    <pattern>score;check score;request score</pattern>
    <script><![CDATA[
      msg ("")
      msg ("Your score: " + game.score + "{random:/69105?: out of about 42: out of an estimated 37: out of around 69:/???:/&infin;:/{color:red:game.maxscore}}")
      msg ("")
      msg ("True Maximum Score: [ <span style=\"color:white\">" + game.maxScore + " </span>]")
      game.suppressturnscripts = true
      DisplayList (game.scoreList, true)
    ]]></script>
  </command>
  <command name="kv_diagnose">
    <pattern>diagnose</pattern>
    <script>
      msg ("")
      msg ("Your health: " + player.health + "%")
      msg ("")
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="kv_credits">
    <pattern>credits</pattern>
    <script><![CDATA[
      msg ("<center><h2>Written, Edited, Recorded, Coded, Produced, and Directed by:</h2><b>THE QUEST FORUM:</b><br/>DarkLizerd<br/>XanMag<br/>K.V.<br/><br/><h3>Beta-tested by:<br/>Pertex</h3><br/><br/><h2>Starring:</h2><h1 style=\"font-size:400%\">The Pixie</h1><br/><br/><h3>...and The Quest Forum<h3></center><br/>")
      DisplayHttpLink ("View the complete credit roll at textadventures.co.uk", "https://media.textadventures.co.uk/games/cNFLuCu1cUqmUv0I9_KEIQ/index.html", false)
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="kv_seeHintsCommand">
    <pattern type="string"><![CDATA[(^(hint|hints|advice|advise|help|info|information)\s*(about|regarding|on|)(?<=\S)\s+(?<object>.*)\s*$|^(about|(tell me about)|concerning) (?<object>.*))]]></pattern>
    <script>
      HideOutputSection (game.menuoutputsection)
      showHint (object)
    </script>
  </command>
  <command name="kv_hints">
    <pattern>hint;hints</pattern>
    <unresolved type="string"></unresolved>
    <script><![CDATA[
      HideOutputSection (game.menuoutputsection)
      hasHints = NewObjectList()
      hintable = false
      foreach (obj, ScopeReachable()) {
        if (HasAttribute(obj, "hintlist")) {
          list add (hasHints, obj)
          hintable = true
        }
      }
      if (hintable) {
        ShowMenu ("What would you like a hint about?", hasHints, true) {
          result = (GetObject(result))
          msg ("Displaying hints for: " + GetDisplayName(result) + "<br/>")
          HandleSingleCommand ("hint " + result.alias + "")
        }
      }
      else {
        msg ("Sorry. Nothing within reach has any hints set up.")
      }
      // msg ("Really, Pixie? You're asking for a hint???<br/><br/>Try entering DIR to get a list of files, then <code>CAT filename</code> to view a file.<br/>")
    ]]></script>
  </command>
  <object name="kv_maxScoreObject">
    <maxScore type="int">105</maxScore>
  </object>
  <verb name="dl_creature">
    <property>creature</property>
    <pattern>creature</pattern>
    <defaultexpression>"You can't creature " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_story">
    <property>story</property>
    <pattern>story</pattern>
    <defaultexpression>"You can't story " + object.article + "."</defaultexpression>
  </verb>
  <verb name="xm_light">
    <property>light</property>
    <pattern>light;ignite</pattern>
    <defaultexpression>"You can't light;ignite " + object.article + "."</defaultexpression>
  </verb>
  <verb name="xm_smoke">
    <property>smoke</property>
    <pattern>smoke;chief;toke;toke up</pattern>
    <defaultexpression>"You can't smoke;chief;toke;toke up " + object.article + "."</defaultexpression>
  </verb>
  <object name="KV_worlds">
    <object name="kv_Darkness">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <dark />
      <darkroomdescription>You can't see anything, smell anything, hear anything, or taste anything.</darkroomdescription>
      <alias>Darkness</alias>
      <beforeenter type="script">
        JS.uiShow ("#commandPane")
        JS.setCommands ("Feel around")
      </beforeenter>
      <object name="kv_lamp">
        <inherit name="switchable" />
        <inherit name="kvtype" />
        <feature_switchable />
        <take />
        <feature_usegive />
        <alias>lamp</alias>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Switch on</value>
          <value>Switch off</value>
        </inventoryverbs>
        <drop type="boolean">false</drop>
        <dropmsg>You decide to hold on to the lamp.</dropmsg>
        <attr name="feature_lightdark" type="boolean">false</attr>
        <hintlist type="stringlist">
          <value>Hint:  USE THE LAMP.</value>
        </hintlist>
        <onswitchon type="script"><![CDATA[
          SetObjectLightstrength (kv_lamp, "strong")
          if (game.pov.parent.dark) {
            if (game.pov.parent=kv_Darkness) {
              msg ("A soft glow emanates from the lamp, then slowly grows brighter, revealing your surroundings.  As you glance to and fro in an attempt to acclimate, the lamp begins to hum.<br/><br/>The humming is driving you insane! Growing louder and louder by the second, until, finally...")
              msg ("<img src=\"" + GetFileURL("internalError.png")  + "\" />")
              msg ("<br/><br/>Your surroundings, however, remain <code style=\"color:red\">not game.pov.parent.dark</code><br/><br/>'Huh,' you think to yourself (as if you'd think anything to anyone else), 'I hope I wasn't going to need <i>that</i> for anything else!'<br/><br/>")
              MoveObject (player, kv_Swedenborgian Space)
              RemoveObject (kv_lamp)
            }
            else {
              HandleSingleCommand ("look")
            }
          }
        ]]></onswitchon>
        <onswitchoff type="script">
          SetObjectLightstrength (lamp, "")
        </onswitchoff>
        <use type="script">
          do (this, "onswitchon")
        </use>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Switch on</value>
          <value>Switch off</value>
        </displayverbs>
      </object>
      <command name="kv_feel">
        <pattern>feel;feel around;feel about;search</pattern>
        <script><![CDATA[
          if (not kv_lamp.hasbeenmoved) {
            msg ("You feel around in the dark.<br/><br/>After a moment or two, just after abandoning any hopes of finding anything, something far off in the distance catches your eye.<br/><br/>It looks like a faraway flicker of light... <br/><br/>You strain to get a better look, but it is what it is: a faraway flicker.<br/><br/>Just as you begin to contemplate entering UNDO, you notice that the light is slowly growing nearer.<br/><br/>After just a few moments, a man with a lamp appears.<br/><br/>\"You've proven your worth just by making it this far,\" he says, and, now that he's close enough, you can see that it's none other than Alex Warren!<br><br> \"Don't let this darkness slow you down,\" says Alex.<br/><br/>He flashes a grin and passes you the {object:kv_lamp:lamp}.  \"You may as well take this,\" he says. \"It's a little buggy, and it switches itself off at random sometimes, but, besides that, it's a good lamp.\"<br/><br/>You take the {object:kv_lamp:lamp}, giving Alex a slight nod, and, with that, he says, \"cheers!\" and moves on to other things.<br/><br/>You wish Alex the best (as do we all), then you get back to the task at hand. Now that you have a light source (which, of course, just switched itself off), you're bound to {command:use lamp:use} it!")
            MoveObject (kv_lamp, player)
            JS.setCommands (game.defcmds)
            JS.uiHide ("#commandPane")
          }
          else {
            msg ("You feel around again for some reason.<br/><br/>Time passes...<br/>")
          }
        ]]></script>
      </command>
      <command name="kv_darkness_hints">
        <pattern>hint;help;hints;wtf;wth;damn;what the hell</pattern>
        <script><![CDATA[
          ShowMenu ("What am I supposed to do in the dark?", Split ("Hint 1", ";"), true) {
            msg ("HINT 1<br/>How many senses do you have?<br/><br/>")
            ShowMenu ("", Split ("HINT 2", ";"), false) {
              msg ("HINT 2 <br/>How many senses are referenced in the room description?")
              ShowMenu ("", Split ("HINT 3", ";"), false) {
                msg ("HINT 3<br/>This is directly from the Hitchhiker's Guide to the Galaxy.<br/>You ever played that?<br/><br/>")
                ShowMenu ("", Split ("HINT4", ";"), false) {
                  msg ("HINT 4 <br/>Enter: FEEL<br/><br/>")
                }
              }
            }
          }
        ]]></script>
      </command>
    </object>
    <object name="kv_Swedenborgian Space">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <dark type="boolean">false</dark>
      <alias>The Imaginarium</alias>
      <darkroomdescription type="script">
        msg ("You can't see anything, smell anything, hear anything, or taste anything.")
      </darkroomdescription>
      <enter type="script"><![CDATA[
        msg ("<br/>RH is standing here, looking slightly confused.<br/><br/>\"Hi, Pix,\" he says, his eyes on his feet. \"My hidden item is in the hub. And so is the disk. I put it in the pouch, and everything that goes into <i>that</i> thing goes directly to the hub for some reason.\"<br/>")
        if (kv_rabbit.parent = game.pov.parent) {
          msg ("A {object:kv_rabbit:rabbit} sits just a few feet away from you, watching your every move.<br/>")
        }
      ]]></enter>
      <object name="kv_pouch">
        <inherit name="container_open" />
        <inherit name="kvtype" />
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <hidechildren type="boolean">false</hidechildren>
        <listchildren type="boolean">false</listchildren>
        <take />
        <alias>Strange Pouch</alias>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
        </inventoryverbs>
        <attr name="feature_startscript" type="boolean">false</attr>
        <hintlist type="stringlist">
          <value>Hint 1:  Try entering:  SEARCH POUCH</value>
        </hintlist>
        <addscript type="script">
          msg ("You put " + GetDisplayName(object) + " into the pouch, and it disappears!")
          MoveObject (object, Quest Forum)
        </addscript>
        <search type="script"><![CDATA[
          if (Got(kv_pouch)) {
            if (not game.pov.parent = Quest Forum) {
              msg ("You reach into the pouch and find yourself in:")
              MoveObject (player, Quest Forum)
            }
            else {
              msg ("You reach into the pouch and find yourself in:")
              HandleSingleCommand ("look")
            }
            firsttime {
              QuestComplete (KV, "searchPouch")
              IncreaseScore (10)
              list add (game.scoreList, "Searched the strange pouch: 10 points")
              msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 10  ]</b></center>")
            }
          }
          else {
            msg ("You'll need to pick it up first.")
          }
        ]]></search>
        <ontake type="script">
          firsttime {
            AddQuest (KV, "searchPouch", "Search the Strange Pouch.")
          }
        </ontake>
      </object>
      <object name="kv_glitch">
        <inherit name="kvtype" />
        <drop type="boolean">false</drop>
        <dropmsg>You try to drop the glitch, but it just messes everything up.</dropmsg>
        <alias>glitch</alias>
        <listalias><![CDATA[<span style="color:green">g</span><span style="color:blue">l</span><span style="color:red">i</span>t<span style="color:yellow">c</span><span style="color:purple">h</span>]]></listalias>
        <hintlist type="stringlist">
          <value>Hint 1:  Whatever you do, DON'T try to take the glitch!!! (If you do, you better clear the screen and learn a little JS!!!)</value>
        </hintlist>
        <take type="script"><![CDATA[
          if (not EndsWith(player.currentcommand, "all")) {
            request (Show, "Location")
            msg ("You reach for the glitch, but it knocks the status bar down and disappears!<br/>")
            statusmove
            RemoveObject (kv_glitch)
            IncreaseScore (10)
            msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 10  ]</br></center>")
            list add (game.scoreList, "Tried to take the glitch: 10 points")
            game.took_glitch = true
          }
          else {
            msg ("You try to pick it up, but you lack focus.")
          }
        ]]></take>
        <look type="script">
          do (kv_glitch, "glitching")
          SetTurnTimeout (2) {
            SetBackgroundImage ("none")
            SetBackgroundOpacity (1.0)
            SetBackgroundColour ("White")
          }
        </look>
        <glitching type="script">
          game.glitching = true
          SetBackgroundImage ("script.png")
          SetBackgroundOpacity (0.7)
          SetBackgroundColour (game.defaultbackground)
        </glitching>
        <enterverb type="script">
          // ClearScreen
          foreach (o, GetDirectChildren(kv_glitch)) {
            MoveObject (o, kv_Crate Mart)
            kv_glitch.parent = kv_Crate Mart
          }
        </enterverb>
        <hints type="scriptdictionary">
          <item key="showhints">
            ShowMenu ("What do I do with the glitch?", kv_glitch.hinttopics, true) {
              invoke (ScriptDictionaryItem(kv_glitch.hinttopics, result))
            }
          </item>
        </hints>
        <hinttopics type="scriptdictionary">
          <item key="Hint 1"><![CDATA[
            msg ("Hint 1:<br/>Have you tried examining it?")
          ]]></item>
          <item key="Hint 2"><![CDATA[
            msg ("Hint 2:<br/>Have you tried taking it?")
          ]]></item>
        </hinttopics>
      </object>
      <object name="RH">
        <inherit name="namedmale" />
        <inherit name="kvtype" />
        <alias>Richard Headkid</alias>
        <inroomdescription type="string"></inroomdescription>
        <takemsg><![CDATA[RH knocks your hands away.<br />"I will not be pawed at, thank you," he grumbles.]]></takemsg>
        <speak><![CDATA["I'm sorry I ran off with the planet disk," says RH. "I put it in that pouch. It sends everything to the hub."<br/>]]></speak>
        <not_all />
        <hintlist type="stringlist">
          <value>Hint 1:  RH is just a bad pseudonym.  I made him run off with the planet disk.  It's not his fault.</value>
          <value>Hint 2:  If you're stuck here, you may want to investigate that Strange Pouch...</value>
        </hintlist>
        <alt type="stringlist">
          <value>rh</value>
        </alt>
        <look type="script"><![CDATA[
          msg ("Richard Headkid stand 5' 10\" tall, and he probably weighs around a buck-fifty.<br/><br/>Something is definitely off about him, though...<br/>")
          DisplayHttpLink ("Visit Richard Headkid's profile page.", "https://textadventures.co.uk/user/view/gudejtsx9komagj-tffyfg/richard-headkid", false)
        ]]></look>
        <askdefault type="script">
          msg ("RH just shrugs.")
        </askdefault>
        <telldefault type="script">
          msg ("RH nods approvingly, but his thoughts seem to be elsewhere.")
        </telldefault>
        <telltodefault type="script">
          msg ("\"Nah, you can handle things yourself,\" says RH.")
        </telltodefault>
        <ask type="scriptdictionary">
          <item key="group project"><![CDATA[
            msg ("You ask RH about the project.<br/><br/>\"You're in it,\" says RH. \"Or do you mean the secret one?\"")
          ]]></item>
          <item key="secret project"><![CDATA[
            msg ("You ask RH about the secret project.<br/><br/>\"Well, we kinda thought maybe you deserved a little something for all the effort,\" shrugs RH. \"So, welcome to the zarkin' show!\"<br/>")
          ]]></item>
          <item key="clone dl darklizerd clones"><![CDATA[
            msg ("You ask RH about DL.<br/><br/>\"That damn DL!\" RH exclaims. \"He's a REAL CHARACTER, isn't he?\"<br/>")
          ]]></item>
          <item key="the game"><![CDATA[
            msg ("You ask RH about the game.<br/><br/>\"It's turning out better than I imagined,\" says RH. \"I hope you like it!<br/>\"...and I'm sorry I ran off with the disk,\" he continues. \"Ever since that boring old KV took back over, I've just been bored. What can I say?\"<br/>")
          ]]></item>
          <item key="disk"><![CDATA[
            msg ("You ask RH about the planet disk.<br/><br/>\"Oh, yeah,\" mumbles RH. \"I put it in the pouch. Everything you put into that goes directly to the hub.\"<br/><br/>He gives you an odd look, then asks, \"haven't you checked out the hints?\"<br/>")
          ]]></item>
          <item key="XanMag XM Xan"><![CDATA[
            msg ("You ask RH about XM.<br/>")
            if (XanMag.TaskCount = 3) {
              msg ("\"You need to record a dope beat for XM,\" says RH.")
            }
            else if (XanMag.TaskCount = 2) {
              msg ("\"You need to get that guy a beer,\" says RH.")
            }
            else if (XanMag.TaskCount = 1) {
              msg ("\"You'll have to come up with an idea on your own, Pix,\" says RH.")
            }
            else if (XanMag.TaskCount = 0) {
              msg ("\"Did you enjoy all his bits?\" asks RH.  Then, \"that was rhetorical.  Don't really answer.\"")
            }
          ]]></item>
          <item key="rabbit"><![CDATA[
            if (kv_rabbit.parent = game.pov.parent) {
              msg ("You ask RH about the rabbit.<br/><br/>RH turns to see what rabbit you're talking about, seems to lose every bit of his temper, begins screaming random profanities, and makes a beeline directly towards towards the rabbit.<br/><br/>The rabbit springs up, does a back flip, and kicks RH right in the balls, causing him to fall to the ground, whining like a little girl with a skinned knee. <br/><br/>Glancing back at the rabbit, you watch as it flattens its ears back along its body, stretches out like a diver, and disappears into a hole. <br/><br/>You rush over to the hole, only to see the last of it shrink down to a dot, then disappear with a soft <i>\"floop\"</i>.<br/><br/>A sound to your right distracts you and you watch as RH stands up, mumbling profanities.<br/><br/>The only thing you understand is at the end of his Yosemite Sam-like rant, when he looks you right in the eyes and says, \"ooh, I hates that zarkin' rabbit!<br/><br/>He then seems to notice that he's completely lost his mind in front of company, and says, \"sorry about that, Pix. Rabbits piss me off!<br/>\"...and I hates meeses to pieces, too!\"<br/>")
              RemoveObject (kv_rabbit)
            }
            else {
              msg ("You ask RH about the rabbit.<br/><br/>\"I hates rabbits,\" grumbles RH.<br/>")
            }
          ]]></item>
        </ask>
      </object>
      <object name="The God Device">
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <displayverbs type="stringlist">
          <value>Take</value>
        </displayverbs>
        <take />
        <feature_usegive />
        <look><![CDATA[Click here to examine The God Device:<br/><a href="https://textadventures.co.uk/games/view/v1ojyf53o02l_tnjm1kwoq/the-god-device">https://textadventures.co.uk/games/view/v1ojyf53o02l_tnjm1kwoq/the-god-device</a>]]></look>
        <hintlist type="stringlist">
          <value>Hint 1:  Have YOU experienced The God Device?</value>
        </hintlist>
        <alias>The God Device</alias>
        <ontake type="script"><![CDATA[
          myscript => {
            do (The God Device, "use")
          }
          The God Device.experience = myscript
          if (not ListContains(The God Device.generatedverbslist, "Experience")) {
            list add (The God Device.generatedverbslist, "Experience")
          }
        ]]></ontake>
        <use type="script">
          msg ("Opening The God Device in browser...")
          JS.goUrl ("https://media.textadventures.co.uk/games/V1ojyf53O02L_tnJm1KWoQ/god_device.html")
        </use>
      </object>
      <command name="glitchHelp">
        <pattern>hint;hints;wtf;wth</pattern>
        <script><![CDATA[
          if (not kv_glitch.parent = game.pov.parent) {
            msg ("Click on the QUEST PX in the Inventory Pane, then select USE.  The first alert will tell you how to fix the 'glitch'.  (Copy and paste it.) <br/><br/>You can also clear the screen (enter CLEAR).<br/>THIS MESSAGE WILL SELF-DESTRUCT.<br/>")
            glitchHelp.parent = kv_CommandRoom
          }
          else {
            glitchHelp.parent = kv_CommandRoom
            invoke (hint.script)
            glitchHelp.parent = kv_Swedenborgian Space
          }
          game.suppressturnscripts = true
        ]]></script>
      </command>
      <object name="kv_rabbit">
        <scenery />
        <alias>rabbit</alias>
        <drop type="boolean">false</drop>
        <look type="script"><![CDATA[
          msg ("Before you can get a good look at it, RH turns to see what you're looking at, seems to lose every bit of his temper, begins screaming random profanities, and makes a beeline directly towards towards the rabbit.<br/><br/>The rabbit springs up, does a back flip, and kicks RH right in the balls, causing him to fall to the ground. <br/><br/>Glancing back at the rabbit, you watch as it flattens its ears back along its body, stretches out like a diver, and disappears into a hole. <br/><br/>You rush over to the hole, only to see the last of it shrink down to a dot, then disappear with a soft <i>\"floop\"</i>.<br/><br/>A sound to your right distracts you and you watch as RH stands up, mumbling profanities.<br/><br/>The only thing you understand is at the end of his Yosemite Sam-like rant, when he looks you right in the eyes and says, \"ooh, I hates that zarkin' rabbit!<br/><br/>He then seems to notice that he's completely lost his mind in front of company, and says, \"sorry about that, Pix. Rabbits piss me off!<br/>\"...and I hates meeses to pieces, too!\"")
          RemoveObject (kv_rabbit)
        ]]></look>
        <take type="script"><![CDATA[
          msg ("Before you can get within reach of it, RH turns to see what you're doing, seems to lose every bit of his temper, begins screaming random profanities, and makes a beeline directly towards towards the rabbit.<br/><br/>The rabbit springs up, does a back flip, and kicks RH right in the balls, causing him to fall to the ground. <br/><br/>Glancing back at the rabbit, you watch as it flattens its ears back along its body, stretches out like a diver, and disappears into a hole. <br/><br/>You rush over to the hole, only to see the last of it shrink down to a dot, then disappear with a soft <i>\"floop\"</i>.<br/><br/>A sound to your right distracts you and you watch as RH stands up, mumbling profanities.<br/><br/>The only thing you understand is at the end of his Yosemite Sam-like rant, when he looks you right in the eyes and says, \"ooh, I hates that zarkin' rabbit!<br/><br/>He then seems to notice that he's completely lost his mind in front of company, and says, \"sorry about that, Pix. Rabbits piss me off!<br/>\"...and I hates meeses to pieces, too!\"")
          RemoveObject (kv_rabbit)
        ]]></take>
      </object>
    </object>
    <object name="kv_sky">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <prefix>the</prefix>
      <alias>sky</alias>
      <beforefirstenter type="script">
      </beforefirstenter>
      <firstenter type="script"><![CDATA[
        msg ("As the ostrapode glides effortlessly through the air, you look to the {command:go east:east} and spot Richard Headkid riding a flying carpet just before he disappears from view.")
        SetTurnTimeoutID (2, "falling") {
          msg ("<br/>Suddenly, she seems to realize that she's defying the laws of gravity, and the ostrapode panics and begins to fling herself around, causing you to lose your grip from around her neck.<br/><br/>As you plummet towards impending doom, you wonder: 'Why, exactly, are these guys working on this shit instead of the REAL group project?'<br/><br/>Just then, reality flickers around you again.<br/><br/>You are still barrelling down through the sky, but you notice that you are no longer accompanied by the ostrapode. You swing your arms and legs in unison to spin yourself around, and you see a Land Rover just above you.<br/>You immediately wish you'd just stayed back in the hub and never gave The Dickhead Kid that damned disk in the first place.<br/><br/>Just as you realize how much of a waste <b><i>that</i></b> particular wish was, you decide it best to wish for one more thing, but the point quickly becomes moot as you and the Land Rover smash into a rocky promontory.<br/>")
          MoveObject (player, kv_Darkness)
        }
      ]]></firstenter>
      <command name="kv_fakeEastCommand">
        <pattern>go east;e;east</pattern>
        <script><![CDATA[
          msg ("You attempt to nudge the ostrapode towards the east.<br/>")
        ]]></script>
      </command>
      <object name="sky">
        <scenery />
        <look>You're in it!</look>
        <takemsg>Impossible.</takemsg>
        <not_all />
      </object>
    </object>
    <object name="kv_meadow">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <description>This is a peaceful place, covered in lush, green grass.</description>
      <alias>Meadow</alias>
      <beforefirstenter type="script">
      </beforefirstenter>
      <firstenter type="script">
        list remove (ostrapode.generatedverbslist, "Ride")
      </firstenter>
      <object name="ostrapode">
        <inherit name="female" />
        <inherit name="kvtype" />
        <usedefaultprefix />
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <alias>strange-looking bird</alias>
        <alt type="stringlist">
          <value>strange-looking bird</value>
        </alt>
        <listalias>strange-looking bird</listalias>
        <not_all />
        <hintlist type="stringlist">
          <value>Hint 1:  Have you examined the animal?</value>
          <value>Hint 2:  Have you tried to ride her?</value>
        </hintlist>
        <takemsg>She wouldn't like that.</takemsg>
        <look type="script"><![CDATA[
          if (not GetBoolean(ostrapode, "examined")) {
            msg ("It looks like a mix between an ostrich and a pterodactyl.<br/><br/>The animal sees you looking and kneels down so you can ride her.<br/>")
            if (not ListContains(ostrapode.generatedverbslist, "Ride")) {
              list add (ostrapode.generatedverbslist, "Ride")
            }
          }
          else {
            msg ("The bird sees you looking at her and kneels down so you can ride her.")
          }
        ]]></look>
        <ride type="script"><![CDATA[
          msg ("As soon as you mount the ostrapode, she takes off like a bat out of hell!<br/><br/>You wrap your arms around her neck and hold on for dear life as she darts up a nearby hill.<br/><br/>Just before you reach the top, her pace slows a little, and you start to relax a little. Then, the ostrapode does something that takes you completely off guard:<br/>She leaps up into the air!")
          MoveObject (player, kv_sky)
          MoveObjectHere (ostrapode)
          list remove (ostrapode.generatedverbslist, "Ride")
          myscript => {
            msg ("You are riding her!")
          }
          ostrapode.ride = myscript
          // ostrapode.scenery = true
          ostrapode.look = "You look down at the ostrapode and see the ground below you. You immediately look back up. (WAY up!)"
          ostrapode.description = "You look down at the ostrapode and see the ground below you. You immediately look back up. (WAY up!)"
        ]]></ride>
      </object>
      <object name="kv_grass">
        <inherit name="kvtype" />
        <scenery />
        <look>It's the thickest, greenest grass you've ever seen!</look>
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <alias>green grass</alias>
        <not_all />
        <hintlist type="stringlist">
          <value>Hint 1:  You can't burn it.</value>
          <value>Hint 2:  You can't take it.</value>
          <value>Hint 3:  Have you tried eating it?</value>
          <value>Hint 4:  You can't eat it.</value>
          <value>Hint 5:  It's only here for those who might try to interact with everything in the room's description.</value>
          <value>Hint 6:  Are you seriously still reading these hints about a backdrop?</value>
          <value>Hint 7:  This space intentionally left blank.</value>
          <value>Hint 8:  Enough!  It's just scenery!  Please move along!</value>
        </hintlist>
        <takemsg>You can "take the grass" in XanMag's part of the game.</takemsg>
      </object>
    </object>
    <object name="KVs room">
      <attr name="feature_startscript" type="boolean">false</attr>
      <gateway />
      <alias>The Land of Confusion</alias>
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <description>This is a small room, consisting of nothing more than a desk.</description>
      <attr name="_initialise_" type="script">
        AddToHubGateway (this)
      </attr>
      <beforefirstenter type="script">
      </beforefirstenter>
      <onexit type="script">
        if (disk.parent = Richard Headkid) {
          MoveObject (disk, Quest Forum)
        }
      </onexit>
      <beforeenter type="script">
        QuestComplete (KV, "KVs_World")
        Log ("KV's world removed from quests")
      </beforeenter>
      <object name="KV">
        <inherit name="namedmale" />
        <inherit name="kvtype" />
        <topics type="stringlist">
          <value>RH</value>
          <value>the game</value>
          <value>the phone-booth</value>
          <value>the planet disk</value>
          <value>the forum posts</value>
          <value>JavaScript</value>
          <value>cloning</value>
          <value>XanMag</value>
          <value>DarkLizerd</value>
        </topics>
        <takemsg>{once:"I'm about to be taken!" KV exclaims. "Somebody call Liam Neeson!"}{notfirst:{once:Yeah... That was only fun the first time.}{notfirst:You can't do that shit, and you know it!}}</takemsg>
        <not_all />
        <nocopy type="string"></nocopy>
        <feature_startscript />
        <hintlist type="stringlist">
          <value>Hint:  Speak to him (or just ASK KV ABOUT something).</value>
        </hintlist>
        <kill>"I can see what you're typing, you know," says KV.{notfirst:  "I've already told you that."}</kill>
        <hitCount type="int">0</hitCount>
        <listen>{once:You listen to KV for a while, and you eventually decide that he is completely full of shit.}{notfirst:You don't have the energy to listen to him again.</listen>
        <unlock>{once:You unlock KV's true potential.}{notfirst:You have already unlocked KV's true potential.{once:  (It doesn't seem to have helped much.)}}</unlock>
        <usestandardverblist />
        <look type="script"><![CDATA[
          msg ("K.V. waves at you.<br/><br/>")
          if (disk.parent = Richard Headkid) {
            msg ("\"Hi, Pixie!<br/> \"I think I just saw the textual representation of my imaginary self run through here!<br/> \"I hope not, because that guy is TROUBLE!\"<br/>")
          }
          DisplayHttpLink ("Visit KV's profile page.", "https://textadventures.co.uk/user/view/3fbmqo02fkkr-emkcwxdma/k-v", false)
        ]]></look>
        <speak type="script"><![CDATA[
          if (disk.parent = Richard Headkid) {
            msg ("{once:\"I think I just saw my <i>Nomme de Guerre</i> head {command:north:north} from here,\" says KV. \"The bastard's probably up to no good...\"<br/>}{notfirst:\"Try asking me stuff,\" says KV.  \"I'm set up with a menu of choices to pick from.\"<br/>}")
          }
          else {
            msg ("{once:\"Greetings, Pixie!\" KV delivers a warm smile and a firm handshake.<br/>}{notfirst:\"Try asking me stuff,\" says KV.  \"I'm set up with a menu of choices to pick from.\"<br/>}")
          }
          ShowMenu ("\"What would you like to ask me about?\"<br/>", KV.topics, true) {
            DoAskTell (KV, result, "ask", "askdefault", "DefaultAsk")
          }
        ]]></speak>
        <askdefault type="script"><![CDATA[
          msg ("You ask KV about " + text + ".<br/><br/>\"How could ask about an unknown topic with a menu list, Pixie?\"<br/><br/>K.V. looks you up and down. \"You been drinking XanMag's beer?\"<br/>")
        ]]></askdefault>
        <telldefault type="script"><![CDATA[
          msg ("\"That's nice, Pix,\" says KV.  (You wonder if he even heard you.)<br/>")
        ]]></telldefault>
        <telltodefault type="script"><![CDATA[
          msg ("\"" + CapFirst(text) + "?\" K.V. looks slightly offended. \"I don't know how to do <b><i>that</i></b> !  Looks like it's all up to you!<br/><br/>\"You can do it, Pix!\"<br/>")
        ]]></telltodefault>
        <hit type="script"><![CDATA[
          if (KV.hitCount<9) {
            KV.hitCount = KV.hitCount + 1
          }
          else {
            KV.hitCount = 9
            msg ("\"You can't do that anymore,\" says KV.")
          }
        ]]></hit>
        <changedhitCount type="script"><![CDATA[
          switch (KV.hitCount) {
            case (1) {
              msg ("KV leans his head back just enough to avoid your attack, just before you can connect.  \"Cut that shit out, Pixie,\" he warns.  \"I was trained in the arts of Jeet Kune Do in the Mall of Memphis back in the day, you know.\"<br/>")
            }
            case (2) {
              msg ("KV effortlessly deflects your attack.<br/><br/>\"Second warning,\" he sighs.<br/>")
            }
            case (3) {
              msg ("\"Holy shit, it's the Pope!\" you exclaim, pointing behind KV.<br/><br/>You punch him in the arm when he turns to look.<br/><br/>\"Oh, you incredible cock-sucker!\"  KV says with a grin.  \"Since this is your 'thank you' game, I'll let you have that one for free.\"<br/>")
            }
            case (4) {
              msg ("KV dodges left, puts his right foot behind yours, and pushes you down on your ass.<br/><br/>You look up to find him offering you a hand.  \"Sorry, man,\" he says, helping to your feet, \"but you kept on, didn't you?\"<br/><br/><b>[  YOUR HEALTH HAS DECREASED BY 1  ]</b>")
              DecreaseHealth (1)
            }
            case (5) {
              msg ("KV knocks your hand away.  \"Pix... if you try that shit ONE more time, I'm turning off UNDO!  And I ain't hardly bullshittin!\"<br/>")
            }
            case (6) {
              msg ("KV sees your shoulder move before you even draw back to swing, and he kicks the ever-loving shit out of you, knocking you back onto your ass.<br/><br/>\"Why you gotta try to hit me, man?\"  KV asks, rubbing his hands together as if they were cold.  \"Now I gotta do it.  I gotta undo UNDO!\"<br/><br/>KV begins to chant.  Your surroundings grow darker while he utters the code.<br/><br/>\"<code style=\"color:red;background:lightgray;padding:4px\">kv_undo.script = kv_undo.realscript</code><br/>\"<code style=\"color:red;background:lightgray;padding:4px\">kvScript => @@@open@@@</code><br/>\"<code style=\"color:red;background:lightgray;padding:4px\">msg (\"You can't do that, Hitty McHitterton!\")</code><br/>\"<code style=\"color:red;background:lightgray;padding:4px\">@@@close@@@</code><br/>\"<code style=\"color:red;background:lightgray;padding:4px\">kv_undo.script = kvScript</code>\"<br/><br/><b>[  YOUR HEALTH HAS DECREASED BY 1 ]</b>")
              kv_undo.realscript = kv_undo.script
              kvScript => {
                msg ("You can't do that, Hitty McHitterton!")
              }
              kv_undo.script = kvScript
              DecreaseHealth (1)
            }
            case (7) {
              msg ("KV evades again, countering with a jab to your nose.<br/><br/>\"This really does hurt me worse than it hurts you,\" he says.  \"It <i>is</i> self-defense, though.\"<br/><br/><b>[  YOUR HEALTH HAS DECREASED BY 1  ]</b>")
              DecreaseHealth (1)
            }
            case (8) {
              msg ("You ball your hand up into a fist.  KV shakes his head, 'no. Please don't.'<br/><br/>You look him straight in the eye and take the swing...<br/><br/>He leans right into it, then just shakes his head at you and laughs.  \"Is that all you've got?  Hell, my ex-wife hits harder than that!\"<br/>")
            }
            case (9) {
              msg ("\"You can't do that anymore\" says KV.  \"Please move along.\"<br/>")
            }
          }
        ]]></changedhitCount>
        <ask type="scriptdictionary">
          <item key="RH richard headkid"><![CDATA[
            if (disk.parent = Richard Headkid) {
              if (game.pov.parent = KVs room) {
                msg ("{once:You ask KV about Richard Headkid.<br/><br/>\"He just came through here,\" says KV. }\"He was headed {command:north:north}.\"")
              }
              else {
                msg ("You ask KV about Richard Headkid.<br/><br/>\"Yeah, I'm sorry about him,\" KV sighs. \"He's been getting more and more out of control. I told him he could work on a secret side-project, just to keep him busy, but he just gets crazy when he's coding. What can I say?\"<br/><br/>You can't tell if KV's being serious or not. You ask if he's aware that he and RH are, in fact, one in the same.<br/>\"It's different here,\" he whispers. \"He's darker. More evil...\"<br/><br/>You know what he's saying is completely nonsensical, but something about his tone gives you a chill.<br/>")
              }
            }
            else {
              msg ("You ask KV about Richard Headkid.<br/><br/>\"Yeah, I'm sorry about him,\" KV sighs. \"He's been getting more and more out of control. I told him he could work on a secret side-project, just to keep him busy, but he just gets crazy when he's coding. What can I say?\"<br/><br/>You can't tell if KV's being serious or not. You ask if he's aware that he and RH are, in fact, one in the same.<br/><br/>\"It's different here,\" he whispers. \"He's darker. More evil....\"<br/><br/>You know what he's saying is completely nonsensical, but something about his tone gives you a chill.<br/>")
            }
          ]]></item>
          <item key="game"><![CDATA[
            msg ("You ask KV about the game.<br/><br/>\"Do you like it so far?\" KV asks.<br/>")
            if (DL_Room.visited) {
              msg ("\"What did you think of DL's room? Wasn't the clone bit hilarious?!?\"<br/>")
              if (kv_Swedenborgian Space.visited) {
                msg ("You ask KV about the game.<br/><br/>\"You've done all of my bits already, you know...\"")
              }
            }
          ]]></item>
          <item key="phone booth phonebooth phone-booth"><![CDATA[
            msg ("You ask KV about the phone booth.<br/><br/>\"{once:More people should read sticky-notes,\" KV mumbles, completely ignoring your question.}{notfirst: Try turning the sticky note,\" says K.V.}<br/>")
          ]]></item>
          <item key="planet disk"><![CDATA[
            msg ("You ask KV about the planet disk.<br/>")
            if (disk.parent = Richard Headkid) {
              msg ("\"Is that what RH was carrying when he came through here?\" KV scratches his head. \"I mean, I don't know what a planet disk is... but he had some sort of round thingy...\"<br/>")
            }
            else {
              msg ("\"A planet disk?\" asks KV. \"I think I heard DL talking to himself about one of those!\"<br/>")
            }
          ]]></item>
          <item key="forum posts"><![CDATA[
            msg ("You ask KV about The Forum Posts.<br/><br/>\"We could use your help with all the posts on the forum,\" says KV. \"Those things are all over the place!<br/><br/>\"We tried, too! You should have seen us! It was so sad...<br/><br/>\"Someone asked how to use <code>CapFirst</code> in the text processor, and I didn't know... So I told them just to write this long ass script... and that just confused them more.<br/><br/>\"Then, HK popped in and laid out a masterful script, which was similar to mine, but better in every way... BUT that didn't help, because then they asked what the forward slashes were for, and HK, it was so funny... he posted: <code>//This is a note.</code>... and then THEY were all like, \"I know that! But what are the slashes for?\"<br/><br/>KV shakes his head and laughs. \"And <b><i>that's</i></b>  when DL and XM chimed in. Not at the same time, mind you... about two minutes apart. And they both posted two entirely different scripts, and...\"<br/><br/>KV continues to ramble on incessantly while you wonder what you'll have for supper once you've finished playing your game.<br/><br/>Time passes...<br/>")
          ]]></item>
          <item key="JS JavaScript"><![CDATA[
            msg ("You ask KV about JavaScript.<br/>")
            msg ("K.V. smiles.<br/><br/>\"Do you like being able to use the JavaScript? I thought that would be pretty neat: A coder having to code within the game to pull certain things off!\"<br/>")
            if (game.gamename = "TRIBUTE") {
              msg ("\"I see you haven't changed the game's name yet...<br/>\"Do you know how?<br/>\"You can enter: <code style=\"color:red\">gamename Pixie Rules</code>, or something like that...\"<br/>")
            }
          ]]></item>
          <item key="clones clone cloning"><![CDATA[
            if (not player.can_clone) {
              msg ("You ask KV about clones.<br/><br/>\"I could set it up so you can clone objects, you know,\" says K.V. \"You'd just need to fix the code. It's a little messed up at the moment, but you can use the SHOWME Spell to view what's currently written. From there, you can use your CHEAT SET command to fix it. Can't you?  (Or have you found all that stuff yet?)\"<br/>")
            }
            else {
              msg ("You ask KV about clones.<br/><br/>\"Congratulations! You fixed the script, and you can clone (most) things now!<br/>\"Great job, Pix!\"<br/>")
            }
          ]]></item>
          <item key="DarkLizerd lizerd dark lizard dl"><![CDATA[
            msg ("You ask KV about DarkLizerd.<br/><br/>\"DL is a very talented... individual,\" replies KV, a confused look on his face.<br/>")
          ]]></item>
          <item key="XanMag xm xan"><![CDATA[
            if (XanMag.TaskCount = 3) {
              msg ("You ask KV about XanMag.<br/><br/>\"You need to record a dope beat for him,\" says KV.")
            }
            else if (XanMag.TaskCount = 2) {
              msg ("You ask KV about XanMag.<br/><br/>\"You need to get that guy a beer,\" says KV.")
            }
            else if (XanMag.TaskCount = 1) {
              msg ("You ask KV about XanMag.<br/><br/>\"You'll have to come up with an idea on your own, Pix,\" says KV.")
            }
            else if (XanMag.TaskCount = 0) {
              msg ("You ask KV about XanMag.<br/><br/>\"Did you enjoy all his bits?\" asks KV.  Then, \"that was rhetorical.  Don't really answer.\"")
            }
          ]]></item>
        </ask>
        <object name="kv_android">
          <inherit name="kvtype" />
          <nocopy />
          <feature_usegive />
          <hintlist type="stringlist">
            <value>Hint 1:  I love my Android!</value>
          </hintlist>
          <look type="script">
            msg ("K.V.'s Android doesn't look nearly as cool as the Quest PX!")
          </look>
          <use type="script"><![CDATA[
            msg ("The screen is locked.<br/><br/>(What are you doing anyway?!?! How can you see this??? Are you CHEATING???)<br/>")
            Log ("Pixie's got my phone!!!")
            error ("Pixie's messing around with KV's personal stuff!!! (This event has been logged!)")
            DecreaseScore (1)
            list add (game.scoreList, "Tried to use KV's phone: -1 point")
            msg ("<center><b>[ YOUR SCORE HAS DECREASED BY 1 ]</b></center><br/><br/><center><sub>( AUTHOR'S NOTE: This will happen every time you try to use my phone! ) </sub></center>")
          ]]></use>
        </object>
        <object name="kv_token of appreciation">
          <inherit name="kvtype" />
          <take />
          <drop />
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <dropmsg><![CDATA[&nbsp]]></dropmsg>
          <hintlist type="stringlist">
            <value>Hint 1:  It's just a small token of my appreciation.</value>
            <value>Hint 2:  Do you remember what all you read about while in the Telemat booth?</value>
            <value>Hint 3:  Use the token while in the Telemat booth.</value>
          </hintlist>
          <alias>token of appreciation</alias>
          <look type="script"><![CDATA[
            msg ("<img src=\"" + GetFileURL("kv_token.png")  + "\" />")
          ]]></look>
          <ondrop type="script">
            msg ("You start to throw the token away, but you decide it may come in handy later.")
            MoveObject (kv_token of appreciation, player)
          </ondrop>
        </object>
      </object>
      <exit alias="north" to="kv_meadow">
        <inherit name="northdirection" />
        <locked type="boolean">false</locked>
        <runscript />
        <script type="script"><![CDATA[
          if (disk.parent = Richard Headkid) {
            MoveObject (player, kv_meadow)
            MoveObject (KV, Quest Forum)
            RemoveObject (RH desk)
            MoveObject (kv_desk, Quest Forum)
          }
          else {
            msg ("\"You can't go that way right now, Pix,\" says KV. {either not kv_meadow.visited:\"There must be something you haven't done yet!\"|\"You've already done that bit!\"}<br/>")
        }
        ]]></script>
      </exit>
      <object name="kv_desk">
        <inherit name="surface" />
        <inherit name="kvtype" />
        <alias>KV's desk</alias>
        <feature_container />
        <hidechildren />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <listchildren />
        <look><![CDATA[&nbsp;]]></look>
        <not_all />
        <displayverbs type="stringlist">
          <value>Look at</value>
        </displayverbs>
        <hintlist type="stringlist">
          <value>Hint:  EXAMINE DESK.</value>
        </hintlist>
        <pushable />
        <object name="kv_cc2">
          <inherit name="switchable" />
          <inherit name="kvtype" />
          <alias>Tandy Color Computer 2</alias>
          <attr name="feature_container" type="boolean">false</attr>
          <close type="boolean">false</close>
          <open />
          <take type="boolean">false</take>
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Take</value>
            <value>Switch on</value>
            <value>Use</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Open</value>
          </inventoryverbs>
          <look>It looks just like a keyboard, only bulkier.</look>
          <attr name="feature_switchable" type="boolean">false</attr>
          <programmed type="boolean">false</programmed>
          <takemsg>You try to take it, but it weighs more than a level 5 crate!!!</takemsg>
          <feature_usegive />
          <turnoff>You decide to leave it on.</turnoff>
          <hintlist type="stringlist">
            <value>Hint 1:  Have you tried switching it on?</value>
            <value>Hint 2:  Is the TV switched on?</value>
            <value>Hint 3:  Have you tried using it?</value>
          </hintlist>
          <not_all />
          <openscript type="script">
            msg ("It appears to be stuck closed. (Maybe XanMag can get it open...)")
          </openscript>
          <onswitchon type="script">
          </onswitchon>
          <use type="script"><![CDATA[
            if (not kv_cc2.switchedon) {
              msg ("You'll probably do better once you've turned it on.")
            }
            else {
              if (kv_TV.switchedon) {
                kv_cc2.programmed = true
                firsttime {
                  msg ("You use a little bit of what you've learned from Dark Lizerd, hacking away at the keys in BASIC.<br/><br/><code style=\"font-family:monospace\">10 PRINT \"Hello, World!\"<br/><br/>20 END</code><br/>After a few thousand keystrokes (mere childsplay!), you've got a program up and running.<br/>")
                  msg ("<center><h1>\"Hello, World!\"</h1></center>")
                  IncreaseScore (1)
                  list add (game.scoreList, "Used the Tandy: 1 point")
                  msg ("<center><b>[  YOUR SCORE HAS INCREASED BY 1  ]</b></center>")
                  MoveObjectHere (Scroll of Destruction)
                }
                otherwise {
                  msg ("You'd rather not mess with the Tandy again right now.<br/>")
                }
              }
              else {
                msg ("You'll probably do better if the TV is on.")
              }
            }
          ]]></use>
        </object>
        <object name="kv_TV">
          <inherit name="switchable" />
          <inherit name="kvtype" />
          <feature_switchable />
          <attr name="both_on">program.promptmsg</attr>
          <alias>TV</alias>
          <feature_usegive />
          <displayverbs type="stringlist">
            <value>Look at</value>
            <value>Switch on</value>
            <value>Switch off</value>
          </displayverbs>
          <hintlist type="stringlist">
            <value>Hint 1:  Get Lamp is on this TV from 1h00m00s gametime to 3h00m00s gametime every Zorkday!</value>
            <value>Hint 2:  You know... This hint thing was my idea, but I'm pretty sure no one will ever read most of these...</value>
            <value>Hint 3:  Turn the TV on.</value>
            <value>Hint 4:  Look at it when it's on.</value>
            <value>Hint 5:  If you still need a hint, you haven't been checking out the Tandy!</value>
          </hintlist>
          <watch>This TV doesn't show shows.  (Try reading it or examining it.{once:  Or go watch Xan's TV.})</watch>
          <not_all />
          <takemsg>That belongs to KV.</takemsg>
          <look type="script"><![CDATA[
            if (this.switchedon) {
              if (kv_cc2.switchedon) {
                if (kv_cc2.programmed) {
                  msg ("The program is running flawlessly. The text fills the screen faster than the screen can refresh... It is beautiful.<br/><br/>Hello, World!<br/>")
                }
                else {
                  msg ("You see a command prompt.")
                }
              }
              else {
                msg ("The screen is black.")
              }
            }
            else {
              msg ("It isn't switched on.")
            }
          ]]></look>
          <use type="script">
          </use>
          <read type="script">
            do (this, "look")
          </read>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Use</value>
            <value>Drop</value>
            <value>Switch on</value>
            <value>Switch off</value>
          </inventoryverbs>
        </object>
        <object name="Showme Scroll">
          <inherit name="kvtype" />
          <hintlist type="stringlist">
            <value>Hint: Pick it up.</value>
          </hintlist>
          <look><![CDATA[SHOWME<br/>SHOWME #object#<br/>SHOWME ALL]]></look>
          <take type="script"><![CDATA[
            Showme Spells.scenery = true
            msg ("You pick it up and copy the spells to your magic book. The scroll inexplicably vanishes.<br/>")
            MoveObject (Showme Spells, kv_book)
            kv_showme.parent = null
            kv_showme_all.parent = Quest Forum.parent
            kv_showme_it.parent = Quest Forum.parent
            RemoveObject (Showme Scroll)
          ]]></take>
          <object name="Showme Spells">
            <inherit name="plural" />
            <look><![CDATA[showme<br/><br/>showme #object#<br/><br/>showme all<br/>]]></look>
            <displayverbs type="stringlist">
              <value>Look at</value>
            </displayverbs>
            <inventoryverbs type="stringlist">
              <value>Look at</value>
            </inventoryverbs>
            <drop type="boolean">false</drop>
            <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- Showme Spells]]></listalias>
          </object>
          <command name="kv_showme_all">
            <pattern>showme all</pattern>
            <script>
              foreach (o, AllObjects()) {
                msg (o + "Parent: " + o.parent)
              }
            </script>
          </command>
          <command name="kv_showme_it">
            <pattern>showme #text#</pattern>
            <script><![CDATA[
              o = GetObject(text)
              if (o <> null){
                if (HasAttribute (o, "parent")){
                  msg (o + " Current location: " + o.parent)
                }
                foreach (b, AllObjects()) {
                  if (b = GetObject(text)) {
                    // msg (b.name)
                    if (not b.name = null) {
                      game.attnames = GetAttributeNames(b, true)
                      msg ("<br><b>ChildObjects:</b>")
                      binv = (GetAllChildObjects(b))
                      foreach (obj, binv) {
                        msg (obj)
                      }
                      ShowMenu ("View the object's attributes?", Split("yes;no", ";"), true) {
                        if (result = "yes") {
                          DisplayList (game.attnames, false)
                        }
                      }
                    }
                  }
                }
              }
            ]]></script>
          </command>
          <command name="kv_showme">
            <pattern>showme</pattern>
            <script>
              // DisplayList ((GetAllChildObjects(game.pov.parent)), false)
              foreach (o, (GetAllChildObjects(game.pov.parent))) {
                if (HasAttribute (o, "parent")){
                  msg (o + ", parent: " + o.parent)
                }
              }
            </script>
          </command>
        </object>
      </object>
      <object name="px_blue_telemat_booth2">
        <inherit name="kvtype" />
        <alias>blue Telemat booth</alias>
        <usedefaultprefix />
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Enter</value>
        </displayverbs>
        <attr name="not_all" type="string"></attr>
        <nocopy type="string"></nocopy>
        <linkcolour>MidnightBlue</linkcolour>
        <hintlist type="stringlist">
          <value>Hint 1:  You'll have to examine the Telemat booth for more information.</value>
        </hintlist>
        <look type="script"><![CDATA[
          msg ("It's just a perfectly normal {popup:TeleMat&nbsp;booth:TeleMat booths offer instant travel around the world; just step inside, dial the number of your destination, and you will be instantly teleported there.}.")
        ]]></look>
        <enterverb type="script"><![CDATA[
          MoveObject (game.pov, this)
          kv_token of appreciation.use => {
            HandleSingleCommand ("put token in slot")
          }
          kv_token of appreciation.generatedverbslist = NewStringList()
          list add (kv_token of appreciation.generatedverbslist, "Use")
        ]]></enterverb>
        <onexit type="script"><![CDATA[
          kv_token of appreciation.use => {
            msg ("You can't do that.")
          }
          if (ListContains(kv_token of appreciation.generatedverbslist, "Use")) {
            list remove (kv_token of appreciation.generatedverbslist, "Use")
          }
        ]]></onexit>
        <exit alias="out" to="KVs room">
          <inherit name="outdirection" />
        </exit>
        <object name="kv_phone2">
          <alias>phone</alias>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <attr name="not_all" type="string"></attr>
          <hintlist type="stringlist">
            <value>Hint 1:  The phone is strictly cosmetic.  You can't do anything with it.</value>
          </hintlist>
        </object>
        <command name="kv_dialing2">
          <pattern>dial #text#</pattern>
          <script>
            switch (text) {
              case ("42") {
                MoveObject (player, px_blue_telemat_booth)
              }
              case ("69105") {
                msg ("It's engaged.")
              }
              case ("911") {
                msg ("The line is busy.")
              }
              case ("home") {
                msg ("Oh, no... No E.T. jokes!")
              }
              default {
                msg ("That didn't work.")
              }
            }
          </script>
        </command>
        <object name="kv_sticky note2">
          <alias>sticky note</alias>
          <take type="boolean">false</take>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <attr name="not_all" type="string"></attr>
          <hintlist type="stringlist">
            <value>Hint 1:  Have you tried turning it?</value>
          </hintlist>
          <look type="script"><![CDATA[
            msg ("What is the Answer to Life, the Universe, and Everything?<br/><br/>(Dial the Answer.)")
            kv_sticky note2.turn = "There's a number on the back: <h3>{command:dial 42:42}</h3>"
            kv_sticky note2.generatedverbslist = Split("Turn", ";")
          ]]></look>
        </object>
        <object name="kv_slot2">
          <inherit name="container_open" />
          <feature_container />
          <open type="boolean">false</open>
          <close type="boolean">false</close>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <alias>slot</alias>
          <attr name="not_all" type="string"></attr>
          <hintlist type="stringlist">
            <value>Hint 1:  Examining the slot should give you the only clue you'll need.</value>
            <value>Hint 2:  If you don't know what to do with this slot, you haven't done something yet.</value>
          </hintlist>
          <addscript type="script"><![CDATA[
            if (object = kv_token of appreciation) {
              msg ("You put the token into the slot, but it pops right back out of the the machine. You grab it, then reality flickers<a href=\"#\" style=\"text-decoration:none\" title=\"FOOTNOTE: Reality didn't flicker because you grabbed the token. It flickered because you put the token into the slot!\">*</a>...")
              MoveObject (player, kv_Crate Mart)
            }
            else {
              msg ("You can't do that.")
            }
          ]]></addscript>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Use</value>
            <value>Drop</value>
            <value>Open</value>
            <value>Close</value>
          </inventoryverbs>
        </object>
        <object name="kv_buttons2">
          <alias>buttons</alias>
          <attr name="not_all" type="string"></attr>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <scenery />
          <hintlist type="stringlist">
            <value>Hint 1:  The buttons are useless.  They're only here so you won't say I was too lazy to include them!</value>
          </hintlist>
        </object>
        <command name="kv_dial42">
          <pattern>42</pattern>
          <script>
            HandleSingleCommand ("dial 42")
          </script>
        </command>
      </object>
      <exit alias="in" to="px_blue_telemat_booth2">
        <inherit name="indirection" />
        <scenery />
      </exit>
      <object name="projector">
        <look><![CDATA[It's a projector with DVD player and speaker built into it.  It is pointed towards the {object:canvas screen}.{once:  It also has the connections for yellow, white, and red cables.<br/><br/>It has "ZOOMBOX" printed on top of it.  (It's a pretty neat idea, really.)}]]></look>
        <turnon>It's already on.</turnon>
        <turnoff>"Leave that alone, please," KV asks politely.</turnoff>
        <touch>It's warm.</touch>
        <not_all />
        <takemsg>That's KV's.</takemsg>
      </object>
      <object name="canvas screen">
        <look><![CDATA[KV is watching {if game.turns<120:Quentin Tarantino's "Death Proof".  {either game.turns< 48:They're still in the bar.  {if game.turns>40:It's the lap-dance scene.}|It's the good part.  The rest of the movie is a car chase!}}{if game.turns>120:{if game.turns<255:a Bruce Lee movie.  {either game.turns<210:It's The Way of the Dragon.|It's the REAL, unfinished version of The Game of Death.}}{if game.turns>255:{either game.turns<375:Young Frankenstein|Blazing Saddles}.}}]]></look>
        <takemsg>KV wouldn't appreciate that very much.</takemsg>
        <not_all />
      </object>
    </object>
    <object name="kv_post_time">
      <alias>FORUM POST: time</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
      </inventoryverbs>
      <scenery />
      <look type="script"><![CDATA[
        msg ("<img src='" + GetFileURL("timepost.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/u_n5otugokquhpmnu0bdzw/how-do-i-get-time-to-work#d57928f9-27c4-4a93-9083-5892fc1d9cd8\">View this post in your browser.</a>")
        RemoveObject (kv_post_time)
        // UpdateInv2
        list add (kv_device.favorites, kv_post_time)
        JS.scrollToEnd ()
        list remove (kv_device.alertsnow, this)
        JS.updateLocation (game.locationmsg)
      ]]></look>
      <fav type="script"><![CDATA[
        msg ("<img src='" + GetFileURL("timepost.png") + "' width=\"100%\" height=\"344\" /><br/><a href=\"https://textadventures.co.uk/forum/quest/topic/u_n5otugokquhpmnu0bdzw/how-do-i-get-time-to-work#d57928f9-27c4-4a93-9083-5892fc1d9cd8\">View this post in your browser.</a>")
      ]]></fav>
    </object>
    <object name="rh_pic">
      <inherit name="kvtype" />
      <alias>picture of RH</alias>
      <take />
      <hintlist type="stringlist">
        <value>Hint 1:  Examine it.  (That's all you can really do.)</value>
      </hintlist>
      <look type="script">
        picture ("rh_.png")
      </look>
    </object>
    <object name="kv_complete_alert">
      <alias>ALERT: KV's world completed!</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
      </inventoryverbs>
      <scenery />
      <look type="script"><![CDATA[
        kv_complete_alert.alias = "KV's world completed! (viewed alert)"
        msg ("<p style=\"border:1px solid black;border-radius:65px;background:black;color:white;font-family:'Droid Sans';padding:19px\"><br/>Pix,<br/><br/>Great job! <br/><br/>You've completed all of my parts!{if not kv_green_shard.hasbeenmoved:<br/><br/>...except for finding the {colour:darkgreen:shard} I've hidden...<br/><br/>I'll send you a link to a forum post with a hidden hint.}<br/><br/>(See you in the sequel!)<br/><br/>KV<br/><br/></p>")
        RemoveObject (kv_complete_alert)
        if (not ListContains(kv_device.alerts, kv_complete_alert)) {
          list add (kv_device.alerts, kv_complete_alert)
        }
        if (not kv_green_shard.hasbeenmoved) {
          MoveObject (kv_post_time, kv_device)
          msg ("{b:YOU HAVE A NEW ALERT!}<br/>")
        }
        list remove (kv_device.alertsnow, this)
        JS.updateLocation (game.locationmsg)
      ]]></look>
    </object>
    <object name="kv_69105alert">
      <alias>ALERT: Welcome to KV's world!</alias>
      <displayverbs type="stringlist">
        <value>Look at</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
      </inventoryverbs>
      <scenery />
      <look type="script"><![CDATA[
        kv_69105alert.alias = "Welcome to KV's world! (viewed alert)"
        msg ("<p style=\"border:1px solid black;border-radius:65px;background:black;color:white;font-family:'Droid Sans';padding:19px\"><br/>Pix,<br/><br/>Great job! You used the phone booth! (It's not quite up to snuff, but it got you here, right?)<br/><br/>Oh, by the way: When you travel in the phone booth, you can't really tell your location changes (or even where you're at) until you go out and look!<br/><br/></p>")
        RemoveObject (kv_69105alert)
        if (not ListContains(kv_device.alerts, kv_69105alert)) {
          list add (kv_device.alerts, kv_69105alert)
        }
        list remove (kv_device.alertsnow, this)
        JS.updateLocation (game.locationmsg)
      ]]></look>
    </object>
    <object name="kv_Crate Mart">
      <usedefaultprefix type="boolean">false</usedefaultprefix>
      <alias>Crate Mart</alias>
      <crateTable />
      <description><![CDATA[<br/>This place seems to go on forever in almost every direction.<br/>]]></description>
      <beforefirstenter type="script"><![CDATA[
        set (rh_mini_crate, "push", rh_mini_crate.take)
        rh_mini_crate.take => {
          msg ("ErRoR rUnNiNg ScRipT: rh_mini_crate.take Not GetBoolean String Function: Attribute kv_RH : XM: HK/hegemonkhan :{either The Trick Bag.parent = game.pov.parent:Use your  SHOWME Spell and your CHEAT SET Spell!| Try pushing it!}")
        }
        rh_mini_crate.open = false
      ]]></beforefirstenter>
      <firstenter type="script">
      </firstenter>
      <enter type="script"><![CDATA[
        if (not player.thanked) {
          msg ("\"What do you think you're doing in here,\" The Cratesman explodes, making a bee-line towards you.  \"We're not open yet!\"<br/><br/>With that, he escorts you back to the hub.<br/>")
          MoveObject (player, Quest Forum)
        }
      ]]></enter>
      <onexit type="script">
      </onexit>
      <beforeenter type="script">
        game.turnsInCrateMart = 0
      </beforeenter>
      <object name="rh_mini_crate">
        <inherit name="container_closed" />
        <inherit name="container_lockable" />
        <inherit name="kvtype" />
        <volume type="int">1</volume>
        <weight type="int">8</weight>
        <feature_container />
        <attr name="carry_cap" type="int">250</attr>
        <stack type="int">12000</stack>
        <hidechildren />
        <listchildren />
        <alias>mini crate</alias>
        <keycount type="int">1</keycount>
        <nokeymessage>(You'll have to complete KV's world before you can open this!)</nokeymessage>
        <nocopy />
        <look><![CDATA[It's the smallest crate here.<br/><br/>It's made of wood and can be opened and closed.{if kv_green_shard.parent=rh_mini_crate:<br/><br/>A green light emanates from within it.}<br/><br/>For more information, see {command:showcratetable:the table}.<br/>]]></look>
        <open type="boolean">false</open>
        <hintlist type="stringlist">
          <value>Hint 1:  Sorry, but you'll just have to use your CHEAT SET spell to get the mini crate open.</value>
          <value>Hint 2:  The CHEAT SET spell is in your bag of tricks.</value>
          <value>Hint 3:  Can't find the bag of tricks?  (See hint 4)</value>
          <value>Hint 4:  Try to PUSH THE MINI CRATE</value>
        </hintlist>
        <key type="object">kv_token of appreciation</key>
        <take type="script"><![CDATA[
          if (not kv_green_shard.parent = rh_mini_crate) {
            msg ("You pick it up.")
            MoveObject (rh_mini_crate, player)
          }
          else {
            firsttime {
              MoveObjectHere (The Trick Bag)
              msg ("<br/>{object:The Trick Bag:Your bag of tricks} appears out of thin air!<br/>")
            }
            msg ("You can't do that. (<code>rh_mini_crate.open = AllMessedUp!!!)br/><br/>Try cheat setting open to true.")
            error ("" + kv_green_shard + "'s take, OPEN, and push attributes are currently set incorrectly.  (You may have to use your CHEAT Spells to get it OPEN!!!)")
          }
        ]]></take>
        <onopen type="script"><![CDATA[
          msg ("")
          if (kv_green_shard.parent = rh_mini_crate) {
            firsttime {
              if (not kv_Cratesman.saidit) {
                msg ("\"Do you see that {colour:green;SHARD}?!?\" The Cratesman explodes. \"Nowhere on that crates table is there a green piece of crystal mentioned! NOWHERE!!!\"<br/><br/>He then stomps around, apparently in search of some poorly made crates table...<br/>")
                kv_Cratesman.saidit = true
              }
            }
          }
        ]]></onopen>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <object name="kv_green_shard">
          <inherit name="kvtype" />
          <alias>green shard of {colour:darkgreen:∞}</alias>
          <listalias><![CDATA[<span style="color:darkgreen">green shard of &infin;</span>]]></listalias>
          <linkcolour>DarkGreen</linkcolour>
          <take />
          <nocopy />
          <touchedonce type="boolean">false</touchedonce>
          <look><![CDATA[{colour:darkgreen:A beautiful, green SHARD OF <span style="font-size:999%">&infin;</span>}]]></look>
          <dropmsg>You can't drop that!                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               </dropmsg>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
            <value>Drop</value>
          </inventoryverbs>
          <hintlist type="stringlist">
            <value>Hint 1:  It's KV's hidden object!  Whoo-hoo!</value>
            <value>Hint 2:  All you need to do is take it.</value>
          </hintlist>
          <drop type="boolean">false</drop>
          <ontake type="script"><![CDATA[
            firsttime {
              IncreaseScore (50)
              list add (game.scoreList, "Made it into Crate Mart: 50 points")
              QuestComplete (KV, "cratemart")
              kv_green_shard.touchedonce = true
              msg ("<br/>You feel an immense power surge through you.<br/><br/>You are now more 'one with the dimensions'.<br/><br/><h1><center>CONGRATULATIONS!<br/><span style=\"color:darkgreen\">You have collected the green Shard of Infinity!</span></center></h1><br/>")
              msg ("<br/><center><b>[ YOUR SCORE HAS INCREASED BY 50 ]</b></center><br/><br/><h3>DIMENSION COMPLETE!</h3><br/>")
            }
          ]]></ontake>
        </object>
      </object>
      <object name="rh_small_crate">
        <inherit name="container_closed" />
        <inherit name="kvtype" />
        <volume type="int">8</volume>
        <weight type="int">31</weight>
        <attr name="carry_cap" type="int">350</attr>
        <stack type="int">10000</stack>
        <feature_container />
        <hidechildren />
        <listchildren />
        <take />
        <alias>small crate</alias>
        <hintlist type="stringlist">
          <value>Hint 1:  Have you tried entering the small crate, by any chance?</value>
        </hintlist>
        <beforeenter type="script">
          JS.setGameWidth ("33%")
          JS.uiHide ("#gamePanes")
          JS.eval ("$('#status').css('width', '33%')")
        </beforeenter>
        <onexit type="script">
          JS.setGameWidth ("948px")
          JS.uiShow ("#gamePanes")
          JS.eval ("$('#status').css('width', '948px')")
        </onexit>
        <look type="script"><![CDATA[
          msg ("It's the second smallest crate here.<br/><br/>It's made of wood, and it can be opened or closed. {once:<br/><br/>\"That crate there's the one people disappear into,\" says The Cratesman, matter-of-factly.}<br/><br/>For more information, see {command:msg (kv_Crate Mart.crateTable):the table}.<br/>")
        ]]></look>
        <onopen type="script">
        </onopen>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
      </object>
      <object name="rh_medium_crate">
        <inherit name="container_closed" />
        <inherit name="kvtype" />
        <volume type="int">27</volume>
        <attr name="carry_cap" type="int">3000</attr>
        <weight type="int">63</weight>
        <stack type="int">10000</stack>
        <feature_container />
        <hidechildren />
        <listchildren />
        <take />
        <alias>medium crate</alias>
        <look><![CDATA[A medium-sized crate, made of wood.<br/><br/>For more information, see {command:msg (kv_Crate Mart.crateTable):the table}.<br/>]]></look>
        <hintlist type="stringlist">
          <value>Hint:  Have you checked out the crate table?</value>
        </hintlist>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
      </object>
      <object name="rh_extra_large_cube_crate">
        <inherit name="container_closed" />
        <inherit name="kvtype" />
        <volume type="int">125</volume>
        <weight type="int">161</weight>
        <attr name="carry_cap" type="int">3500</attr>
        <stack type="int">7000</stack>
        <notall />
        <look><![CDATA[An extra-large crate, which is shaped like a cube and made of wood.<br/><br/>For more information, see {command:msg (kv_Crate Mart.crateTable):the table}.<br/>]]></look>
        <feature_container />
        <hidechildren />
        <listchildren />
        <alias>extra large cube crate</alias>
        <hintlist type="stringlist">
          <value>Hint:  Have you checked out the crate table?</value>
        </hintlist>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
      </object>
      <object name="rh_extra_large_long_crate">
        <inherit name="container_closed" />
        <inherit name="kvtype" />
        <inherit name="container_lockable" />
        <volume type="int">128</volume>
        <weight type="int">200</weight>
        <notall />
        <attr name="carry_cap" type="int">3500</attr>
        <stack type="int">7000</stack>
        <look><![CDATA[An extra-large crate, which is oblong and made of wood.<br/><br/>For more information, see {command:msg (kv_Crate Mart.crateTable):the table}.<br/>]]></look>
        <feature_container />
        <hidechildren />
        <listchildren />
        <alias>extra large long crate</alias>
        <hintlist type="stringlist">
          <value>Hint:  Have you checked out the crate table?</value>
        </hintlist>
        <push>You push it a little.  If it moved, you can't tell that it did.</push>
        <keycount type="int">1</keycount>
        <nokeymessage>You do not have the required object.</nokeymessage>
        <unlockmessage><![CDATA[<b>[ SYSTEM MESSAGE: DO NOT ENTER THIS CRATE!!! ]</b><br/>]]></unlockmessage>
        <lockmessage>How'd you do that?</lockmessage>
        <key type="object">kv_green_shard</key>
        <onopen type="script"><![CDATA[
          MakeExitVisible (rh_xl_long_crate)
          firsttime {
            msg ("\"That crate there's the one people disappear into,\" says The Cratesman, matter-of-factly.<br/>")
          }
        ]]></onopen>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
      </object>
      <object name="rh_large_crate">
        <inherit name="container_closed" />
        <inherit name="kvtype" />
        <volume type="int">64</volume>
        <notall />
        <weight type="int">107</weight>
        <attr name="carry_cap" type="int">3000</attr>
        <stack type="int">9000</stack>
        <look><![CDATA[An large crate, made of wood.<br/><br/>For more information, see {command:msg (kv_Crate Mart.crateTable):the table}.<br/>]]></look>
        <feature_container />
        <hidechildren />
        <listchildren />
        <alias>large crate</alias>
        <hintlist type="stringlist">
          <value>Hint:  Have you checked out the crate table?</value>
        </hintlist>
        <pushable />
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
      </object>
      <object name="kv_Cratesman">
        <inherit name="namedmale" />
        <inherit name="kvtype" />
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <look><![CDATA[The cratesman is walking around and inspecting the crates.<br/>]]></look>
        <alias>The Cratesman</alias>
        <notall />
        <saidit type="boolean">false</saidit>
        <hintlist type="stringlist">
          <value>Hint 1:  The Cratesman just wants the game to be the best it can be!  He's not a bad guy!</value>
        </hintlist>
        <speak type="script"><![CDATA[
          firsttime {
            msg ("\"Have you SEEN the state of things around here?!?\" the Cratesman explodes. \"There's only one of each crate! Good God, man! What has become of Quest games?!?\"<br/>")
          }
          otherwise {
            msg ("{random:\"Bugger off, Pixie,\" groans The Cratesman.:\"Did you say something?\" asks The Cratesman.:\"Some crates can be picked up, and some can't,\" says The Cratesman.:\"You ever heard of the folks that get into one of these crates and disappear?\" asks The Cratesman. \"That shit is CRAZY!\"}<br/>")
          }
        ]]></speak>
        <askdefault type="script"><![CDATA[
          msg ("The Cratesman just shrugs.<br/>")
        ]]></askdefault>
        <telldefault type="script">
          msg ("The Cratesman just shrugs.")
        </telldefault>
        <telltodefault type="script">
          msg ("The Cratesman gives you the finger.")
        </telltodefault>
        <ask type="scriptdictionary">
          <item key="crate crates"><![CDATA[
            msg ("You ask Cratesman about crates.<br/><br/>\"Someone is FINALLY giving them the attention they deserve!\" the Cratesman replies.<br/>")
          ]]></item>
        </ask>
      </object>
      <object name="Creation Scroll">
        <inherit name="container_open" />
        <inherit name="kvtype" />
        <feature_container />
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <isopen type="boolean">false</isopen>
        <transparent />
        <hidechildren />
        <listchildren />
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
        </displayverbs>
        <hintlist type="stringlist">
          <value>Hint:  Pick it up.</value>
        </hintlist>
        <look type="script">
          msg ("create (\"#text#\")")
        </look>
        <take type="script"><![CDATA[
          msg ("You pick it up and copy the spell to your magic book. The scroll inexplicably vanishes.<br/>")
          MoveObject (kv_CreationSpell, kv_book)
          kv_create.parent = Quest Forum.parent
          RemoveObject (Creation Scroll)
        ]]></take>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <object name="kv_CreationSpell">
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <drop type="boolean">false</drop>
          <notall />
          <scenery />
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <alias>Creation Spell</alias>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- Creation Spell]]></listalias>
          <look type="script"><![CDATA[
            msg ("Command Pattern:<br/><br/><code style=\"color:black;background:lightgray;padding:4px\">create (\"#text#\")</code><br/>{once:<br/>(NOTE:  This isn't really any good for anything. Unless you'd just like to create a pet rock or something...)}")
          ]]></look>
        </object>
        <command name="kv_create">
          <pattern>create ("#text#")</pattern>
          <script>
            create (text)
            obj = GetObject(text)
            obj.created = true
          </script>
        </command>
      </object>
      <exit alias="north" to="kv_glitch">
        <inherit name="northdirection" />
      </exit>
      <exit alias="northwest" to="kv_glitch">
        <inherit name="northwestdirection" />
      </exit>
      <exit alias="northeast" to="kv_glitch">
        <inherit name="northeastdirection" />
      </exit>
      <exit alias="west" to="kv_glitch">
        <inherit name="westdirection" />
      </exit>
      <exit alias="east" to="kv_glitch">
        <inherit name="eastdirection" />
      </exit>
      <exit alias="south" to="kv_glitch">
        <inherit name="southdirection" />
      </exit>
      <exit alias="southwest" to="kv_glitch">
        <inherit name="southwestdirection" />
      </exit>
      <exit alias="southeast" to="kv_glitch">
        <inherit name="southeastdirection" />
      </exit>
      <exit alias="up" to="kv_glitch">
        <inherit name="updirection" />
      </exit>
      <exit alias="down" to="kv_glitch">
        <inherit name="downdirection" />
      </exit>
      <object name="Extras Scroll">
        <inherit name="kvtype" />
        <hintlist type="stringlist">
          <value>Hint 1: Pick it up.</value>
        </hintlist>
        <look><![CDATA[<b>Do Spell</b><br/><br/><b>GetFileData Spell</b><br/>]]></look>
        <take type="script"><![CDATA[
          DoSpell.scenery = true
          GetFileData Spell.scenery = true
          msg ("You pick it up and copy the spells to your magic book. The scroll inexplicably vanishes.<br/>")
          MoveObject (GetFileData Spell, kv_book)
          MoveObject (DoSpell, kv_book)
          kv_GetFileData.parent = null
          kv_do.parent = null
          RemoveObject (Extras Scroll)
        ]]></take>
        <object name="DoSpell">
          <alias>Do Spell</alias>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- Do Spell]]></listalias>
          <drop type="boolean">false</drop>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <look><![CDATA[Command pattern:<br/><br/><code>do (#object#, #text#)</code><br/>]]></look>
        </object>
        <object name="GetFileData Spell">
          <drop type="boolean">false</drop>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- GetFileData Spell]]></listalias>
          <look><![CDATA[Command pattern:<br/><br/><code>GetFileData (#text#)</code><br/>]]></look>
        </object>
        <command name="kv_do">
          <pattern>do (#text#)</pattern>
          <script>
            obj = ListItem(Split(text, ","), 0)
            obj = GetObject(obj)
            msg (obj)
            t2 = ListItem(Split(text, ","), 1)
            param = Split(t2, "\"")
            parameter = ListItem(param, 1)
            msg ("Parameter: " + parameter)
            do (obj, parameter)
          </script>
        </command>
        <command name="kv_GetFileData">
          <pattern>GetFileData (#text#)</pattern>
          <script><![CDATA[
            if (StartsWith(text, "\"")) {
              ts = Split(text, "\"")
              text = ListItem(ts, 1)
            }
            msg ("<pre style=\"word-wrap: break-word;white-space:pre-wrap;\">" + GetFileData(text) + "</pre>")
            JS.scrollTo (0, 0)
          ]]></script>
        </command>
      </object>
      <command name="kv_enterCrate">
        <pattern>enter #object#</pattern>
        <script>
          if (object = rh_extra_large_long_crate) {
            if (rh_extra_large_long_crate.open) {
              HandleSingleCommand ("in")
            }
            else {
              msg ("It isn't open")
            }
          }
          else {
            msg ("You can't enter " + object.article + ".")
          }
        </script>
      </command>
      <command name="crateMartHelp">
        <pattern>hint;hints;wtf;wth;what the hell</pattern>
        <script>
          if (not rh_extra_large_long_crate.isopen) {
            if (not kv_green_shard.parent = player) {
              if (not kv_green_shard.hasbeenmoved) {
                if (not rh_mini_crate.isopen) {
                  if (not rh_mini_crate.open) {
                    if (not px_cheatSpells.parent = kv_Crate Mart) {
                      if (not The Trick Bag.hasbeenmoved) {
                        msg ("Try pushing the mini crate.")
                      }
                      else {
                        if (The Trick Bag.parent = game.pov.parent) {
                          msg ("Have you opened the bag of tricks?")
                        }
                      }
                    }
                    else {
                      msg ("Use your CHEAT spells.  CHEAT SET rh_mini_crate.open = true")
                    }
                  }
                  else {
                    msg ("Open the mini crate.")
                  }
                }
                else {
                  msg ("Get the shard")
                }
              }
              else {
              }
            }
            else {
              msg ("Open the extra large long crate.")
            }
          }
          else {
            msg ("Enter the extra long crate.")
          }
          game.suppressturnscripts = true
        </script>
      </command>
      <exit name="rh_xl_long_crate" alias="into the extra large long crate" to="Cave Entrance">
        <inherit name="indirection" />
        <visible type="boolean">false</visible>
        <suffix type="string"></suffix>
      </exit>
      <command name="kv_showcratetable">
        <pattern>showcratetable</pattern>
        <script><![CDATA[
          msg ("<table style=\"border: 1px solid black;\"> <thead style=\"border: 1px solid black;\"> <tr style=\"border: 1px solid black;\"> <th  style=\"border: 1px solid black;\">Crate</th> <th style=\"border: 1px solid black;\">LxWxH(ft)<br>(outside dim.)</th> <th style=\"border: 1px solid black;\">Weight (lbs)</th> <th style=\"border: 1px solid black;\">Carrying Capacity (lbs)</th> <th style=\"border: 1px solid black;\">Stacking Strength (lbs)</th> </tr> </thead> <tbody style=\"border: 1px solid black;\"> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">mini</td> <td style=\"border: 1px solid black;\">1 x 1 x 1</td> <td style=\"border: 1px solid black;\">8</td> <td style=\"border: 1px solid black;\">250</td> <td style=\"border: 1px solid black;\">12,000</td> </tr> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">small</td> <td style=\"border: 1px solid black;\">2 x 2 x 2</td> <td style=\"border: 1px solid black;\">31</td> <td style=\"border: 1px solid black;\">350</td> <td style=\"border: 1px solid black;\">10,000</td> </tr> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">medium</td> <td style=\"border: 1px solid black;\">3 x 3 x 3</td> <td style=\"border: 1px solid black;\">63</td> <td  style=\"border: 1px solid black;\">2,000</td> <td style=\"border: 1px solid black;\">10,000</td> </tr> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">large</td> <td style=\"border: 1px solid black;\">4 x 4 x 4</td> <td style=\"border: 1px solid black;\">107</td> <td style=\"border: 1px solid black;\">3,000</td> <td style=\"border: 1px solid black;\">9,000</td> </tr> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">extra large (cube)</td> <td style=\"border: 1px solid black;\">5 x 5 x 5</td> <td style=\"border: 1px solid black;\">161</td> <td style=\"border: 1px solid black;\">3,500</td> <td style=\"border: 1px solid black;\">7,000</td> </tr> <tr style=\"border: 1px solid black;\"> <td style=\"border: 1px solid black;\">extra large (long)</td> <td style=\"border: 1px solid black;\">8 x 4 x 4</td> <td style=\"border: 1px solid black;\">200</td> <td style=\"border: 1px solid black;\">3,500</td> <td style=\"border: 1px solid black;\">7,000</td> </tr> </tbody> </table> <p><sub><strong>1/4\" Thick Plywood</strong></sub></p> <hr>")
        ]]></script>
      </command>
    </object>
    <object name="Richard Headkid">
      <inherit name="namedmale" />
      <inherit name="kvtype" />
      <alt type="stringlist">
        <value>rh</value>
        <value>kv</value>
        <value>dickhead kid</value>
        <value>kavin</value>
        <value>richard</value>
      </alt>
      <listalias>RH</listalias>
      <scenery type="boolean">false</scenery>
      <inroomdescription type="string"></inroomdescription>
      <takemsg><![CDATA[RH knocks your hands away.<br />"I will not be pawed at, thank you," he grumbles.]]></takemsg>
      <nocopy />
      <hintlist type="stringlist">
        <value>Hint 1:  You can examine him.</value>
        <value>Hint 2:  You can speak to him.</value>
        <value>Hint 3:  You could try asking him about the project.</value>
      </hintlist>
      <alias>Richard Headkid</alias>
      <kill>"I'm just an idea," shrugs RH.  "You can't kill an idea, Pixie."</kill>
      <throw>"You can't do that," says RH.</throw>
      <listen>You can't do that.  (Or you shouldn't, at any rate!  (RH is a bit off his rocker!))</listen>
      <push>"You can't do that," says RH.</push>
      <attack>{once:You tell RH that Reor's Bush-Cave is the dumbest damned game you've ever played in your life.  He pretends he didn't hear you.}{notfirst:"You can't attack me with words," says RH.}</attack>
      <watch>He's all over the place.  You don't have enough energy (or patience) to watch him.</watch>
      <hitCount type="int">0</hitCount>
      <hit type="script"><![CDATA[
        if (Richard Headkid.hitCount < 5) {
          Richard Headkid.hitCount = Richard Headkid.hitCount + 1
        }
        else {
          msg ("\"Why do you keep trying to hit me, man?  That's not very Fonzie-like.\"  RH shakes his head and goes back to {random:work on the group project.:trying to help people on the forum.}")
        }
      ]]></hit>
      <speak type="script"><![CDATA[
        if (disk.parent = game.pov) {
          msg ("\"Yeah, yeah,\" interrupts RH. \"Just lemme check out that disk, Pixie... Please???\"<br/>")
        }
        else {
          firsttime {
            msg ("\"Hello,\" RH mumbles, tossing back an inverse nod. He then goes back to work on the project, leaning just enough to one side to keep you from seeing it.<br/>")
          }
          otherwise {
            msg ("RH nods as you speak to him. (He doesn't look you directly in the eye, but you get the feeling he's still listening.)<br/>")
          }
        }
      ]]></speak>
      <look type="script"><![CDATA[
        if (Got(disk)) {
          msg ("\"Can I see that disk, please?\" asks RH.<br/>")
        }
        else {
          msg ("RH is currently {random:asking a dumb question.:trying to tell someone how to customize CSS.:showing someone how to hide the side panes.:editing a post, and cursing because he didn't {random:remove:add} enough characters and it says, 'You can't post that here.':cursing the messenger because it doesn't like the HTML code he just wrote.:working on a group project with others from the Quest Forum, but it doesn't look like it's DIMENSIONS OF INFINITY...}<br/>")
          DisplayHttpLink ("Visit Richard Headkid's profile page.", "https://textadventures.co.uk/user/view/gudejtsx9komagj-tffyfg/richard-headkid", false)
        }
      ]]></look>
      <telldefault type="script">
        msg ("RH doesn't seem to be listening to you. (He's arguing with HK about a script at the moment.)")
      </telldefault>
      <askdefault type="script">
        msg ("RH shrugs.")
      </askdefault>
      <telltodefault type="script"><![CDATA[
        msg ("\"I'm sorry, Pix, but I'm a little busy at the moment,\" says RH. \"Ask HK to do it.\"<br/>")
      ]]></telltodefault>
      <changedhitCount type="script">
        switch (Richard Headkid.hitCount) {
          case (1) {
            msg ("Your hand goes right through him.  \"Pseudonym,\" says RH, pointing a thumb at himself.")
          }
          case (2) {
            msg ("\"You can't hit me.  Just give up,\" says RH.")
          }
          case (3) {
            msg ("\"How many times do you think I'll give a different response?\" asks RH.")
          }
          case (4) {
            msg ("\"This is fun, isn't it?\" sighs RH.")
          }
          case (5) {
            msg ("\"Why do you keep trying to hit me, man?  That's not very Fonzie-like.\"  RH shakes his head and goes back to work on the group project.")
          }
        }
      </changedhitCount>
      <ask type="scriptdictionary">
        <item key="project"><![CDATA[
          msg ("You ask RH about the group project.<br/><br/>\"What do you mean?\" RH looks around nervously. When no one comes to his rescue, he says, \"{random:look! There's a GRUE behind you!:watch out! XanMag's over there MacGuyvering stuff!}\"<br/><br/>He then goes back to work on the 'group project', not even looking to see if he's fooled you into turning around.")
        ]]></item>
        <item key="XanMag xm xan">
          if (XanMag.TaskCount = 3) {
            msg ("\"You need to record a dope beat for him,\" says RH.")
          }
          else if (XanMag.TaskCount = 2) {
            msg ("\"You need to get that guy a beer,\" says RH.")
          }
          else if (XanMag.TaskCount = 1) {
            msg ("\"You'll have to come up with an idea on your own, Pix,\" says RH.")
          }
          else if (XanMag.TaskCount = 0) {
            msg ("\"Did you enjoy all his bits?\" asks RH.  Then, \"that was rhetorical.  Don't really answer.\"")
          }
        </item>
      </ask>
    </object>
    <object name="kv_scroll_keeper">
      <hintlist type="stringlist">
        <value>You can't even see this!</value>
      </hintlist>
      <object name="Scroll of Destruction">
        <inherit name="container_open" />
        <inherit name="kvtype" />
        <feature_container />
        <scenery type="boolean">false</scenery>
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <isopen type="boolean">false</isopen>
        <transparent type="boolean">false</transparent>
        <hidechildren type="boolean">false</hidechildren>
        <listchildren type="boolean">false</listchildren>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
        </displayverbs>
        <hintlist type="stringlist">
          <value>Hint: Pick it up.</value>
        </hintlist>
        <look type="script">
          do (kv_destroy spell, "look")
        </look>
        <take type="script"><![CDATA[
          kv_destroy spell.scenery = true
          msg ("You pick it up and copy the spell to your magic book. The scroll inexplicably vanishes.<br/>")
          MoveObject (kv_destroy spell, kv_book)
          kv_destroy.parent = Quest Forum.parent
          RemoveObject (Scroll of Destruction)
        ]]></take>
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Use</value>
          <value>Drop</value>
          <value>Open</value>
          <value>Close</value>
        </inventoryverbs>
        <object name="kv_destroy spell">
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- Destroy Spell]]></listalias>
          <alias>Destroy Spell</alias>
          <look type="script"><![CDATA[
            msg ("Command pattern:<br/><br/><code style=\"background:lightgray;padding:4px\">destroy (#text#)</code><br/>{once:<br/>(NOTE:  This isn't really any good for anything.  KV is just trying to learn how to play with spells!)}")
          ]]></look>
        </object>
        <command name="kv_destroy">
          <pattern>destroy (#text#)</pattern>
          <script>
            cando = isClone(GetObject(text))
            if ((cando) and not HasAttribute(GetObject(text), "created")) {
              destroy (text)
              msg ("Destroying " + GetObject(text))
              msg ("Done.")
            }
            else {
              error (GetObject(text) + " is a default game object.")
            }
          </script>
        </command>
      </object>
      <object name="The Trick Bag">
        <inherit name="kvtype" />
        <inherit name="openable" />
        <inventoryverbs type="stringlist">
          <value>Look at</value>
          <value>Drop</value>
        </inventoryverbs>
        <usedefaultprefix type="boolean">false</usedefaultprefix>
        <alias>Pixie's Bag of Tricks</alias>
        <hintlist type="stringlist">
          <value>Hint:  Open it.</value>
        </hintlist>
        <take type="boolean">false</take>
        <look>It's your bag of tricks!  You should definitely USE it!</look>
        <attr name="feature_usegive" type="boolean">false</attr>
        <use type="boolean">false</use>
        <feature_container />
        <takemsg>You can't take it.  It's too dangerous to pick up.{notfirst:  Try opening it.}</takemsg>
        <openscript type="script"><![CDATA[
          msg ("You decide to pull out all the stops and open up your bag of tricks. The bag inexplicably vanishes, but you now have access to your CHEAT commands!<br/>")
          MoveObject (px_cheatSpells, kv_Crate Mart)
          px_cheat.parent = kv_Crate Mart
          RemoveObject (The Trick Bag)
        ]]></openscript>
        <displayverbs type="stringlist">
          <value>Look at</value>
          <value>Take</value>
          <value>Open</value>
          <value>Close</value>
        </displayverbs>
        <command name="px_cheat">
          <pattern type="string"><![CDATA[^cheat (?<text1>move|set|get) (?<text2>.+)$]]></pattern>
          <script><![CDATA[
            switch (LCase(text1)) {
              case ("move") {
                o = GetObject(text2)
                if (o = null) {
                  error ("I cannot find a location called " + text2)
                }
                else {
                  game.pov.parent = o
                }
              }
              case ("get") {
                o = GetObject(text2)
                if (o = null) {
                  error ("I cannot find an object called " + text2)
                }
                else {
                  o.parent = player
                }
              }
              case ("set") {
                msg ("Doing " + text2)
                regex = "(?<object>.+)\\.(?<attribute>\\S+)\\s*=\\s*(?<value>.+)"
                if (not IsRegexMatch(regex, text2)) {
                  error ("Sorry, wrong format")
                }
                dict = Populate(regex, text2)
                obj = GetObject(StringDictionaryItem(dict, "object"))
                if (obj = null) {
                  error ("Sorry, object not recognised")
                }
                att = StringDictionaryItem(dict, "attribute")
                value = Eval(StringDictionaryItem(dict, "value"))
                set (obj, att, value)
                msg ("Done")
              }
            }
            // NOW YOU CAN:
            // CHEAT MOVE My bedroom
            // CHEAT GET lantern
            // CHEAT SET player.health=60
            // CHEAT SET Mary.parent = lounge
            // CHEAT SET bronze sword.inventoryverbs = Split("Lookat;Drop;Destroy", ";")
          ]]></script>
        </command>
        <object name="px_cheatSpells">
          <inherit name="plural" />
          <alias>CHEAT Spells</alias>
          <listalias><![CDATA[&nbsp;&nbsp;&nbsp;- CHEAT Spells]]></listalias>
          <displayverbs type="stringlist">
            <value>Look at</value>
          </displayverbs>
          <inventoryverbs type="stringlist">
            <value>Look at</value>
          </inventoryverbs>
          <drop type="boolean">false</drop>
          <usedefaultprefix type="boolean">false</usedefaultprefix>
          <prefix>your</prefix>
          <look type="script"><![CDATA[
            msg ("<br/><pre><code>CHEAT GET #object#</code></pre><br/><br/><pre><code>CHEAT MOVE #room#</pre></code><br/><br/><pre><code>CHEAT SET ????????????</pre></code><br/>")
          ]]></look>
        </object>
      </object>
    </object>
    <object name="kv_emptyObject" />
    <object name="kv_CommandRoom">
      <visible type="boolean">false</visible>
    </object>
  </object>
  <turnscript name="kv_locationAlerts">
    <enabled type="boolean">false</enabled>
    <script>
      if (kv_device.parent = player) {
        gotalert = false
        alertcount = 0
        alerts = GetAllChildObjects(kv_device)
        foreach (o, alerts) {
          if (o.visible) {
            gotalert = true
            alertcount = alertcount + 1
          }
        }
        if (gotalert) {
          if (alertcount = 1) {
            txt = "a new alert!"
          }
          else {
            txt = "new alerts!"
          }
          game.locationmsg = game.locationmsg + " | You have " + txt + " (USE the Quest device.)"
          // JS.updateLocation (CapFirst(GetDisplayName(game.pov.parent)) + " | You have " + txt + " (USE the Quest device.)")
        }
        else {
          game.locationmsg = CapFirst(GetDisplayName(game.pov.parent))
        }
      }
      else {
        game.locationmsg = CapFirst(GetDisplayName(game.pov.parent))
      }
    </script>
  </turnscript>
  <command name="kv_rot">
    <pattern type="string"><![CDATA[^(?<text1>cipher|decipher|code|decode|scramble|decipher) \(\"(?<text2>.*)\", (?<text3>.*)\)$]]></pattern>
    <script><![CDATA[
      text3 = ToInt(text3)
      switch (text1) {
        case ("code") {
          text1 = "cipher"
        }
        case ("scramble") {
          text1 = "cipher"
        }
        case ("decode") {
          text1 = "decipher"
        }
        case ("descramble") {
          text1 = "decipher"
        }
      }
      switch (text1) {
        case ("cipher") {
          if (text3 > 26 or (text3 < 1)) {
            msg ("You must use a number from 1 to 26.")
          }
          else {
            msg ("Your output:")
            msg (Rot(text2, text3))
          }
        }
        case ("decipher") {
          text3 = 26 - text3
          if (text3 > 25 or (text3 < 0)) {
            msg ("You must use a number from 1 to 26.")
          }
          else {
            msg ("<br/><b>Your output:</b>")
            msg (Rot(text2, text3))
            if (Rot(text2, text3) = notepad pencil.unscrambled) {
              msg ("<br/>You read the text and write your best, well-thought-out responses to XM's questions and stuff and seal the envelope.")
              notepad pencil.translatedXM = true
            }
          }
        }
        default {
          msg ("I didn't understand your command.")
        }
      }
    ]]></script>
  </command>
  <command name="kv_real_help">
    <pattern>real help;wtf;wth;what the fuck;what the hell;actual help</pattern>
    <script><![CDATA[
      JS.showPopupFullscreen ("HELP", "This game was designed specifically for The Pixie, so there are MANY commands that are normally not included in a Quest game. <hr/> <b>COMMANDS (*require Scrolls)</b> <table style=\"border:1px solid;font-size:12px\"> <thead style=\"border:1px solid\"> <tr style=\"border:1px solid\"> <th style=\"border:1px solid\">Command</th> <th style=\"border:1px solid\">Pattern(s)</th> <th>Description</th> </tr> </thead> <tbody style=\"border:1px solid\"> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">ls</td> <td style=\"border:1px solid\">ls;dir</td> <td style=\"border:1px solid\">Prints a list of files accessible from 'the local drive'.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">cat FILENAME</td> <td style=\"border:1px solid\"><code>cat #text#;print #text#</code></td> <td style=\"border:1px solid\">Prints the contents of a file on 'the local drive'.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">dance</td> <td style=\"border:1px solid\"><code>dance</code></td> <td style=\"border:1px solid\">You will get down.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">travel*</td> <td style=\"border:1px solid\"><code>travel;t</code></td> <td style=\"border:1px solid\">You will be transported to the hub. (NOTE: This only works while in Crate Mart.)</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">clear</td> <td style=\"border:1px solid\"><code>clear;clr;cls</code></td> <td style=\"border:1px solid\">Clears the screen.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">showme*</td> <td style=\"border:1px solid\"><code>showme</code></td> <td style=\"border:1px solid\">Prints all child items of the current location.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">showme it*</td> <td style=\"border:1px solid\"><code>showme #text#</code></td> <td style=\"border:1px solid\">Displays information about a specific object</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">showme all*</td> <td style=\"border:1px solid\"><code>showme all</code></td> <td style=\"border:1px solid\">Prints a list of all game objects.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">msg</td> <td style=\"border:1px solid\"><code>msg (#text#)</code></td> <td style=\"border:1px solid\">Prints a message OR an attribute.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">JS...</td> <td style=\"border:1px solid\"><code>JS.#text#</code></td> <td style=\"border:1px solid\">If you don't know what this can do, don't fool with it!</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">CloneObject*</td> <td style=\"border:1px solid\"><code>cloneobject (#text#)</code></td> <td style=\"border:1px solid\">Clones an object.<br>(NOTE: This does not MOVE the object!)</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">destroy*</td> <td style=\"border:1px solid\"><code>destroy (#text#)</code></td> <td style=\"border:1px solid\">Destroys an object.</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">gamename</td> <td style=\"border:1px solid\"><code>gamename #text#</code></td> <td style=\"border:1px solid\">Changes the game's name (takes immediate effect)</td> </tr> <tr style=\"border:1px solid\"> <td style=\"border:1px solid\">CHEAT*</td> <td style=\"border:1px solid\"><code>^cheat (?move|set|get) (?.+)$</code></td> <td style=\"border:1px solid\">Pixie knows what this does. (It's his command, after all!)</td> </tr></tbody></table> <hr/>  There is also a QUEST device in the player's inventory.(Just enter USE QUEST DEVICE to access the available options.) <hr/> IF YOU GET STUCK... Enter HINT or <a href=\"https://textadventures.co.uk/forum/quest/post\">ask for help on the forum</a>.                        ")
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="kv_reverse">
    <pattern>reverse #text#</pattern>
    <script><![CDATA[
      l = Split(text, " ")
      msg (l)
      n = ListCount(l)
      n = n - 1
      msg ("<br/><b>Your output:</b>")
      textString = ""
      while (not n < 0) {
        foreach (w, l) {
          // OutputTextNoBr (ListItem(l, n) + " ")
          textString = textString + ListItem(l, n) + " "
          n = n - 1
        }
      }
      msg (textString)
      if (textString = notepad pencil.unreversed) {
        msg ("<br/>You read the text and write your best, well-thought-out responses to XMs questions and stuff and seal the envelope.")
        notepad pencil.translatedXM = true
      }
    ]]></script>
  </command>
  <command name="kv_view_docs">
    <pattern>view the Quest documentation</pattern>
    <script>
      msg ("Opening the Quest documentation in your browser...")
      JS.goUrl ("https://docs.textadventures.co.uk/quest/]")
    </script>
  </command>
  <command name="kv_viewAlerts">
    <pattern>view alerts</pattern>
    <script>
      HideOutputSection (game.menuoutputsection)
      viewAlerts
    </script>
  </command>
  <command name="kv_view_bookmarks">
    <pattern>view bookmarks;bookmarks</pattern>
    <script><![CDATA[
      HideOutputSection (game.menuoutputsection)
      if (ListCount(kv_device.favorites) > 0) {
        ShowMenu ("What bookmark would you like to view?", kv_device.favorites, true) {
          msg ("> " + result)
          x = GetObject(result)
          // HandleSingleCommand ("X " + x)
          if (HasAttribute(x, "fav")) {
            do (x, "fav")
          }
          else {
            msg ("{img:internalError.png}")
          }
        }
      }
      else {
        msg ("You have no bookmarks.")
      }
    ]]></script>
  </command>
  <command name="kv_clone">
    <pattern>cloneobject (#text#)</pattern>
    <script><![CDATA[
      if (player.can_clone) {
        foreach (o, AllObjects()) {
          if (o = GetObject(text)) {
            if (StartsWith(o.name, "Dark")) {
              Ask ("Are you sure you want to do that?  (Don't you think there are enough of him already?)<br/><br/>Would you REALLY like to clone DL?") {
                msg ("@@@open@@@ OK, fine! Be that way! @@@close@@@<br/><br/>Another clone of DarkLizerd springs into existence and runs off to join the rest to translate Basic to Quest... (hopefully, unless they start fighting again about who is the original and who is the clone.)")
              }
            }
            else if (HasAttribute(o, "nocopy")) {
              if (o.nocopy) {
                msg ("You can't clone " + GetDisplayName(o) + " due to copy-protection.")
              }
              else {
                CloneObject (o)
                msg ("Done.")
                o.clone = true
              }
            }
            else if (o = kv_token of appreciation) {
              MoveObject (kv_token of appreciation1, player)
            }
            else {
              CloneObject (o)
              msg ("Done.")
              o.clone = true
            }
          }
        }
      }
      else {
        msg ("<pre><code style=\"color:red;background:lightgray;padding:4px\">player.can_clone = false</code></pre>")
      }
    ]]></script>
  </command>
  <command name="kv_cat">
    <pattern>cat #text#;print #text#</pattern>
    <script><![CDATA[
      if (StartsWith(text, "\"")) {
        ts = Split(text, "\"")
        text = ListItem(ts, 1)
      }
      if (EndsWith(text, "aslx")) {
        error ("You can't view .aslx files, Pixie!")
      }
      msg ("Displaying file content...<br/><iframe  id=\"iframepre\" style=\"background:khaki;color:green;font-family:'Droid Sans Mono';border-radius:25px\" width=\"100%\" height=\"550px\" src=\"" + GetFileURL("" + text + "") + "\" />")
    ]]></script>
  </command>
  <command name="kv_JSrequest">
    <pattern>request (#text#)</pattern>
    <script>
      // msg (text)
      text = Split(text, ",")
      // msg (StringListItem(text, 0))
      t1 = (StringListItem(text, 0))
      // msg (StringListItem(text, 1))
      t2 = (StringListItem(Split((StringListItem(Split((StringListItem(text, 1)), " "), 1)), "\""), 1))
      // msg (t2)
      switch (t1) {
        case ("Hide") {
          request (Hide, t2)
          if (t2 = "Panes") {
            game.showpanes = false
          }
        }
        case ("Show") {
          request (Show, t2)
          if (t2 = "Panes") {
            game.showpanes = true
          }
        }
        default {
          msg ("\"We're still working on setting up everything, Pix. (You know how THAT is, right?)\"")
        }
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="kv_gamename">
    <pattern>gamename #text#</pattern>
    <script><![CDATA[
      request (GameName, text)
      game.gamename = text
      ClearScreen
      PrintCentered ("<br/>{img:px_avatar.png}<br/><span style=\"font-size:260%\">{game.gamename}</span><br/><span style=\"font-size:145%\">by {game.author}</span><br/>")
      ShowRoomDescription
      game.suppressturnscripts = true
    ]]></script>
  </command>
  <command name="kv_msg_attribute">
    <pattern>msg (#text#)</pattern>
    <script>
      text = "{" + text + "}"
      msg (text)
    </script>
  </command>
  <command name="kv_log">
    <pattern>log #text#</pattern>
    <script>
      Log (text)
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="kv_ls">
    <pattern>ls</pattern>
    <script><![CDATA[
      msg ("<iframe style=\"background:ghostwhite;box-shadow:0px 0px 8px black;text-shadow:0px 0px 4px green;font-family:monospace;border-radius:25px\" width=\"100%\" height=\"350px\"  src=\"" + GetFileURL("ls.txt") + "\" />")
      // msg ("This doesn't work...<br/><br/><br/><style><br/>  .thumb {<br/>    height: 75px;<br/>    border: 1px solid #000;<br/>    margin: 10px 5px 0 0;<br/>  }</style><br/><br/><input type=\"file\" id=\"files\" name=\"files[]\" multiple /><br/><output id=\"list\"></output><br/><br/><script><br/><br/><br/>  function handleFileSelect(evt) {  var files = evt.target.files;    for (var i = 0, f; f = files[i]; i++) {   continue;   var reader = new FileReader();      reader.onload = (function(theFile) {       return function(e) { var span = document.createElement('span');     span.innerHTML = '"+GetFileData(theFile.name)+"';         document.getElementById('list').insertBefore(span, null);      };     })(f);     reader.readAsDataURL(f);    }  }  document.getElementById('files').addEventListener('change', handleFileSelect, false);</script>")
    ]]></script>
  </command>
  <command name="kv_scopecommands">
    <pattern>scopecommands;scopecommands();scopecommands ()</pattern>
    <script><![CDATA[
      HideOutputSection (game.menuoutputsection)
      msg ("Remember: you can use <code style=\"color:red\">msg (kv_clone.pattern)</code> to view attributes!<br/><br/>")
      wait {
        msg ("<br/><b>[ Listing commands... ]</b><br/>")
        // game.menuoutputsection = StartNewOutputSection()
        foreach (cmd, ScopeCommands()) {
          msg (cmd.name)
          // msg ("")
        }
        // EndOutputSection (game.menuoutputsection)
        // wait {
          // HideOutputSection (game.menuoutputsection)
          // /}
      }
    ]]></script>
  </command>
  <command name="kv_SetForegroundColour">
    <pattern>SetForegroundColour ("#text#");SetForegroundColor ("#text#")</pattern>
    <script>
      SetForegroundColour (text)
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="kv_setbackgroundcolour">
    <pattern>SetBackgroundColour ("#text#");SetBackgroundColor ("#text#")</pattern>
    <script>
      SetBackgroundColour (text)
      game.suppressturnscripts = true
    </script>
  </command>
  <command name="kv_dir">
    <pattern>dir</pattern>
    <script><![CDATA[
      msg ("<iframe style=\"background:darkkhaki;font-family:monospace;border-radius:25px\" width=\"100%\" height=\"550px\"  src=\"" + GetFileURL("dir.txt") + "\" />")
    ]]></script>
  </command>
  <command name="kv_glitchTest">
    <pattern>statusmove;glitch test</pattern>
    <script>
      statusmove
    </script>
  </command>
  <turnscript name="kv_command_prompt_randomness">
    <enabled type="boolean">false</enabled>
    <script><![CDATA[
      if (not game.pov.currentcommand = null) {
        if (game.pov.currentcommand <> "quit") {
          cmdprompt = (PickOneString(game.cmdprompts))
          request (SetInterfaceString, "TypeHereLabel=" + cmdprompt + "")
        }
      }
    ]]></script>
  </turnscript>
  <turnscript name="kv_scoring_gamename">
    <enabled type="boolean">false</enabled>
    <script><![CDATA[
      switch (game.gamename) {
        case ("Pixie Kicks Ass") {
          firsttime {
            IncreaseScore (1)
            list add (game.scoreList, "Changed the game's name to Pixie Kicks Ass: 1 point")
            msg ("<center>{b:[ Your score has increased by 1. ]}</center>")
          }
        }
      }
    ]]></script>
  </turnscript>
  <turnscript name="kv_shardintheroom">
    <enabled type="boolean">false</enabled>
    <script>
      if (game.pov.parent = kv_green_shard.parent) {
        JS.eval ("$('#divOutput').css('text-shadow', '0 0 2px green,0 0 5px black,0 0 15px darkgreen')")
      }
      else if (rh_mini_crate = kv_green_shard.parent and rh_mini_crate.isopen) {
        JS.eval ("$('#divOutput').css('text-shadow', '0 0 2px green,0 0 5px black,0 0 15px darkgreen')")
      }
      else {
        JS.eval ("$('#divOutput').css('text-shadow', 'none')")
      }
    </script>
  </turnscript>
  <command name="kv_fake_travel">
    <pattern>travel;t</pattern>
    <script>
      msg ("Surprisingly, nothing happens.")
    </script>
  </command>
  <command name="kv_dance_anywhere">
    <pattern>dance;get down;boogie;get jiggy with it</pattern>
    <script><![CDATA[
      msg ("You do a little dance.<br/>")
      if (ListContains(ScopeReachable(), Richard Headkid)) {
        msg ("<br/>RH taps his foot and bobs his head as he works on the group project.<br/>")
      }
      else if (KV.parent = game.pov.parent) {
        msg ("<br/>KV throws down a piece of cardboard. <br/><br/>You bust a couple of moves on it.<br/>")
      }
      if (ListContains(ScopeReachable(), DarkLizerd)) {
        msg ("<br/>DL walks the dinosaur.<br/>")
      }
      if (ListContains(ScopeReachable(), Dark_Lizerd)) {
        msg ("<br/>DL walks the dinosaur.<br/>")
      }
      if (ListContains(ScopeReachable(), XanMag)) {
        msg ("<br/>XM sips his beer and dances along to the lack of a beat.<br/>")
      }
    ]]></script>
  </command>
  <command name="kv_Asking the room about">
    <pattern>ask about #text#</pattern>
    <script>
      npcs = NewObjectList()
      opts = NewStringDictionary()
      foreach (o, GetDirectChildren(game.pov.parent)) {
        if (HasAttribute(o, "ask")) {
          list add (npcs, o)
          dictionary add (opts, o.name, GetDisplayAlias(o))
        }
      }
      if (ListCount(npcs) = 0) {
        msg ("You can ask, but no one is here to tell you anything.")
      }
      else if (ListCount(npcs) = 1) {
        DoAskTell (ObjectListItem(npcs, 0), text, "ask", "askdefault", "DefaultAsk")
      }
      else {
        game.askabouttext = text
        ShowMenu ("Ask who?", opts, true) {
          if (not result = null) {
            o = GetObject(result)
            DoAskTell (o, game.askabouttext, "ask", "askdefault", "DefaultAsk")
          }
        }
      }
    </script>
  </command>
  <turnscript name="kv_watchforhelp">
    <enabled />
    <script><![CDATA[
      if (not game.pov.currentcommand = null) {
        if (game.pov.currentcommand = "help") {
          msg ("<hr/><center><b>You can enter {command:REAL HELP} for more game-specific information.</b></center><hr/><br/>")
        }
      }
    ]]></script>
  </turnscript>
  <turnscript name="kv_panesOption">
    <enabled type="boolean">false</enabled>
    <script>
      alertCheck
    </script>
  </turnscript>
  <turnscript name="kv_hasalerts">
    <enabled type="boolean">false</enabled>
    <script><![CDATA[
      kv_device.havealerts = false
      kv_device.alertsnow = GetDirectChildren(kv_device)
      // msg ("kv_hasalerts:")
      // msg (kv_device.alertsnow)
      if (ListCount(kv_device.alertsnow) > 0) {
        kv_device.havealerts = true
      }
    ]]></script>
  </turnscript>
  <verb name="xm_change">
    <property>change</property>
    <pattern>change</pattern>
    <defaultexpression>"You can't change " + object.article + "."</defaultexpression>
  </verb>
  <verb name="xm_watch">
    <property>watch</property>
    <pattern>watch</pattern>
    <defaultexpression>"You can't watch " + object.article + "."</defaultexpression>
  </verb>
  <command name="kv_clear">
    <pattern>Clear the screen;clear;clr;cls</pattern>
    <script>
      ClearScreen
      JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px #296231;")
      JS.setCss ("#location, #status, .ui-widget-header", "background-color:#296231;border:1px solid #296231;background-image:none;")
    </script>
  </command>
  <command name="kv_JStext">
    <pattern>JS.#text#</pattern>
    <script>
      msg (text)
      JS.addText (text)
      JS.eval (text)
      if (text = "uiShow('#gamePanes')") {
        game.showpanes = true
      }
      if (text = "uiHide('#gamePanes')") {
        game.showpanes = false
      }
      if (text = "eval (\"$('#gamePanes').css('display', 'none')\")") {
        game.showpanes = false
        // msg ("WORKED")
      }
      if (text = "eval (\"$('#gamePanes').css('display', 'block')\")") {
        game.showpanes = true
        // msg ("WORKED")
      }
      game.notarealturn = true
    </script>
  </command>
  <turnscript name="completelyThanked">
    <enabled type="boolean">false</enabled>
    <script><![CDATA[
      if (XanMag.TaskCount = 0) {
        if (kv_token of appreciation.parent = player) {
          player.thanked = true
          msg ("<br/><center><b>[ SYSTEM MESSAGE:  You now have access to Crate Mart! ]</b></center><br/>")
          DisableTurnScript (completelyThanked)
        }
      }
    ]]></script>
  </turnscript>
  <object name="daydreamroomXM">
    <description>You take a look around the room and it screams XM!  Yikes.</description>
    <usedefaultprefix type="boolean">false</usedefaultprefix>
    <alias>Xan's Room o' Thoughts</alias>
    <object name="GalGadotXM">
      <inherit name="namedfemale" />
      <alias>Gal Gadot</alias>
      <alt type="stringlist">
        <value>bartender</value>
        <value>girl</value>
        <value>woman</value>
        <value>chick</value>
      </alt>
      <takemsg>Wouldn't you like that?!?  But, this version belongs to Xan, so hands off!</takemsg>
      <look>Good lord this woman is attractive.  She's so hot you'd bet she could literally start a fire.</look>
      <askdefault type="script">
        msg ("\"I'm not sure i know what you are talking about.\"  She looks into your eyes.  \"Sorry.\"")
      </askdefault>
      <ask type="scriptdictionary">
        <item key="pix pixie andy myself me">
          firsttime {
            msg ("\"Good to see you again, Pixie.  I think you are wonderful.  Too bad, in here, I 'belong' to XanMag.  He's sweet and all but he is no you!\"  She winks in your direction.")
          }
          otherwise {
            msg ("\"Hey again, Pix.  You are awesome.\"  She winks and the whatever the hell job she is doing here.")
          }
        </item>
        <item key="xan xanmag mag magoo xanadumagoo xanadu xanadumag xm"><![CDATA[
          firsttime {
            msg ("\"Oh,\" she says, \"He <i>is</i> the love of my life.\"  Somehow her sincerity is doubted by the placement of air quotes when she said 'love of my life'.")
          }
          otherwise {
            msg ("\"He's a good dude.\"")
          }
        ]]></item>
        <item key="blunt weed cannabis plantmaryjane marijuana mari dope dank">
          firsttime {
            msg ("She winks at you and says, \"Yeah.  That stuff is not too bad, huh?\"  She giggles and returns to her work in the daydream room.")
          }
          otherwise {
            msg ("Gal looks at you, winks, and gives you the universal toke sign as she raises her thumb and forefinger to her lips. ")
          }
        </item>
        <item key="blerk">
          msg ("\"Single-handedly, the GREATEST friend I have ever had.\"  She looks at you and continues, \"No offense of course.  He and Xan are good friends.  The only reason I stay here is that I owe XM a huge favor for saving my little Blerk.\"")
        </item>
        <item key="beer bar bartender taps tap bars beers"><![CDATA[
          msg ("\"Xan does love his beer.\"  She looks at you and rolls her eyes playfully, \"XM thinks me behind a bar is incredibly <i>hot</i> for some reason.  I guess I should be flattered.\"")
        ]]></item>
        <item key="me myself pix pixie thepixie"><![CDATA[
          firsttime {
            msg ("Well, well, well,\" Gal says with a sheepish smile.  \"Now doesn't <i>THAT</i> sound much more fascinating than...\" <br/><br/>Gal pauses and winks before continuing, \"Please don't mention that to XanMag.  I actually quite like being a figment of his imagination, but he's... he's...\" It seems Gal is having quite the trouble finding the words.<br/><br/>\"He's just so, Xan.  You know what I mean, Pix?\"  <br/><br/>With a wink and a smile, Gal goes about her business.")
          }
          otherwise {
            msg ("\"You are very interesting, Pix.\"  She blows you a kiss and continues working.")
          }
        ]]></item>
        <item key="music tunes beats">
          msg ("\"Yep!  I do love music.\"  Gal gives a thumbs up.  \"Xan has made sure I am fluent in the topic of music.\"")
        </item>
      </ask>
    </object>
    <object name="PlantXM">
      <alias>plant</alias>
      <alt type="stringlist">
        <value>weed</value>
        <value>cannabis</value>
        <value>dank</value>
        <value>bud</value>
        <value>buds</value>
      </alt>
      <smoke>You can't smoke the whole plant you goof!</smoke>
      <smell>It smells like you'll be writing a new text adventure after you smoke it!  (All the words will will just FALL INTO PLACE!)</smell>
      <take type="script">
        if (GetBoolean(PlantXM, "weedableXM")) {
          firsttime {
            msg ("You grab a few of the finer looking buds from the plant.")
            AddToInventory (budsXM)
            budsXM.visible = true
          }
          otherwise {
            msg ("You are no weed-head.  Are you?  Either way... if you take any more, the cyber cops are likely to break into Xan's thoughts and punish you forever.")
          }
        }
        else {
          msg ("Ummm... tempting, but also illegal in most places.  That and it is not yours to take.")
        }
      </take>
      <look type="script">
        firsttime {
          msg ("You inspect the plant.  Hey.  This looks familiar.  It smells familiar.  This is cannabis, man.")
          SetObjectFlagOn (PlantXM, "weedviewedXM")
        }
        otherwise {
          msg ("It's weed.")
        }
      </look>
    </object>
    <object name="budsXM">
      <visible type="boolean">false</visible>
      <look>It's a few, ready-to-burn buds.</look>
      <feature_usegive />
      <alias>buds</alias>
      <smell>Smells like you'll be writing a new text adventure after you smoke it!  (All the words will will just FALL INTO PLACE!)</smell>
      <take type="script"><![CDATA[
        if (GetBoolean(PlantXM, "weedableXM")) {
          msg ("You snatch a few buds off the plant and pocket them.")
          AddToInventory (budsXM)
          budsXM.visible = true
          firsttime {
            IncreaseScore (4)
            PrintCentered ("<b>[Your score has increased by 4!]</b>")
            list add (game.scoreList, "Dabbled in a little botany: 4 points")
          }
          otherwise {
            msg ("Already taken some.  Don't need more!")
          }
        }
        else {
          msg ("These is XM's plants, right?  Better not take it until you at least get permission.")
        }
      ]]></take>
      <giveto type="scriptdictionary">
        <item key="XanMag">
          msg ("\"Sweet, Pix.\"  Xan grabs the weed and rolls up two nice blunts.  He tucks one away in his pocket and hands the other to you.  \"Thanks, Pix.  For you.\"")
          RemoveObject (budsXM)
          MakeObjectVisible (bluntXM)
          AddToInventory (bluntXM)
        </item>
        <item key="Dark_Lizerd">
          msg ("DL ignores you offering.")
        </item>
        <item key="DarkLizerd">
          msg ("DL ignores you offering.")
        </item>
        <item key="hegemonkhan">
          msg ("HK scrunches up his nose and offers a polite \"No thank you.\"")
        </item>
        <item key="KV">
          msg ("He waves it away.  \"Sorry!  Can't get a good job if you touch that stuff!\"")
        </item>
        <item key="bartender">
          msg ("Gal looks at you and winks.  \"If only, sweetheart, but I cannot.  I'm on the job!\"  She returns to working diligently behind the bar.")
        </item>
        <item key="GalGadotXM">
          msg ("\"And what should I do with that, good sir?  Roll it up and then we can talk.\"  She smiles and winks at you.")
        </item>
        <item key="Richard Headkid">
          msg ("He sniffs it, then sighs.  \"If only society weren't so full of it...\"")
        </item>
      </giveto>
    </object>
    <object name="posterXM">
      <look>There is a strange poster hanging on the wall.  You see a penguin, apparently named 'Ralph' (inferred from the crooked nametag pinned to his chest), with a few dark feathers poking from his beak.  He is wearing a shit-eating grin and looks prepared to jump right out of the poster.  Strange.</look>
      <takemsg>This sweet stuff is all digital.  You cannot take the poster.</takemsg>
      <scenery type="boolean">false</scenery>
      <alias>poster</alias>
      <alt type="stringlist">
        <value>ralph</value>
      </alt>
    </object>
    <object name="beercoolerXM">
      <inherit name="openable" />
      <look>It's a cooler-fridge with a door made of glass.  It appears there are  lots of fancy beers inside.</look>
      <feature_container />
      <open type="boolean">false</open>
      <close type="boolean">false</close>
      <alias>beer cooler</alias>
      <takemsg>You cannot take the cooler or the beers within.</takemsg>
      <openscript type="script">
        msg ("This fridge is unopenable.  If you want beer, maybe you should try the bar next door?")
      </openscript>
      <closescript type="script">
        msg ("It's already closed.")
      </closescript>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Open</value>
        <value>Close</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Open</value>
        <value>Close</value>
      </inventoryverbs>
    </object>
    <object name="TVXM">
      <inherit name="switchable" />
      <alias>television</alias>
      <look>Currently the television is showing {random:some pretty raunchy porn.:an NFL football game.:a Reds baseball game.:some European soccer match.:Impractical jokers.:a TV show called The League.:a NatGeo special called 'Einstein'.:what appears to be an Iron Man movie.:one of the J.R.R Tolkien movies.:Blazing Saddles.:Planes, Trains, and Automobiles.:Space Balls.:one of the 'Apes' movies.}</look>
      <change>There doesn't appear to be a 'clicker'.</change>
      <watch>Currently the television is showing {random:some pretty raunchy porn.:an NFL football game.:a Reds baseball game.:some European soccer match.:Impractical jokers.:a TV show called The League.:a NatGeo special called 'Einstein'.:what appears to be an Iron Man Movie.:one of the J.R.R Tolkien movies.:Blazing Saddles.:Planes, Trains, and Automobiles.:Space Balls.:one of the 'Apes' movies.}</watch>
      <feature_switchable />
      <switchedon />
      <switchonmsg>It's already on.</switchonmsg>
      <switchoffmsg>There doesn't appear to be a remote.  I guess this TV stays on.</switchoffmsg>
      <alt type="stringlist">
        <value>tv</value>
        <value>telly</value>
        <value>boobtube</value>
        <value>boob tube</value>
      </alt>
      <displayverbs type="stringlist">
        <value>Look at</value>
        <value>Take</value>
        <value>Switch on</value>
        <value>Switch off</value>
      </displayverbs>
      <inventoryverbs type="stringlist">
        <value>Look at</value>
        <value>Use</value>
        <value>Drop</value>
        <value>Switch on</value>
        <value>Switch off</value>
      </inventoryverbs>
    </object>
    <command name="SexGadot2 xm CMD">
      <pattern type="string"><![CDATA[^(fuck|sex|bang|do|penetrate|hump|kiss|hug|flirt with) (?<object1>.*)$]]></pattern>
      <script><![CDATA[
        if (object1 = GalGadotXM) {
          firsttime {
            msg ("You make your move on Gal Gadot and before you can say \"uh...uhhhh.... oh, oh, oh, ooohhhh... aaahhhhhhh\" she politely stops you and says, \"This,\" gesturing to her body, \"only belongs to XanMag.\"  She returns to working behind the bar.  Damn that XM.  I guess you too have <i>your own</i> fantasies, yes?")
          }
          otherwise {
            msg ("You've tried that and XanMag's Gal Gadot has put the kibosh on that.  Damn him.")
          }
        }
        else {
          error ("This is not that kind of game!")
        }
      ]]></script>
    </command>
    <object name="computerXM">
      <alias>computer</alias>
      <look>It's a really sweet computer equipped with the most recent and sleekest updates and hardware.</look>
      <feature_usegive />
      <use type="script"><![CDATA[
        msg ("A great coder like you <i>could</i> probably hack into this system, but this is XanMag's and the normal laws of computer programming don't apply here.  It is impenetrable.")
      ]]></use>
    </object>
    <object name="Dean Koontz Library XM">
      <look>The bookcase, or the "library", is filled with bookend-to-bookend novels written by Dean Koontz.</look>
      <alt type="stringlist">
        <value>books</value>
        <value>book</value>
      </alt>
      <takemsg>The books are not yours to take.  Go buy them and support Dean Koontz.</takemsg>
      <read><![CDATA[You grab a random Dean Koontz book off the shelf and start to read through it.  <i>Pretty good</i> you think before returning it to the shelf.]]></read>
      <alias>Dean Koontz Library</alias>
    </object>
    <object name="pedestalXM">
      <inherit name="surface" />
      <alias>pedestal</alias>
      <feature_container />
      <hidechildren />
      <listchildren />
      <takemsg>Way too heavy.</takemsg>
      <look type="script"><![CDATA[
        if (Contains (pedestalXM,IdeaInAnEnvelopeXM)) {
          msg ("It's an ivory-white pedestal.  On the vertical surface of the pedestal are two words:  <b>\"Prima Facie\"</b>.  On top of the pedestal is a sealed envelope.")
        }
        else if (Contains (pedestalXM,envelopeXM)) {
          msg ("It's an ivory-white pedestal.  On the vertical surface of the pedestal are two words:  <b>\"Prima Facie\"</b>.  On top of the pedestal is an envelope.")
        }
        else {
          msg ("It's an ivory-white pedestal.  There is nothing on it.  On the vertical surface of the platform of the pedestal are two words:  <b>\"Prima Facie\"</b>.  ")
        }
      ]]></look>
      <addscript type="script"><![CDATA[
        if (object = IdeaInAnEnvelopeXM) {
          msg ("Okay. Done.")
          MoveObject (IdeaInAnEnvelopeXM, pedestalXM)
          msg ("<center><b>[YOUR SCORE HAS INCREASED BY 15!]</b></center>")
          list add (game.scoreList, "Gave Xan an idea: 15 points")
          IncreaseScore (15)
        }
        else if (object = envelopeXM) {
          msg ("Okay.  I guess.  Although I don't really see the purpose of that.")
          MoveObject (envelopeXM, pedestalXM)
        }
        else {
          msg ("If you put <i>THAT</i> on the pedestal, Xan would be very confused.")
        }
      ]]></addscript>
      <object name="envelopeXM">
        <look>It's an empty envelope.</look>
        <alias>envelope</alias>
        <take />
        <feature_usegive />
        <attr name="feature_container" type="boolean">false</attr>
        <isopen type="boolean">false</isopen>
        <open type="boolean">false</open>
        <close type="boolean">false</close>
        <hidechildren />
        <addscript type="script">
          switch (object) {
            case (notepad pencil) {
              if (notepad pencil.translatedXM) {
                msg ("Okay.  Done.")
                RemoveObject (notepad pencil)
                RemoveObject (envelopeXM)
                MoveObject (IdeaInAnEnvelopeXM, pedestalXM)
              }
              else {
                msg ("Done.")
                MoveObject (notepad pencil, envelopeXM)
              }
            }
            default {
              msg ("You can't put " + object.article + " in there.")
            }
          }
        </addscript>
        <giveto type="scriptdictionary">
          <item key="XanMag"><![CDATA[
            msg ("Xan looks at the envleope with a bit of confusion.  \"What's this about, Pix?\"  Xan returns to his duties.<br/><br/>Evidently he has no interest in it.")
          ]]></item>
        </giveto>
      </object>
    </object>
    <object name="notepad pencil">
      <alias>notepad and pencil</alias>
      <alt type="stringlist">
        <value>notepad</value>
        <value>pencil</value>
      </alt>
      <take />
      <drop type="boolean">false</drop>
      <dropmsg> Better not.</dropmsg>
      <unscrambled>Ch1 of Prima Facie Personal Notes: Is this introduction good enough? Does the main character come across as too pampered? Is it clear that Caden is a down-to-earth hard-working family man with healthy morals? Caden looked at his watch and huffed. 12:15. It had been five hours since breakfast, and fifteen minutes until his scheduled lunch, and Caden was still stuck in a board meeting. Mr. Fred Griggs was presenting his thirteenth sales pitch this year and it was only the first week of August. Mr. Griggs was now trying to convince the board of Penneypaid Toys to invest in Army Figurines who were “militarily correct”. Mr. Griggs had been presenting sales pitches to Penneypaid for nearly twenty-five years and had been effective in only three of his business proposals. Those three successes, however, had been enough to make James W. Penney, CEO, and Mr. Griggs extremely wealthy partners. Caden’s worth, on the other hand, was not rapidly approaching one hundred twenty million dollars. In fact, it was not even an entire percent of that. Although Caden admittedly made enough to support a wonderful family of four, he was certainly underpaid for the time and effort he had given Mr. Penney. Roughly nine years with this lucrative toy company had been enough to earn him a beautifully rustic half-million dollar mini-mansion, top of the line clothes for his twin children, Derek and Julie, and his 2012 Mercedes E Class. From the looks of it, the Grant’s were very wealthy, and Caden would never disagree, but at times like this he thought that maybe he would better serve and reap better rewards if he followed in dad’s footsteps, or pursued his dream as a cartoon illustrator. It was that dream that opened the Penneypaid’s door shortly after his graduation from the University of Georgia in August of 1994. Penneypaid happened to be looking for a creative arts and advertising director during the time of Caden’s internship at the company. Mr. Penney had offered him the job in June pending graduation. With a wedding to plan, mother’s retirement, and no guarantee for future employment, he jumped at the opportunity. It had only taken five years to win the Department Chair of Advertising seat. The new job demanded more hours and more responsibilities, which made being late for lunch with your wife even more unbearable. He looked at his watch again. 12:25. Mr. Griggs seemed to be winding down. The Tour de Griggs always ended with the presentation of a small gift box to each of the department chairs. The boxes, always bright blue and tied with a gold ribbon, were now being handed around the table. The final box was handed to Mr. Penney, as always as a formality, and Mr. Griggs thanked each of the members for their time, closed his briefcase, and walked confidently from the boardroom.</unscrambled>
      <unreversed>Ch1 of Prima Facie Personal Notes: Is this introduction good enough? Does the main character come across as too pampered? Is it clear that Caden is a down-to-earth hard-working family man with healthy morals? Caden looked at his watch and huffed. 12:15. It had been five hours since breakfast, and fifteen minutes until his scheduled lunch, and Caden was still stuck in a board meeting. Mr. Fred Griggs was presenting his thirteenth sales pitch this year and it was only the first week of August. Mr. Griggs was now trying to convince the board of Penneypaid Toys to invest in Army Figurines who were “militarily correct”. Mr. Griggs had been presenting sales pitches to Penneypaid for nearly twenty-five years and had been effective in only three of his business proposals. Those three successes, however, had been enough to make James W. Penney, CEO, and Mr. Griggs extremely wealthy partners. Caden’s worth, on the other hand, was not rapidly approaching one hundred twenty million dollars. In fact, it was not even an entire percent of that. Although Caden admittedly made enough to support a wonderful family of four, he was certainly underpaid for the time and effort he had given Mr. Penney. Roughly nine years with this lucrative toy company had been enough to earn him a beautifully rustic half-million dollar mini-mansion, top of the line clothes for his twin children, Derek and Julie, and his 2012 Mercedes E Class. From the looks of it, the Grant’s were very wealthy, and Caden would never disagree, but at times like this he thought that maybe he would better serve and reap better rewards if he followed in dad’s footsteps, or pursued his dream as a cartoon illustrator. It was that dream that opened the Penneypaid’s door shortly after his graduation from the University of Georgia in August of 1994. Penneypaid happened to be looking for a creative arts and advertising director during the time of Caden’s internship at the company. Mr. Penney had offered him the job in June pending graduation. With a wedding to plan, mother’s retirement, and no guarantee for future employment, he jumped at the opportunity. It had only taken five years to win the Department Chair of Advertising seat. The new job demanded more hours and more responsibilities, which made being late for lunch with your wife even more unbearable. He looked at his watch again. 12:25. Mr. Griggs seemed to be winding down. The Tour de Griggs always ended with the presentation of a small gift box to each of the department chairs. The boxes, always bright blue and tied with a gold ribbon, were now being handed around the table. The final box was handed to Mr. Penney, as always as a formality, and Mr. Griggs thanked each of the members for their time, closed his briefcase, and walked confidently from the boardroom.</unreversed>
      <look type="script"><![CDATA[
        if (GetBoolean(notepad pencil, "scribedXM")) {
          msg ("Aside from the XM doodles, you have scribed what you viewed from the swirling wall of text while under the influence of some killer weed.  It reads:<br/><br/>gtfwiwttr. ymj kwtr htsknijsyqd bfqpji fsi gwnjkhfxj, mnx hqtxji ynrj, ymjnw ktw rjrgjwx ymj tk jfhm ymfspji Lwnllx Rw. fsi ktwrfqnyd, f fx fqbfdx fx Ujssjd, Rw. yt mfsiji bfx gtc knsfq Ymj yfgqj. ymj fwtzsi mfsiji gjnsl stb bjwj wnggts, ltqi f bnym ynji fsi gqzj gwnlmy fqbfdx gtcjx, Ymj hmfnwx. ijufwyrjsy ymj tk jfhm yt gtc lnky xrfqq f tk uwjxjsyfynts ymj bnym jsiji fqbfdx Lwnllx ij Ytzw Ymj itbs. bnsinsl gj yt xjjrji Lwnllx Rw. 12:25. flfns. bfyhm mnx fy qttpji Mj zsgjfwfgqj. rtwj jajs bnkj dtzw bnym qzshm ktw qfyj gjnsl rfij bmnhm wjxutsxngnqnynjx, rtwj fsi mtzwx rtwj ijrfsiji otg sjb Ymj xjfy. Fiajwynxnsl tk Hmfnw Ijufwyrjsy ymj bns yt djfwx knaj yfpjs tsqd mfi Ny tuutwyzsnyd. ymj fy ozruji mj jruqtdrjsy, kzyzwj ktw lzfwfsyjj st fsi wjynwjrjsy, rtymjw’x uqfs, yt bjiinsl f Bnym lwfizfynts. ujsinsl Ozsj ns otg ymj mnr tkkjwji mfi Ujssjd Rw. htrufsd. ymj fy nsyjwsxmnu Hfijs’x tk ynrj ymj izwnsl inwjhytw fiajwynxnsl fsi fwyx hwjfynaj f ktw qttpnsl gj yt mfuujsji Ujssjdufni 1994. tk Fzlzxy ns Ljtwlnf tk Zsnajwxnyd ymj kwtr lwfizfynts mnx fkyjw xmtwyqd ittw Ujssjdufni’x ymj tujsji ymfy iwjfr ymfy bfx Ny nqqzxywfytw. hfwytts f fx iwjfr mnx uzwxzji tw kttyxyjux, ifi’x ns ktqqtbji mj nk wjbfwix gjyyjw wjfu fsi xjwaj gjyyjw btzqi mj rfdgj ymfy ymtzlmy mj ymnx qnpj ynrjx fy gzy inxflwjj, sjajw btzqi Hfijs fsi bjfqymd, ajwd bjwj Lwfsy’x ymj ny, tk qttpx ymj Kwtr Hqfxx. J Rjwhjijx 2012 mnx fsi Ozqnj, fsi Ijwjp hmnqiwjs, ybns mnx ktw hqtymjx qnsj ymj tk ytu rnsn-rfsxnts, itqqfw mfqk-rnqqnts wzxynh gjfzynkzqqd f mnr jfws yt jstzlm gjjs mfi htrufsd ytd qzhwfynaj ymnx bnym djfwx snsj Wtzlmqd Ujssjd. Rw. lnajs mfi mj jkktwy fsi ynrj ymj ktw zsijwufni hjwyfnsqd bfx mj ktzw, tk kfrnqd btsijwkzq f xzuutwy yt jstzlm rfij firnyyjiqd Hfijs Fqymtzlm ymfy. tk ujwhjsy jsynwj fs jajs sty bfx ny kfhy, Ns itqqfwx. rnqqnts ybjsyd mzsiwji tsj fuuwtfhmnsl wfuniqd sty bfx mfsi, tymjw ymj ts btwym, Hfijs’x ufwysjwx. bjfqymd jcywjrjqd Lwnllx Rw. fsi HJT, Ujssjd, B. Ofrjx rfpj yt jstzlm gjjs mfi mtbjajw, xzhhjxxjx, ymwjj Ymtxj uwtutxfqx. gzxnsjxx mnx tk ymwjj tsqd ns jkkjhynaj gjjs mfi fsi djfwx ybjsyd-knaj sjfwqd ktw Ujssjdufni yt unyhmjx xfqjx uwjxjsynsl gjjs mfi Lwnllx Rw. htwwjhy”. “rnqnyfwnqd bjwj bmt Knlzwnsjx Fwrd ns nsajxy yt Ytdx Ujssjdufni tk gtfwi ymj htsanshj yt ywdnsl stb bfx Lwnllx Rw. Fzlzxy. tk bjjp knwxy ymj tsqd bfx ny fsi djfw ymnx unyhm xfqjx ymnwyjjsym mnx uwjxjsynsl bfx Lwnllx Kwji Rw. rjjynsl. gtfwi f ns xyzhp xynqq bfx Hfijs fsi qzshm, xhmjizqji mnx zsynq rnszyjx knkyjjs fsi gwjfpkfxy, xnshj mtzwx knaj gjjs mfi Ny 12:15. mzkkji. fsi bfyhm mnx fy qttpji Hfijs rtwfqx? mjfqymd bnym rfs kfrnqd mfwi-btwpnsl itbs-yt-jfwym f nx Hfijs ymfy hqjfw ny Nx ufrujwji? ytt fx fhwtxx htrj hmfwfhyjw rfns ymj Itjx jstzlm? ltti nsywtizhynts ymnx Nx Styjx: Ujwxtsfq Kfhnj Uwnrf tk Hm1")
          if (GetBoolean(notepad pencil, "translatedXM")) {
            msg ("<br/>After having deciphered the message, you have copied down the following translation:<br/><br/>Ch1 of Prima Facie<br/>Personal Notes:  Is this introduction good enough?  Does the main character come across as too pampered?  Is it clear that Caden is a down-to-earth hard-working family man with healthy morals?<br/><br/>Caden looked at his watch and huffed.  12:15.  It had been five hours since breakfast, and fifteen minutes until his scheduled lunch, and Caden was still stuck in a board meeting.  Mr. Fred Griggs was presenting his thirteenth sales pitch this year and it was only the first week of August.  Mr. Griggs was now trying to convince the board of Penneypaid Toys to invest in Army Figurines who were “militarily correct”.  Mr. Griggs had been presenting sales pitches to Penneypaid for nearly twenty-five years and had been effective in only three of his business proposals.  Those three successes, however, had been enough to make James W. Penney, CEO, and Mr. Griggs extremely wealthy partners. Caden’s worth, on the other hand, was not rapidly approaching one hundred twenty million dollars.  In fact, it was not even an entire percent of that.  Although Caden admittedly made enough to support a wonderful family of four, he was certainly underpaid for the time and effort he had given Mr. Penney.  Roughly nine years with this lucrative toy company had been enough to earn him a beautifully rustic half-million dollar mini-mansion, top of the line clothes for his twin children, Derek and Julie, and his 2012 Mercedes E Class.  From the looks of it, the Grant’s were very wealthy, and Caden would never disagree, but at times like this he thought that maybe he would better serve and reap better rewards if he followed in dad’s footsteps, or pursued his dream as a cartoon illustrator.  It was that dream that opened the Penneypaid’s door shortly after his graduation from the University of Georgia in August of 1994.  Penneypaid happened to be looking for a creative arts and advertising director during the time of Caden’s internship at the company.  Mr. Penney had offered him the job in June pending graduation.  With a wedding to plan, mother’s retirement, and no guarantee for future employment, he jumped at the opportunity.  It had only taken five years to win the Department Chair of Advertising seat.  The new job demanded more hours and more responsibilities, which made being late for lunch with your wife even more unbearable.  He looked at his watch again.  12:25.  Mr. Griggs seemed to be winding down.  The Tour de Griggs always ended with the presentation of a small gift box to each of the department chairs.  The boxes, always bright blue and tied with a gold ribbon, were now being handed around the table.  The final box was handed to Mr. Penney, as always as a formality, and Mr. Griggs thanked each of the members for their time, closed his briefcase, and walked confidently from the boardroom.<br/>")
            if (envelopeXM.parent = game.pov) {
              msg ("You decide to scribble your thoughts about the intro to Prima Facie down on this transcript and stuff it in the envelope.<br/>")
              IncreaseScore (6)
              PrintCentered ("<b>[Your score has increased by 6!]</b>")
              list add (game.scoreList, "Deciphered the text and jotted an idea down for XM: 6 points")
              RemoveObject (notepad pencil)
              AddToInventory (IdeaInAnEnvelopeXM)
              RemoveObject (envelopeXM)
            }
            else {
              msg ("If only you had a place to stash it, where Xan would think it was his own idea, you would scribble your thoughts about the intro to Prima Facie down on this transcript and put it there...<br/>")
            }
          }
        }
        else {
          msg ("It appears it contains some random doodles apparently drawn by XanMag.  Most aren't too bad, but they look like they were sketched out of total boredom.{once:<br/><br/>There is a pencil attached to the notepad, to save XanMag the trouble of creating two objects.  You want to call XM lazy at first, but you decide it's actually a pretty good idea.}")
        }
      ]]></look>
      <read type="script"><![CDATA[
        if (GetBoolean(notepad pencil, "scribedXM")) {
          msg ("Aside from the XM doodles, you have scribed what you viewed from the swirling wall of text while under the influence of some killer weed.  It reads:<br/>")
          msg ("obneqebbz. gur sebz pbasvqragyl jnyxrq naq oevrspnfr, uvf pybfrq gvzr, gurve sbe zrzoref gur bs rnpu gunaxrq Tevttf Ze. naq sbeznyvgl, n nf nyjnlf nf Craarl, Ze. gb unaqrq jnf obk svany Gur gnoyr. gur nebhaq unaqrq orvat abj jrer evooba, tbyq n jvgu gvrq naq oyhr oevtug nyjnlf obkrf, Gur punvef. qrcnegzrag gur bs rnpu gb obk tvsg fznyy n bs cerfragngvba gur jvgu raqrq nyjnlf Tevttf qr Gbhe Gur qbja. jvaqvat or gb frrzrq Tevttf Ze. 12:25. ntnva. jngpu uvf ng ybbxrq Ur haornenoyr. zber rira jvsr lbhe jvgu yhapu sbe yngr orvat znqr juvpu erfcbafvovyvgvrf, zber naq ubhef zber qrznaqrq wbo arj Gur frng. Nqiregvfvat bs Punve Qrcnegzrag gur jva gb lrnef svir gnxra bayl unq Vg bccbeghavgl. gur ng whzcrq ur rzcyblzrag, shgher sbe thnenagrr ab naq ergverzrag, zbgure’f cyna, gb jrqqvat n Jvgu tenqhngvba. craqvat Whar va wbo gur uvz bssrerq unq Craarl Ze. pbzcnal. gur ng vagreafuvc Pnqra’f bs gvzr gur qhevat qverpgbe nqiregvfvat naq negf perngvir n sbe ybbxvat or gb unccrarq Craarlcnvq 1994. bs Nhthfg va Trbetvn bs Havirefvgl gur sebz tenqhngvba uvf nsgre fubegyl qbbe Craarlcnvq’f gur bcrarq gung qernz gung jnf Vg vyyhfgengbe. pnegbba n nf qernz uvf chefhrq be sbbgfgrcf, qnq’f va sbyybjrq ur vs erjneqf orggre ernc naq freir orggre jbhyq ur znlor gung gubhtug ur guvf yvxr gvzrf ng ohg qvfnterr, arire jbhyq Pnqra naq jrnygul, irel jrer Tenag’f gur vg, bs ybbxf gur Sebz Pynff. R Zreprqrf 2012 uvf naq Whyvr, naq Qrerx puvyqera, gjva uvf sbe pybgurf yvar gur bs gbc zvav-znafvba, qbyyne unys-zvyyvba ehfgvp ornhgvshyyl n uvz rnea gb rabhtu orra unq pbzcnal gbl yhpengvir guvf jvgu lrnef avar Ebhtuyl Craarl. Ze. tvira unq ur rssbeg naq gvzr gur sbe haqrecnvq pregnvayl jnf ur sbhe, bs snzvyl jbaqreshy n fhccbeg gb rabhtu znqr nqzvggrqyl Pnqra Nygubhtu gung. bs creprag ragver na rira abg jnf vg snpg, Va qbyynef. zvyyvba gjragl uhaqerq bar nccebnpuvat encvqyl abg jnf unaq, bgure gur ba jbegu, Pnqra’f cnegaref. jrnygul rkgerzryl Tevttf Ze. naq PRB, Craarl, J. Wnzrf znxr gb rabhtu orra unq ubjrire, fhpprffrf, guerr Gubfr cebcbfnyf. ohfvarff uvf bs guerr bayl va rssrpgvir orra unq naq lrnef gjragl-svir arneyl sbe Craarlcnvq gb cvgpurf fnyrf cerfragvat orra unq Tevttf Ze. pbeerpg”. “zvyvgnevyl jrer jub Svthevarf Nezl va vairfg gb Gblf Craarlcnvq bs obneq gur pbaivapr gb gelvat abj jnf Tevttf Ze. Nhthfg. bs jrrx svefg gur bayl jnf vg naq lrne guvf cvgpu fnyrf guvegrragu uvf cerfragvat jnf Tevttf Serq Ze. zrrgvat. obneq n va fghpx fgvyy jnf Pnqra naq yhapu, fpurqhyrq uvf hagvy zvahgrf svsgrra naq oernxsnfg, fvapr ubhef svir orra unq Vg 12:15. uhssrq. naq jngpu uvf ng ybbxrq Pnqra zbenyf? urnygul jvgu zna snzvyl uneq-jbexvat qbja-gb-rnegu n vf Pnqra gung pyrne vg Vf cnzcrerq? gbb nf npebff pbzr punenpgre znva gur Qbrf rabhtu? tbbq vagebqhpgvba guvf Vf Abgrf: Crefbany Snpvr Cevzn bs Pu1")
          if (GetBoolean(notepad pencil, "translatedXM")) {
            msg ("<br/>After having deciphered the message, you have copied down the following translation:<br/><br/>Ch1 of Prima Facie<br/>Personal Notes:  Is this introduction good enough?  Does the main character come across as too pampered?  Is it clear that Caden is a down-to-earth hard-working family man with healthy morals?<br/><br/>Caden looked at his watch and huffed.  12:15.  It had been five hours since breakfast, and fifteen minutes until his scheduled lunch, and Caden was still stuck in a board meeting.  Mr. Fred Griggs was presenting his thirteenth sales pitch this year and it was only the first week of August.  Mr. Griggs was now trying to convince the board of Penneypaid Toys to invest in Army Figurines who were “militarily correct”.  Mr. Griggs had been presenting sales pitches to Penneypaid for nearly twenty-five years and had been effective in only three of his business proposals.  Those three successes, however, had been enough to make James W. Penney, CEO, and Mr. Griggs extremely wealthy partners. Caden’s worth, on the other hand, was not rapidly approaching one hundred twenty million dollars.  In fact, it was not even an entire percent of that.  Although Caden admittedly made enough to support a wonderful family of four, he was certainly underpaid for the time and effort he had given Mr. Penney.  Roughly nine years with this lucrative toy company had been enough to earn him a beautifully rustic half-million dollar mini-mansion, top of the line clothes for his twin children, Derek and Julie, and his 2012 Mercedes E Class.  From the looks of it, the Grant’s were very wealthy, and Caden would never disagree, but at times like this he thought that maybe he would better serve and reap better rewards if he followed in dad’s footsteps, or pursued his dream as a cartoon illustrator.  It was that dream that opened the Penneypaid’s door shortly after his graduation from the University of Georgia in August of 1994.  Penneypaid happened to be looking for a creative arts and advertising director during the time of Caden’s internship at the company.  Mr. Penney had offered him the job in June pending graduation.  With a wedding to plan, mother’s retirement, and no guarantee for future employment, he jumped at the opportunity.  It had only taken five years to win the Department Chair of Advertising seat.  The new job demanded more hours and more responsibilities, which made being late for lunch with your wife even more unbearable.  He looked at his watch again.  12:25.  Mr. Griggs seemed to be winding down.  The Tour de Griggs always ended with the presentation of a small gift box to each of the department chairs.  The boxes, always bright blue and tied with a gold ribbon, were now being handed around the table.  The final box was handed to Mr. Penney, as always as a formality, and Mr. Griggs thanked each of the members for their time, closed his briefcase, and walked confidently from the boardroom.<br/>")
            msg ("Aside from the XM doodles, you have scribed what you viewed from the swirling wall of text while under the influence of some killer weed.  It reads:<br/><br/>{b:REV ROT 13}<br/><br/>obneqebbz. gur sebz pbasvqragyl jnyxrq naq oevrspnfr, uvf pybfrq gvzr, gurve sbe zrzoref gur bs rnpu gunaxrq Tevttf Ze. naq sbeznyvgl, n nf nyjnlf nf Craarl, Ze. gb unaqrq jnf obk svany Gur gnoyr. gur nebhaq unaqrq orvat abj jrer evooba, tbyq n jvgu gvrq naq oyhr oevtug nyjnlf obkrf, Gur punvef. qrcnegzrag gur bs rnpu gb obk tvsg fznyy n bs cerfragngvba gur jvgu raqrq nyjnlf Tevttf qr Gbhe Gur qbja. jvaqvat or gb frrzrq Tevttf Ze. 12:25. ntnva. jngpu uvf ng ybbxrq Ur haornenoyr. zber rira jvsr lbhe jvgu yhapu sbe yngr orvat znqr juvpu erfcbafvovyvgvrf, zber naq ubhef zber qrznaqrq wbo arj Gur frng. Nqiregvfvat bs Punve Qrcnegzrag gur jva gb lrnef svir gnxra bayl unq Vg bccbeghavgl. gur ng whzcrq ur rzcyblzrag, shgher sbe thnenagrr ab naq ergverzrag, zbgure’f cyna, gb jrqqvat n Jvgu tenqhngvba. craqvat Whar va wbo gur uvz bssrerq unq Craarl Ze. pbzcnal. gur ng vagreafuvc Pnqra’f bs gvzr gur qhevat qverpgbe nqiregvfvat naq negf perngvir n sbe ybbxvat or gb unccrarq Craarlcnvq 1994. bs Nhthfg va Trbetvn bs Havirefvgl gur sebz tenqhngvba uvf nsgre fubegyl qbbe Craarlcnvq’f gur bcrarq gung qernz gung jnf Vg vyyhfgengbe. pnegbba n nf qernz uvf chefhrq be sbbgfgrcf, qnq’f va sbyybjrq ur vs erjneqf orggre ernc naq freir orggre jbhyq ur znlor gung gubhtug ur guvf yvxr gvzrf ng ohg qvfnterr, arire jbhyq Pnqra naq jrnygul, irel jrer Tenag’f gur vg, bs ybbxf gur Sebz Pynff. R Zreprqrf 2012 uvf naq Whyvr, naq Qrerx puvyqera, gjva uvf sbe pybgurf yvar gur bs gbc zvav-znafvba, qbyyne unys-zvyyvba ehfgvp ornhgvshyyl n uvz rnea gb rabhtu orra unq pbzcnal gbl yhpengvir guvf jvgu lrnef avar Ebhtuyl Craarl. Ze. tvira unq ur rssbeg naq gvzr gur sbe haqrecnvq pregnvayl jnf ur sbhe, bs snzvyl jbaqreshy n fhccbeg gb rabhtu znqr nqzvggrqyl Pnqra Nygubhtu gung. bs creprag ragver na rira abg jnf vg snpg, Va qbyynef. zvyyvba gjragl uhaqerq bar nccebnpuvat encvqyl abg jnf unaq, bgure gur ba jbegu, Pnqra’f cnegaref. jrnygul rkgerzryl Tevttf Ze. naq PRB, Craarl, J. Wnzrf znxr gb rabhtu orra unq ubjrire, fhpprffrf, guerr Gubfr cebcbfnyf. ohfvarff uvf bs guerr bayl va rssrpgvir orra unq naq lrnef gjragl-svir arneyl sbe Craarlcnvq gb cvgpurf fnyrf cerfragvat orra unq Tevttf Ze. pbeerpg”. “zvyvgnevyl jrer jub Svthevarf Nezl va vairfg gb Gblf Craarlcnvq bs obneq gur pbaivapr gb gelvat abj jnf Tevttf Ze. Nhthfg. bs jrrx svefg gur bayl jnf vg naq lrne guvf cvgpu fnyrf guvegrragu uvf cerfragvat jnf Tevttf Serq Ze. zrrgvat. obneq n va fghpx fgvyy jnf Pnqra naq yhapu, fpurqhyrq uvf hagvy zvahgrf svsgrra naq oernxsnfg, fvapr ubhef svir orra unq Vg 12:15. uhssrq. naq jngpu uvf ng ybbxrq Pnqra zbenyf? urnygul jvgu zna snzvyl uneq-jbexvat qbja-gb-rnegu n vf Pnqra gung pyrne vg Vf cnzcrerq? gbb nf npebff pbzr punenpgre znva gur Qbrf rabhtu? tbbq vagebqhpgvba guvf Vf Abgrf: Crefbany Snpvr Cevzn bs Pu1")
            if (GetBoolean(notepad pencil, "translatedXM")) {
              msg ("<br/>After having deciphered the message, you have copied down the following translation:<br/><br/>Ch1 of Prima Facie<br/>Personal Notes:  Is this introduction good enough?  Does the main character come across as too pampered?  Is it clear that Caden is a down-to-earth hard-working family man with healthy morals?<br/><br/>Caden looked at his watch and huffed.  12:15.  It had been five hours since breakfast, and fifteen minutes until his scheduled lunch, and Caden was still stuck in a board meeting.  Mr. Fred Griggs was presenting his thirteenth sales pitch this year and it was only the first week of August.  Mr. Griggs was now trying to convince the board of Penneypaid Toys to invest in Army Figurines who were “militarily correct”.  Mr. Griggs had been presenting sales pitches to Penneypaid for nearly twenty-five years and had been effective in only three of his business proposals.  Those three successes, however, had been enough to make James W. Penney, CEO, and Mr. Griggs extremely wealthy partners. Caden’s worth, on the other hand, was not rapidly approaching one hundred twenty million dollars.  In fact, it was not even an entire percent of that.  Although Caden admittedly made enough to support a wonderful family of four, he was certainly underpaid for the time and effort he had given Mr. Penney.  Roughly nine years with this lucrative toy company had been enough to earn him a beautifully rustic half-million dollar mini-mansion, top of the line clothes for his twin children, Derek and Julie, and his 2012 Mercedes E Class.  From the looks of it, the Grant’s were very wealthy, and Caden would never disagree, but at times like this he thought that maybe he would better serve and reap better rewards if he followed in dad’s footsteps, or pursued his dream as a cartoon illustrator.  It was that dream that opened the Penneypaid’s door shortly after his graduation from the University of Georgia in August of 1994.  Penneypaid happened to be looking for a creative arts and advertising director during the time of Caden’s internship at the company.  Mr. Penney had offered him the job in June pending graduation.  With a wedding to plan, mother’s retirement, and no guarantee for future employment, he jumped at the opportunity.  It had only taken five years to win the Department Chair of Advertising seat.  The new job demanded more hours and more responsibilities, which made being late for lunch with your wife even more unbearable.  He looked at his watch again.  12:25.  Mr. Griggs seemed to be winding down.  The Tour de Griggs always ended with the presentation of a small gift box to each of the department chairs.  The boxes, always bright blue and tied with a gold ribbon, were now being handed around the table.  The final box was handed to Mr. Penney, as always as a formality, and Mr. Griggs thanked each of the members for their time, closed his briefcase, and walked confidently from the boardroom.<br/>")
              if (envelopeXM.parent = game.pov) {
                msg ("You decide to scribble your thoughts about the intro to Prima Facie down on this transcript and stuff it in the envelope.<br/>")
                IncreaseScore (6)
                PrintCentered ("<b>[Your score has increased by 6!]</b>")
                list add (game.scoreList, "Deciphered the text and jotted an idea down for XM: 6 points")
                RemoveObject (notepad pencil)
                AddToInventory (IdeaInAnEnvelopeXM)
                RemoveObject (envelopeXM)
              }
              else {
                msg ("If only you had a place to stash it, where Xan would think it was his own idea, you would scribble your thoughts about the intro to Prima Facie down on this transcript and put it there...<br/>")
              }
            }
            RemoveObject (notepad pencil)
            AddToInventory (IdeaInAnEnvelopeXM)
            RemoveObject (envelopeXM)
          }
        }
        else {
          msg ("It appears it contains some random doodles, apparently drawn by XanMag.  Most aren't too bad, but they look like they were sketched out of total boredom.")
        }
      ]]></read>
    </object>
    <exit alias="northwest" to="WordDocumentXM">
      <inherit name="northwestdirection" />
    </exit>
    <object name="stuffedanimalsXM">
      <alt type="stringlist">
        <value>fox</value>
        <value>rabbit</value>
      </alt>
      <alias>stuffed animals</alias>
      <takemsg>You don't think these are XanMag's but you aren't allowed to take them regardless.</takemsg>
      <look type="script"><![CDATA[
        OutputTextNoBr ("There are a pair of stuffed animals.  They appear to be a fox and a rabbit, positioned so that they are looking directly at you, and their eyes seem to follow you around the room.  Odd. ")
        x = GetRandomInt(0,10)
        if (x>8) {
          msg ("You think you saw one move!")
        }
        else {
          msg ("")
        }
      ]]></look>
    </object>
    <object name="floorXM3">
      <look>It's an etching in the floor.  A number:  "5".  In very small print, beneath the number five, are the words "unscrambled". There is an animal print here.</look>
      <alt type="stringlist">
        <value>number</value>
        <value>writing</value>
      </alt>
      <alias>floor</alias>
      <scenery />
      <read>"5".  In very small print, beneath the number five, are the words "unscrambled".</read>
    </object>
    <object name="animalprintXM">
      <scenery />
      <alias>animal print</alias>
      <look>It's an odd impression on the floor of an animal's print.  It looks to be a fox print from what you can tell.  Odd.</look>
    </object>
  </object>
  <verb name="dl_attack">
    <property>attack</property>
    <pattern>attack</pattern>
    <defaultexpression>"You can't attack " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_reynard">
    <property>reynard</property>
    <pattern>reynard </pattern>
    <defaultexpression>"You can't reynard  " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_treasure">
    <property>treasure</property>
    <pattern>treasure</pattern>
    <defaultexpression>"You can't treasure " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_fight">
    <property>fight</property>
    <pattern>fight</pattern>
    <defaultexpression>"You can't fight " + object.article + "."</defaultexpression>
  </verb>
  <verb name="dl_who">
    <property>who</property>
    <pattern>who</pattern>
    <defaultexpression>"You can't who " + object.article + "."</defaultexpression>
  </verb>
  <command name="px_update">
    <pattern>load #text#</pattern>
    <script>
      LoadFile ("" + text + "")
    </script>
  </command>

  <verb name="enter">
    <pattern>enter #object#; go in #object#; go into #object#; get in #object#; get into #object#</pattern>
    <property>enterverb</property>
    <defaulttemplate>DefaultEnter</defaulttemplate>
  </verb>

  <turnscript name="update_contents_in_lists_turnscript">
    <enabled />
    <script>
      UpdateContentsInLists
    </script>
  </turnscript>
  <command name="pretty_inventory_cmd">
    <pattern type="string">^i$|^inv$|^inventory$</pattern>
    <script>
      list = FormatObjectList(Template("CarryingListHeader"), game.pov, Template("And"), ".")
      if (list = "") {
        msg (Template("NotCarryingAnything"))
      }
      else {
        PrettyInventory
      }
    </script>
  </command>
  <command name="save_mod">
    <pattern>save</pattern>
    <script>
      if (not StartsWith(GetFileURL(""), "quest")) {
        JS.saveGame ()
      }
      else {
        request (RequestSave, "")
      }
      game.suppressturnscripts = true
    </script>
  </command>
  <type name="defaultgame">
    <enablehyperlinks />
    <echocommand />
    <echohyperlinks />
    <showdescriptiononenter />
    <autodescription />
    <defaultfont>Georgia, serif</defaultfont>
    <defaultfontsize type="int">12</defaultfontsize>
    <defaultbackground>White</defaultbackground>
    <defaultforeground>Black</defaultforeground>
    <defaultlinkforeground>Blue</defaultlinkforeground>
    <backgroundimage type="string"></backgroundimage>
    <setbackgroundopacity type="boolean">false</setbackgroundopacity>
    <backgroundopacity type="double">0.5</backgroundopacity>
    <menufont>Arial</menufont>
    <menufontsize type="int">9</menufontsize>
    <menubackground>White</menubackground>
    <menuforeground>Black</menuforeground>
    <menuhoverbackground>LightGrey</menuhoverbackground>
    <menuhoverforeground>Black</menuhoverforeground>
    <underlinehyperlinks />
    <compassdirections type="stringlist">
      <value>northwest</value>
      <value>north</value>
      <value>northeast</value>
      <value>west</value>
      <value>east</value>
      <value>southwest</value>
      <value>south</value>
      <value>southeast</value>
      <value>up</value>
      <value>down</value>
      <value>in</value>
      <value>out</value>
    </compassdirections>
    <clearframe />
    <timeelapsed type="int">0</timeelapsed>
    <appendobjectdescription type="boolean">false</appendobjectdescription>
    <allobjects type="stringlist">
      <value>all</value>
      <value>everything</value>
    </allobjects>
    <parserignoreprefixes type="stringlist">
      <value>the</value>
      <value>a</value>
      <value>an</value>
    </parserignoreprefixes>
    <displayroomdescriptiononstart />
    <showpanes />
    <showcommandbar />
    <showlocation />
    <statusandcompassattop type="boolean">false</statusandcompassattop>
    <turnoffcompass type="boolean">false</turnoffcompass>
    <turnoffinventory type="boolean">false</turnoffinventory>
    <turnoffplacesandobjects type="boolean">false</turnoffplacesandobjects>
    <borderlesscursor type="boolean">false</borderlesscursor>
    <colourblend type="boolean">false</colourblend>
    <commandpane type="boolean">false</commandpane>
    <customstatuspane type="boolean">false</customstatuspane>
    <panestheme>Classic</panestheme>
    <shadowbox type="boolean">false</shadowbox>
    <respondtogridclicks type="boolean">false</respondtogridclicks>
    <commandcursor><![CDATA[>]]></commandcursor>
    <moneyformat>$!</moneyformat>
    <classiclocation />
    <turnoffsavebutton type="boolean">false</turnoffsavebutton>
    <mapexitwidth type="int">1</mapexitwidth>
    <mapexitcolour>Black</mapexitcolour>
    <setcustomwidth type="boolean">false</setcustomwidth>
    <customwidth type="int">950</customwidth>
    <setcustompadding type="boolean">false</setcustompadding>
    <custompaddingtop type="int">30</custompaddingtop>
    <custompaddingbottom type="int">0</custompaddingbottom>
    <custompaddingleft type="int">20</custompaddingleft>
    <custompaddingright type="int">20</custompaddingright>
    <showborder />
    <showscore type="boolean">false</showscore>
    <showhealth type="boolean">false</showhealth>
    <showmoney type="boolean">false</showmoney>
    <showtitle />
    <autodisplayverbs />
    <clearscreenonroomenter type="boolean">false</clearscreenonroomenter>
    <attr name="autodescription_youarein" type="int">1</attr>
    <attr name="autodescription_youcansee" type="int">2</attr>
    <attr name="autodescription_youcango" type="int">3</attr>
    <attr name="autodescription_description" type="int">4</attr>
    <autodescription_youarein_useprefix />
    <attr name="autodescription_youarein_newline" type="boolean">false</attr>
    <attr name="autodescription_youcansee_newline" type="boolean">false</attr>
    <attr name="autodescription_youcango_newline" type="boolean">false</attr>
    <attr name="autodescription_description_newline" type="boolean">false</attr>
    <changeroom_newline />
    <attr name="command_newline" type="boolean">false</attr>
    <description type="string"></description>
    <languageid>en</languageid>
    <gridmap type="boolean">false</gridmap>
    <mapscale type="int">30</mapscale>
    <mapsize type="int">300</mapsize>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <attr name="feature_pictureframe" type="boolean">false</attr>
    <attr name="feature_limitinventory" type="boolean">false</attr>
    <attr name="feature_asktell" type="boolean">false</attr>
    <attr name="feature_annotations" type="boolean">false</attr>
    <attr name="feature_advancedwearables" type="boolean">false</attr>
    <attr name="feature_advancedscripts" type="boolean">false</attr>
    <deactivatecommandlinks type="boolean">false</deactivatecommandlinks>
    <multiplecommands type="boolean">false</multiplecommands>
    <publishfileextensions>*.jpg;*.jpeg;*.png;*.gif;*.js;*.wav;*.mp3;*.htm;*.html;*.svg</publishfileextensions>
    <changedpov type="script">
      InitPOV (oldvalue, game.pov)
    </changedpov>
  </type>
  <type name="theme_novella">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
  </type>
  <type name="theme_retro">
    <defaultbackground>Black</defaultbackground>
    <defaultforeground>White</defaultforeground>
    <defaultlinkforeground>White</defaultlinkforeground>
    <defaultfont>'Lucida Console', Monaco, monospace</defaultfont>
    <defaultwebfont>Press Start 2P</defaultwebfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>'Lucida Console', Monaco, monospace</menufont>
    <menubackground>Black</menubackground>
    <menuforeground>White</menuforeground>
    <menuhoverbackground>GreenYellow</menuhoverbackground>
  </type>
  <type name="theme_typewriter">
    <setcustompadding />
    <showborder type="boolean">false</showborder>
    <showpanes type="boolean">false</showpanes>
    <showlocation type="boolean">false</showlocation>
    <setcustomwidth />
    <customwidth type="int">650</customwidth>
    <custompaddingtop type="int">60</custompaddingtop>
    <defaultfont>'Courier New', Courier, monospace</defaultfont>
    <defaultwebfont>Special Elite</defaultwebfont>
  </type>
  <type name="theme_hotdogstand">
    <defaultbackground>Red</defaultbackground>
    <defaultforeground>Yellow</defaultforeground>
    <defaultlinkforeground>Yellow</defaultlinkforeground>
    <defaultfont>'Comic Sans MS', cursive, sans-serif</defaultfont>
    <menufontsize type="int">14</menufontsize>
    <menufont>Impact, Charcoal, sans-serif</menufont>
    <menubackground>Red</menubackground>
    <menuforeground>Yellow</menuforeground>
    <menuhoverbackground>Black</menuhoverbackground>
    <menuhoverforeground>Yellow</menuhoverforeground>
  </type>
  <type name="defaultobject">
    <visible />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Take</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Look at</value>
      <value>Use</value>
      <value>Drop</value>
    </inventoryverbs>
    <take type="boolean">false</take>
    <use type="boolean">false</use>
    <givesingle type="boolean">false</givesingle>
    <drop />
    <gender>it</gender>
    <article>it</article>
    <possessive>its</possessive>
    <isopen type="boolean">false</isopen>
    <open type="boolean">false</open>
    <close type="boolean">false</close>
    <container type="boolean">false</container>
    <descprefix>You are in</descprefix>
    <objectslistprefix>You can see</objectslistprefix>
    <exitslistprefix>You can go</exitslistprefix>
    <contentsprefix>containing</contentsprefix>
    <description type="string"></description>
    <attr name="implementation_notes" type="string"></attr>
    <scenery type="boolean">false</scenery>
    <hidechildren type="boolean">false</hidechildren>
    <listchildren type="boolean">false</listchildren>
    <usedefaultprefix />
    <volume type="int">0</volume>
    <price type="int">0</price>
    <dark type="boolean">false</dark>
    <lightstrength type="string"></lightstrength>
    <darklevel type="boolean">false</darklevel>
    <attr name="grid_width" type="int">1</attr>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_fill">White</attr>
    <attr name="grid_border">Black</attr>
    <attr name="grid_borderwidth" type="int">1</attr>
    <attr name="grid_bordersides" type="int">15</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_label" type="string"></attr>
    <attr name="grid_label_colour">Black</attr>
    <grid_parent_offset_auto />
    <attr name="grid_parent_offset_x" type="int">0</attr>
    <attr name="grid_parent_offset_y" type="int">0</attr>
    <attr name="pov_alias">me</attr>
    <pov_alt type="stringlist">
      <value>me</value>
      <value>myself</value>
      <value>self</value>
    </pov_alt>
    <attr name="pov_look">Looking good.</attr>
    <attr name="pov_gender">you</attr>
    <attr name="pov_article">yourself</attr>
    <attr name="pov_possessive">your</attr>
    <attr name="feature_usegive" type="boolean">false</attr>
    <attr name="feature_container" type="boolean">false</attr>
    <attr name="feature_switchable" type="boolean">false</attr>
    <attr name="feature_edible" type="boolean">false</attr>
    <attr name="feature_player" type="boolean">false</attr>
    <attr name="feature_lightdark" type="boolean">false</attr>
    <visited type="boolean">false</visited>
    <hasbeenmoved type="boolean">false</hasbeenmoved>
    <changedparent type="script">
      if (game.pov = this) {
        if (IsDefined("oldvalue")) {
          OnEnterRoom (oldvalue)
        }
        else {
          OnEnterRoom (null)
        }
        if (game.gridmap) {
          MergePOVCoordinates
        }
      }
      this.hasbeenmoved = true
    </changedparent>
    <changedisopen type="script">
      if (this.isopen and HasScript(this, "onopen")) {
        do (this, "onopen")
      }
      if (not this.isopen and HasScript(this, "onclose")) {
        do (this, "onclose")
      }
    </changedisopen>
    <changedlocked type="script">
      if (this.locked and HasScript(this, "onlock")) {
        do (this, "onlock")
      }
      if (not this.locked and HasScript(this, "onunlock")) {
        do (this, "onunlock")
      }
    </changedlocked>
    <changedswitchedon type="script">
      if (this.switchedon and HasScript(this, "onswitchon")) {
        do (this, "onswitchon")
      }
      if (not this.switchedon and HasScript(this, "onswitchoff")) {
        do (this, "onswitchoff")
      }
    </changedswitchedon>
  </type>
  <type name="defaultexit">
    <displayverbs type="stringlist">
      <value>Go to</value>
    </displayverbs>
    <visible />
    <scenery type="boolean">false</scenery>
    <locked type="boolean">false</locked>
    <lockmessage>That way is locked.</lockmessage>
    <lookonly type="boolean">false</lookonly>
    <runscript type="boolean">false</runscript>
    <lightstrength type="string"></lightstrength>
    <attr name="grid_length" type="int">1</attr>
    <attr name="grid_render" type="boolean">false</attr>
    <attr name="grid_offset_x" type="int">0</attr>
    <attr name="grid_offset_y" type="int">0</attr>
  </type>
  <type name="direction">
    <displayverbs type="stringlist">
      <value>Go</value>
    </displayverbs>
  </type>
  <type name="compassdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="updowndirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="inoutdirection">
    <inherit name="direction" />
    <prefix type="string"></prefix>
    <suffix type="string"></suffix>
  </type>
  <type name="northwestdirection">
    <inherit name="compassdirection" />
    <alias>northwest</alias>
    <alt type="stringlist">
      <value>nw</value>
    </alt>
  </type>
  <type name="northdirection">
    <inherit name="compassdirection" />
    <alias>north</alias>
    <alt type="stringlist">
      <value>n</value>
    </alt>
  </type>
  <type name="northeastdirection">
    <inherit name="compassdirection" />
    <alias>northeast</alias>
    <alt type="stringlist">
      <value>ne</value>
    </alt>
  </type>
  <type name="westdirection">
    <inherit name="compassdirection" />
    <alias>west</alias>
    <alt type="stringlist">
      <value>w</value>
    </alt>
  </type>
  <type name="eastdirection">
    <inherit name="compassdirection" />
    <alias>east</alias>
    <alt type="stringlist">
      <value>e</value>
    </alt>
  </type>
  <type name="southwestdirection">
    <inherit name="compassdirection" />
    <alias>southwest</alias>
    <alt type="stringlist">
      <value>sw</value>
    </alt>
  </type>
  <type name="southdirection">
    <inherit name="compassdirection" />
    <alias>south</alias>
    <alt type="stringlist">
      <value>s</value>
    </alt>
  </type>
  <type name="southeastdirection">
    <inherit name="compassdirection" />
    <alias>southeast</alias>
    <alt type="stringlist">
      <value>se</value>
    </alt>
  </type>
  <type name="updirection">
    <inherit name="updowndirection" />
    <alias>up</alias>
    <alt type="stringlist">
      <value>u</value>
    </alt>
  </type>
  <type name="downdirection">
    <inherit name="updowndirection" />
    <alias>down</alias>
    <alt type="stringlist">
      <value>d</value>
    </alt>
  </type>
  <type name="indirection">
    <inherit name="inoutdirection" />
    <alias>in</alias>
    <alt type="stringlist">
      <value></value>
    </alt>
  </type>
  <type name="outdirection">
    <inherit name="inoutdirection" />
    <alias>out</alias>
    <alt type="stringlist">
      <value>o</value>
    </alt>
  </type>
  <type name="defaultcommand">
    <pattern type="simplepattern"></pattern>
  </type>
  <type name="defaultverb">
    <separator>with; using</separator>
    <multiobjectmenu>With which object?</multiobjectmenu>
    <multiobjectdefault>That doesn't work.</multiobjectdefault>
    <multiobjectmenuempty>There are no objects available to do that with.</multiobjectmenuempty>
    <script type="script"><![CDATA[
      if (not IsDefined("object2")) {
        object2 = null
      }
      switch (TypeOf(object, this.property)) {
        case ("script") {
          if (object2 = null) {
            do (object, this.property)
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("string") {
          if (object2 = null) {
            msg (GetString(object, this.property))
          }
          else {
            msg (this.multiobjectdefault)
          }
        }
        case ("scriptdictionary") {
          if (object2 <> null) {
            HandleMultiVerb (object, this.property, object2, this.multiobjectdefault)
          }
          else {
            objectlist = ListCombine (ScopeReachableInventory(), ScopeReachableNotHeld())
            excludelist = NewObjectList()
            list add (excludelist, game.pov)
            list add (excludelist, object)
            candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
            if (ListCount(candidates) = 0) {
              msg (this.multiobjectmenuempty)
            }
            else {
              game.pov.multiverb = this.property
              game.pov.multiverbobject = object
              game.pov.multiverbobjectdefault = this.multiobjectdefault
              ShowMenu (this.multiobjectmenu, candidates, true) {
                if (result <> null) {
                  HandleMultiVerb (game.pov.multiverbobject, game.pov.multiverb, GetObject(result), game.pov.multiverbobjectdefault)
                  game.pov.multiverb = null
                  game.pov.multiverbobject = null
                  game.pov.multiverbobjectdefault = null
                }
              }
            }
          }
        }
        case ("null") {
          if (this.defaulttext <> null) {
            msg (this.defaulttext)
          }
          else if (this.defaulttemplate <> null) {
            msg (DynamicTemplate(this.defaulttemplate, object))
          }
          else if (this.defaultexpression <> null) {
            params = NewDictionary()
            dictionary add (params, "object", object)
            msg (Eval(this.defaultexpression, params))
          }
          else {
            error ("No verb response defined")
          }
        }
        default {
          error ("No verb response defined")
        }
      }
    ]]></script>
  </type>
  <type name="npc_type">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
  </type>
  <type name="male">
    <inherit name="npc_type" />
    <gender>he</gender>
    <article>him</article>
    <possessive>his</possessive>
  </type>
  <type name="namedmale">
    <inherit name="male" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="female">
    <inherit name="npc_type" />
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>she</gender>
    <article>her</article>
    <possessive>her</possessive>
  </type>
  <type name="namedfemale">
    <inherit name="female" />
    <usedefaultprefix type="boolean">false</usedefaultprefix>
  </type>
  <type name="plural">
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
  </type>
  <type name="maleplural">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
  </type>
  <type name="femaleplural">
    <displayverbs type="stringlist">
      <value>Look at</value>
      <value>Speak to</value>
    </displayverbs>
    <gender>they</gender>
    <article>them</article>
    <possessive>their</possessive>
  </type>
  <type name="openable">
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_base">
    <container />
  </type>
  <type name="container_closed">
    <inherit name="container_base" />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_open">
    <inherit name="container_base" />
    <isopen />
    <open />
    <close />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="surface">
    <inherit name="container_base" />
    <isopen />
    <transparent />
    <contentsprefix>on which there is</contentsprefix>
  </type>
  <type name="container">
    <inherit name="container_open" />
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_limited">
    <inherit name="container" />
    <maxobjects type="int">1</maxobjects>
    <maxvolume type="int">100</maxvolume>
    <addscript type="script"><![CDATA[
      activecontainer = this
      correct = true
      while (DoesInherit(activecontainer, "container_base")) {
        if (HasInt(activecontainer, "maxvolume")) {
          if (GetVolume(object, true) + GetVolume(activecontainer, false) > activecontainer.maxvolume) {
            correct = false
            if (HasString(this, "containerfullmessage")) {
              message = this.containerfullmessage
            }
            else {
              message = DynamicTemplate("ContainerFull", this)
            }
          }
        }
        activecontainer = activecontainer.parent
      }
      children = GetDirectChildren(this)
      if (listcount(children) >= this.maxobjects) {
        correct = false
        if (HasString(this, "containermaxobjects")) {
          message = this.containermaxobjects
        }
        else {
          message = DynamicTemplate("MaxObjectsInContainer", this)
        }
      }
      if (correct = false) {
        msg (message)
      }
      else {
        if (HasScript(object, "drop")) {
          params = NewDictionary()
          dictionary add (params, "destination", this)
          do (object, "drop", params)
        }
        else {
          object.parent = this
          msg (Template("Done"))
        }
      }
    ]]></addscript>
    <displayverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Open</value>
      <value>Close</value>
    </inventoryverbs>
  </type>
  <type name="container_lockable">
    <locked />
    <nokeymessage>You do not have the key.</nokeymessage>
    <unlockmessage>Unlocked.</unlockmessage>
    <lockmessage>Locked.</lockmessage>
    <canlockopen type="boolean">false</canlockopen>
    <autoopen />
    <autounlock />
    <openscript type="script">
      if (this.locked) {
        if (this.autounlock and AllKeysAvailable(this)) {
          do (this, "unlock")
          if (not this.isopen) {
            OpenObject (this)
          }
        }
        else {
          msg (DynamicTemplate("LockedObject", this))
        }
      }
      else {
        OpenObject (this)
      }
    </openscript>
    <closescript type="script">
      if (this.locked) {
        msg (DynamicTemplate("LockedObject", this))
      }
      else {
        CloseObject (this)
      }
    </closescript>
    <lock type="script">
      if (this.locked) {
        msg (DynamicTemplate("AlreadyLocked", this))
      }
      else if (this.isopen and not this.canlockopen) {
        msg (DynamicTemplate("CannotLockOpen", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.lockmessage)
          this.locked = true
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </lock>
    <unlock type="script">
      if (not this.locked) {
        msg (DynamicTemplate("AlreadyUnlocked", this))
      }
      else {
        if (AllKeysAvailable(this)) {
          msg (this.unlockmessage)
          this.locked = false
          if (this.autoopen and not this.isopen) {
            TryOpenClose (true, this)
          }
        }
        else {
          msg (this.nokeymessage)
        }
      }
    </unlock>
  </type>
  <type name="defaultplayer">
    <money type="int">0</money>
  </type>
  <type name="switchable">
    <switchedon type="boolean">false</switchedon>
    <cannotswitchon type="string"></cannotswitchon>
    <turnon type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOn", this))
        }
        else if (not this.cannotswitchon = "") {
          msg (this.cannotswitchon)
        }
        else {
          if (HasString(this, "switchonmsg")) {
            msg (this.switchonmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOn", this))
          }
          this.switchedon = true
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOn", this))
      }
    </turnon>
    <turnoff type="script">
      if (ListContains(ScopeReachable(), this)) {
        if (not this.switchedon) {
          msg (DynamicTemplate("AlreadySwitchedOff", this))
        }
        else {
          if (HasString(this, "switchoffmsg")) {
            msg (this.switchoffmsg)
          }
          else {
            msg (DynamicTemplate("SwitchedOff", this))
          }
          this.switchedon = false
        }
      }
      else {
        msg (DynamicTemplate("DefaultTurnOff", this))
      }
    </turnoff>
    <displayverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Switch on</value>
      <value>Switch off</value>
    </inventoryverbs>
  </type>
  <type name="edible">
    <eathealth type="int">0</eathealth>
    <eat type="script">
      if (HasString(this, "eatmsg")) {
        msg (this.eatmsg)
      }
      else {
        msg (DynamicTemplate("Eaten", this))
      }
      if (HasInt(game.pov, "health")) {
        game.pov.health = game.pov.health + this.eathealth
      }
      destroy (this.name)
    </eat>
    <displayverbs type="stringlist">
      <value>Eat</value>
    </displayverbs>
    <inventoryverbs type="stringlist">
      <value>Eat</value>
    </inventoryverbs>
  </type>
  <type name="gridborder_path_ew">
    <attr name="grid_bordersides" type="int">10</attr>
  </type>
  <type name="gridborder_path_e">
    <attr name="grid_bordersides" type="int">11</attr>
  </type>
  <type name="gridborder_path_w">
    <attr name="grid_bordersides" type="int">14</attr>
  </type>
  <type name="gridborder_path_ns">
    <attr name="grid_bordersides" type="int">5</attr>
  </type>
  <type name="gridborder_path_n">
    <attr name="grid_bordersides" type="int">7</attr>
  </type>
  <type name="gridborder_path_s">
    <attr name="grid_bordersides" type="int">13</attr>
  </type>
  <type name="wearable">
    <usestandardverblist />
    <worn type="boolean">false</worn>
    <armour type="int">0</armour>
    <attr name="multistate_status" type="int">0</attr>
    <invverbs type="string"></invverbs>
    <wornverbs type="string"></wornverbs>
    <removeable />
    <attr name="wear_layer" type="int">2</attr>
    <wear_slots type="stringlist" />
    <take type="script">
      msg (DynamicTemplate("TakeSuccessful", this))
      this.parent = game.pov
      SetVerbs
    </take>
    <colourmylistalias type="script"><![CDATA[
      if (HasString(this, "alias")) {
        s = CapFirst(this.alias)
      }
      else {
        s = CapFirst(this.name)
      }
      if (HasString(this, "listalias")) {
        s = this.listalias
      }
      this.listalias = "<span style=\"color:blue\">" + s + "</span>"
    ]]></colourmylistalias>
    <inventoryverbs type="stringlist">
      <value>Wear</value>
      <value>Remove</value>
    </inventoryverbs>
  </type>
  <type name="kvtype">
    <hintlist type="stringlist">
      <value>This object has no hints.</value>
    </hintlist>
  </type>
  <function name="GetDefaultPrefix" parameters="obj" type="string"><![CDATA[
    if (Instr("aeiou", LCase(Left(GetDisplayAlias(obj), 1))) > 0) {
      return ("an")
    }
    else {
      return ("a")
    }
  ]]></function>
  <function name="WriteVerb" parameters="obj, verb" type="string">
    return (CapFirst(obj.gender) + " " + Conjugate(obj, verb))
  </function>
  <function name="Conjugate" parameters="obj, verb" type="string">
    gender = obj.gender
    if (gender = "he" or gender = "she") {
      gender = "it"
    }
    switch (verb) {
      case ("be") {
        switch (gender) {
          case ("i") {
            return ("am")
          }
          case ("you") {
            return ("are")
          }
          case ("it") {
            return ("is")
          }
          case ("we") {
            return ("are")
          }
          case ("they") {
            return ("are")
          }
          default {
            return ("is")
          }
        }
      }
      case ("do") {
        switch (gender) {
          case ("i") {
            return ("do")
          }
          case ("you") {
            return ("do")
          }
          case ("it") {
            return ("does")
          }
          case ("we") {
            return ("do")
          }
          case ("they") {
            return ("do")
          }
          default {
            return ("do")
          }
        }
      }
      default {
        if (gender = "it") {
          return (verb + "s")
        }
        else {
          return (verb)
        }
      }
    }
  </function>
  <function name="ToWords" parameters="number" type="string"><![CDATA[
    if (not TypeOf(number) = "int") {
      error ("ToWords can only handle ints")
    }
    number_units = Split("zero;one;two;three;four;five;six;seven;eight;nine;ten;eleven;twelve;thirteen;fourteen;fifteen;sixteen;seventeen;eighteen;nineteen;twenty", ";")
    number_tens = Split("twenty;thirty;forty;fifty;sixty;seventy;eighty;ninety", ";")
    s = ""
    if (number < 0) {
      s = "minus "
      number = -number
    }
    if (number < 2000) {
      hundreds = number / 100
      number = number % 100
      if (hundreds > 0) {
        s = s + StringListItem(number_units, hundreds) + " hundred "
        if (number > 0) {
          s = s + "and "
        }
      }
      if (number < 20) {
        if (not number = 0 or s = "") {
          s = s + StringListItem(number_units, number)
        }
      }
      else {
        units = number % 10
        tens = (number / 10) % 10
        s = s + StringListItem(number_tens, tens - 2)
        if (not units = 0) {
          s = s + StringListItem(number_units, units)
        }
      }
    }
    else {
      s = ToString(number)
    }
    return (Trim(s))
  ]]></function>
  <function name="ListObjectContents" parameters="object"><![CDATA[
    if ((GetBoolean(object, "isopen") or GetBoolean(object, "transparent")) and GetBoolean(object, "listchildren")) {
      if (GetBoolean(object, "hidechildren")) {
        object.hidechildren = false
      }
      if (HasString(object, "listchildrenprefix")) {
        listprefix = object.listchildrenprefix
      }
      else {
        listprefix = DynamicTemplate("ObjectContains", object)
      }
      list = FormatObjectList(listprefix, object, Template("And"), ".")
      if (list <> "") {
        msg (list)
      }
    }
  ]]></function>
  <function name="DoTake" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (object.parent = game.pov) {
      msg (prefix + DynamicTemplate("AlreadyTaken", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      volume = 0
      continue = true
      foreach (obj, GetAllChildObjects(game.pov)) {
        if (HasInt(obj, "volume")) {
          volume = volume + obj.volume
        }
      }
      if (not Contains(game.pov, object)) {
        volume = volume + GetVolume(object,true)
      }
      if (HasInt(game.pov, "maxvolume")) {
        if (volume > game.pov.maxvolume) {
          continue = false
          if (HasString(game.pov, "containerfullmessage")) {
            message = prefix + game.pov.containerfullmessage
          }
          else {
            message = prefix + DynamicTemplate("FullInventory", object)
          }
        }
      }
      children = GetDirectChildren(game.pov)
      if (HasInt(game.pov, "maxobjects")) {
        if (game.pov.maxobjects > 0) {
          if (ListCount(children) >= game.pov.maxobjects) {
            continue = false
            if (HasString(game.pov, "containermaxobjects")) {
              message = prefix + game.pov.containermaxobjects
            }
            else {
              message = prefix + DynamicTemplate("MaxObjectsInInventory", object)
            }
          }
        }
      }
      if (continue = false) {
        msg (message)
      }
      else {
        found = true
        takemsg = object.takemsg
        switch (TypeOf(object, "take")) {
          case ("script") {
            if (ismultiple) {
              OutputTextNoBr (prefix)
            }
            do (object, "take")
            takemsg = ""
          }
          case ("boolean") {
            if (object.take = true) {
              object.parent = game.pov
              if (takemsg = null) {
                takemsg = DynamicTemplate("TakeSuccessful", object)
              }
            }
            else {
              found = false
            }
          }
          case ("string") {
            object.parent = game.pov
            takemsg = object.take
          }
          default {
            found = false
          }
        }
        if (not found and takemsg = null) {
          takemsg = DynamicTemplate("TakeUnsuccessful", object)
        }
        if (LengthOf(takemsg) > 0) {
          msg (prefix + takemsg)
        }
        if (HasScript(object, "ontake")) {
          do (object, "ontake")
        }
        if (found and GetBoolean (object, "scenery") and object.parent = game.pov) {
          object.scenery = false
        }
      }
    }
  ]]></function>
  <function name="DoDrop" parameters="object, ismultiple"><![CDATA[
    prefix = ""
    if (ismultiple) {
      prefix = GetDisplayAlias(object) + ": "
    }
    if (not ListContains(ScopeInventory(), object)) {
      msg (prefix + DynamicTemplate("NotCarrying", object))
    }
    else if (not ListContains(ScopeReachable(), object)) {
      msg (prefix + DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = true
      dropmsg = object.dropmsg
      if (HasObject(game.pov.parent, "dropdestination")) {
        destination = game.pov.parent.dropdestination
      }
      else {
        destination = game.pov.parent
      }
      switch (TypeOf(object, "drop")) {
        case ("script") {
          if (ismultiple) {
            OutputTextNoBr (prefix)
          }
          d = NewDictionary()
          dictionary add (d, "destination", destination)
          do (object, "drop", d)
          dropmsg = ""
        }
        case ("boolean") {
          if (object.drop = true) {
            object.parent = destination
            if (dropmsg = null) {
              dropmsg = DynamicTemplate("DropSuccessful", object)
            }
          }
          else {
            found = false
          }
        }
        case ("string") {
          object.parent = game.pov.parent
          dropmsg = object.drop
        }
        default {
          found = false
        }
      }
      if (not found and dropmsg = null) {
        dropmsg = DynamicTemplate("DropUnsuccessful", object)
      }
      if (LengthOf(dropmsg) > 0) {
        msg (prefix + dropmsg)
      }
      if (HasScript(object, "ondrop")) {
        do (object, "ondrop")
      }
    }
  ]]></function>
  <function name="CreateUseMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="TryOpenClose" parameters="doopen, object">
    if (doopen) {
      action = "open"
      scriptaction = "openscript"
    }
    else {
      action = "close"
      scriptaction = "closescript"
    }
    if (not ListContains(ScopeReachable(), object)) {
      msg (DynamicTemplate("ObjectNotOpen", GetBlockingObject(object)))
    }
    else {
      found = false
      if (GetBoolean(object, action)) {
        if (doopen) {
          if (object.isopen) {
            msg (DynamicTemplate("AlreadyOpen", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              OpenObject (object)
            }
          }
        }
        else {
          if (not object.isopen) {
            msg (DynamicTemplate("AlreadyClosed", object))
          }
          else {
            if (HasScript(object, scriptaction)) {
              do (object, scriptaction)
            }
            else {
              CloseObject (object)
            }
          }
        }
      }
      else {
        if (doopen) {
          msg (DynamicTemplate("CantOpen", object))
        }
        else {
          msg (DynamicTemplate("CantClose", object))
        }
      }
    }
  </function>
  <function name="OpenObject" parameters="object">
    if (HasString(object, "openmsg")) {
      msg (object.openmsg)
    }
    else {
      msg (DynamicTemplate("OpenSuccessful", object))
    }
    object.isopen = true
    ListObjectContents (object)
  </function>
  <function name="CloseObject" parameters="object">
    if (HasString(object, "closemsg")) {
      msg (object.closemsg)
    }
    else {
      msg (DynamicTemplate("CloseSuccessful", object))
    }
    object.isopen = false
  </function>
  <function name="CreateGiveMenuList" parameters="object" type="objectlist">
    objectlist = NewObjectList()
    objectlist = ScopeReachableInventory()
    objectlist = ListCombine (objectlist, ScopeReachableNotHeld())
    excludelist = NewObjectList()
    list add (excludelist, game.pov)
    list add (excludelist, object)
    candidates = NewObjectList()
    candidates = ListExclude(RemoveSceneryObjects(objectlist), excludelist)
    return (candidates)
  </function>
  <function name="HandleGiveTo" parameters="object1, object2">
    handled = false
    if (HasString(object2, "give")) {
      msg (object2.give)
      handled = true
    }
    else if (TypeOf(object2, "give") = "scriptdictionary") {
      if (DictionaryContains(object2.give, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.give, object1.name), parameters)
        handled = true
      }
      if (not handled) {
        if (HasScript(object2, "giveanything")) {
          // TO DO: Would be better to use a delegate for giveanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "giveanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "giveto")) {
        msg (object1.giveto)
        handled = true
      }
      else if (TypeOf(object1, "giveto") = "scriptdictionary") {
        if (DictionaryContains(object1.giveto, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.giveto, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "givetoanything")) {
            // TO DO: Would be better to use a delegate for givetoanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "givetoanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultGive", object2, object1))
    }
  </function>
  <function name="HandleUseOn" parameters="object1, object2">
    handled = false
    if (HasString(object2, "useon")) {
      msg (object2.useon)
      handled = true
    }
    else if (TypeOf(object2, "useon") = "scriptdictionary") {
      if (DictionaryContains(object2.useon, object1.name)) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object2)
        dictionary add (parameters, "object", object1)
        invoke (ScriptDictionaryItem(object2.useon, object1.name), parameters)
        handled = true
      }
      else {
        if (HasScript(object2, "useanything")) {
          // TO DO: Would be better to use a delegate for useanything, but need to implement Editor support first
          parameters = NewObjectDictionary()
          dictionary add (parameters, "object", object1)
          do (object2, "useanything", parameters)
          handled = true
        }
      }
    }
    if (not handled) {
      if (HasString(object1, "selfuseon")) {
        msg (object1.selfuseon)
        handled = true
      }
      else if (TypeOf(object1, "selfuseon") = "scriptdictionary") {
        if (DictionaryContains(object1.selfuseon, object2.name)) {
          parameters = NewObjectDictionary()
          dictionary add (parameters, "this", object1)
          dictionary add (parameters, "object", object2)
          invoke (ScriptDictionaryItem(object1.selfuseon, object2.name), parameters)
          handled = true
        }
        else {
          if (HasScript(object1, "selfuseanything")) {
            // TO DO: Would be better to use a delegate for selfuseanything, but need to implement Editor support first
            parameters = NewObjectDictionary()
            dictionary add (parameters, "object", object2)
            do (object1, "selfuseanything", parameters)
            handled = true
          }
        }
      }
    }
    if (not handled) {
      msg (DynamicTemplate("DefaultUseOn", object2, object1))
    }
  </function>
  <function name="DoAskTell" parameters="object, text, property, defaultscript, defaulttemplate"><![CDATA[
    handled = false
    maxstrength = 0
    match = null
    text = LCase(text)
    if (TypeOf(object, property) = "scriptdictionary") {
      dictionary = GetAttribute(object, property)
      foreach (keywords, dictionary) {
        strength = GetKeywordsMatchStrength(LCase(keywords), text)
        if (strength >= maxstrength and strength>0) {
          match = ScriptDictionaryItem(dictionary, keywords)
          maxstrength = strength
        }
      }
      if (match <> null) {
        parameters = NewObjectDictionary()
        dictionary add (parameters, "this", object)
        invoke (match, parameters)
        handled = true
      }
    }
    if (not handled) {
      if (HasScript(object, defaultscript)) {
        d = NewDictionary()
        dictionary add (d, "text", text)
        do (object, defaultscript, d)
      }
      else {
        msg (DynamicTemplate(defaulttemplate, object))
      }
    }
  ]]></function>
  <function name="GetKeywordsMatchStrength" parameters="keywords, input" type="int">
    // Keywords is the subject. We split it into individual words, and then see how well
    // the words in the input match the keywords.
    keywordlist = Split(keywords, " ")
    inputlist = Split(input, " ")
    strength = 0
    foreach (word, inputlist) {
      foreach (keyword, keywordlist) {
        if (StartsWith(word, keyword)) {
          strength = strength + LengthOf(keyword)
        }
      }
    }
    return (strength)
  </function>
  <function name="RandomChance" parameters="percentile" type="boolean"><![CDATA[
    return (GetRandomInt(1,100) <= percentile)
  ]]></function>
  <function name="SetObjectFlagOn" parameters="object, flag">
    set (object, flag, true)
  </function>
  <function name="SetObjectFlagOff" parameters="object, flag">
    set (object, flag, false)
  </function>
  <function name="IncreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) + 1)
  </function>
  <function name="DecreaseObjectCounter" parameters="object, counter">
    if (not HasInt(object, counter)) {
      set (object, counter, 0)
    }
    set (object, counter, GetInt(object, counter) - 1)
  </function>
  <function name="IsSwitchedOn" parameters="object" type="boolean">
    return (GetBoolean(object, "switchedon"))
  </function>
  <function name="AddToInventory" parameters="object">
    object.parent = game.pov
  </function>
  <function name="MoveObject" parameters="object, parent">
    object.parent = parent
  </function>
  <function name="MoveObjectHere" parameters="object">
    object.parent = game.pov.parent
  </function>
  <function name="RemoveObject" parameters="object">
    object.parent = null
  </function>
  <function name="MakeObjectVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeObjectInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="MakeExitVisible" parameters="object">
    object.visible = true
  </function>
  <function name="MakeExitInvisible" parameters="object">
    object.visible = false
  </function>
  <function name="HelperOpenObject" parameters="object">
    object.isopen = true
  </function>
  <function name="HelperCloseObject" parameters="object">
    object.isopen = false
  </function>
  <function name="CloneObject" parameters="object" type="object">
    newobject = Clone(object)
    if (not HasString(object, "alias")) {
      newobject.alias = object.name
    }
    if (not HasAttribute(object, "prototype")) {
      newobject.prototype = object
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMove" parameters="object, newparent" type="object">
    newobject = CloneObject(object)
    newobject.parent = newparent
    return (newobject)
  </function>
  <function name="CloneObjectAndInitialise" parameters="object" type="object">
    newobject = CloneObject(object)
    if (HasScript(newobject, "_initialise_")) {
      do (newobject, "_initialise_")
    }
    return (newobject)
  </function>
  <function name="CloneObjectAndMoveHere" parameters="object" type="object">
    newobject = CloneObject(object)
    newobject.parent = game.pov.parent
    return (newobject)
  </function>
  <function name="LockExit" parameters="exit">
    exit.locked = true
  </function>
  <function name="UnlockExit" parameters="exit">
    exit.locked = false
  </function>
  <function name="SwitchOn" parameters="object">
    object.switchedon = true
  </function>
  <function name="SwitchOff" parameters="object">
    object.switchedon = false
  </function>
  <function name="SetDark" parameters="object">
    object.dark = true
  </function>
  <function name="SetLight" parameters="object">
    object.dark = false
  </function>
  <function name="SetObjectLightstrength" parameters="object, strength">
    if (LengthOf(strength) = 0) {
      object.lightsource = false
    }
    else {
      object.lightsource = true
    }
    object.lightstrength = strength
  </function>
  <function name="SetExitLightstrength" parameters="exit, strength">
    if (LengthOf(strength) = 0) {
      exit.lightsource = false
    }
    else {
      exit.lightsource = true
    }
    exit.lightstrength = strength
  </function>
  <function name="ChangePOV" parameters="object"><![CDATA[
    if (game.pov <> object) {
      game.pov = object
      if (game.gridmap) {
        JS.Grid_ClearAllLayers ()
        Grid_Redraw
      }
      OnEnterRoom (null)
    }
  ]]></function>
  <function name="RequestSave">
    request (RequestSave, "")
  </function>
  <function name="RequestSpeak" parameters="s">
    request (Speak, s)
  </function>
  <function name="ShowMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      count = count + 1
      if (TypeOf(options) = "stringdictionary") {
        optionText = StringDictionaryItem(options, option)
        optiontag = option
        style = GetCurrentLinkTextFormat()
        list add (game.menuoptionskeys, option)
      }
      else if (TypeOf(option) = "string") {
        optionText = option
        optiontag = option
        style = GetCurrentLinkTextFormat()
        list add (game.menuoptionskeys, option)
      }
      else if (TypeOf(option) = "object") {
        optionText = GetDisplayAlias(option)
        optiontag = option.name
        colour = ""
        if (HasString(option, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = option.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        list add (game.menuoptionskeys, option.name)
      }
      else {
        error ("ShowMenu cannot handle a " + TypeOf(option))
      }
      msg (count + ": <a class=\"cmdlink\" style=\"" + style + "\" onclick=\"ASLEvent('ShowMenuResponse','" + EscapeQuotes(optiontag) + "')\">" + optionText + "</a>")
    }
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
  <function name="ShowMenuResponse" parameters="option">
    if (game.menucallback = null) {
      error ("Unexpected menu response")
    }
    else {
      parameters = NewStringDictionary()
      dictionary add (parameters, "result", UnescapeQuotes(option))
      script = game.menucallback
      ClearMenu
      invoke (script, parameters)
    }
  </function>
  <function name="EscapeQuotes" parameters="s" type="string">
    s = Replace(s, "\"", "@@@doublequote@@@")
    s = Replace(s, "\'", "@@@singlequote@@@")
    return (s)
  </function>
  <function name="UnescapeQuotes" parameters="s" type="string">
    s = Replace(s, "@@@doublequote@@@", "\"")
    s = Replace(s, "@@@singlequote@@@", "\'")
    return (s)
  </function>
  <function name="JSSafe" parameters="s" type="string"><![CDATA[
    s = Replace(s, "\"", "")
    s = Replace(s, "\'", "")
    s = Replace(s, " ", "")
    s = Replace(s, ".", "")
    s = Replace(s, ",", "")
    s = Replace(s, "!", "")
    s = Replace(s, "?", "")
    s = Replace(s, "-", "")
    s = Replace(s, "/", "")
    s = Replace(s, "(", "")
    s = Replace(s, ")", "")
    s = Replace(s, "$", "")
    s = Replace(s, "%", "")
    s = Replace(s, "&", "")
    s = Replace(s, "*", "")
    s = Replace(s, "@", "")
    return (s)
  ]]></function>
  <function name="HandleMenuTextResponse" parameters="input" type="boolean"><![CDATA[
    handled = false
    if (IsInt(input)) {
      number = ToInt(input)
      if (number > 0 and number <= ListCount(game.menuoptionskeys)) {
        handled = true
        ShowMenuResponse (StringListItem(game.menuoptionskeys, number - 1))
      }
    }
    return (handled)
  ]]></function>
  <function name="ClearMenu">
    HideOutputSection (game.menuoutputsection)
    game.menuoutputsection = null
    game.menuoptions = null
    game.menucallback = null
  </function>
  <function name="StartNewOutputSection" type="string">
    if (not HasInt(game, "lastoutputsection")) {
      game.lastoutputsection = 0
    }
    game.lastoutputsection = game.lastoutputsection + 1
    name = "section" + game.lastoutputsection
    JS.StartOutputSection (name)
    return (name)
  </function>
  <function name="EndOutputSection" parameters="name">
    JS.EndOutputSection (name)
  </function>
  <function name="HideOutputSection" parameters="name">
    JS.HideOutputSection (name)
  </function>
  <function name="StartTurnOutputSection">
    if (HasString(game, "currentturnoutputsection")) {
      game.lastturnoutputsection = game.currentturnoutputsection
      EndOutputSection (game.currentturnoutputsection)
    }
    game.currentturnoutputsection = StartNewOutputSection()
  </function>
  <function name="HidePreviousTurnOutput">
    if (HasString(game, "lastturnoutputsection")) {
      HideOutputSection (game.lastturnoutputsection)
    }
  </function>
  <function name="Ask" parameters="question, callback">
    options = NewStringList()
    list add (options, "Yes")
    list add (options, "No")
    game.askcallback = callback
    ShowMenu (question, options, false) {
      parameters = NewDictionary()
      if (result = "Yes") {
        boolresult = true
      }
      else {
        boolresult = false
      }
      dictionary add (parameters, "result", boolresult)
      callback = game.askcallback
      game.askcallback = null
      invoke (callback, parameters)
    }
  </function>
  <function name="AllKeysAvailable" parameters="object" type="boolean">
    if (HasObject(object, "key")) {
      if (not HasInt(object,"keycount")) {
        object.keycount = 1
        object.key1 = object.key
      }
      if (not HasObject(object, "key1")) {
        object.key1 = object.key
      }
    }
    for (x, 1, object.keycount) {
      keyname = "key" + ToString(x)
      if (HasObject(object, keyname)) {
        if (not ListContains(ScopeInventory(), GetAttribute(object, keyname))) {
          return (false)
        }
      }
    }
    return (true)
  </function>
  <function name="CreateBiExits" parameters="dir, from, to">
    create exit (dir, from, to)
    create exit (ReverseDirection(dir), to, from)
  </function>
  <function name="Equal" parameters="value1, value2" type="boolean">
    if (not TypeOf(value1) = TypeOf(value2)) {
      return (false)
    }
    if (not value1 = value2) {
      return (false)
    }
    return (true)
  </function>
  <function name="ReverseDirection" parameters="dir" type="string">
    list1 = Split("north;northeast;east;southeast;south;southwest;west;northwest;up;down;in;out", ";")
    list2 = Split("south;southwest;west;northwest;north;northeast;east;southeast;down;up;out;in", ";")
    n = IndexOf(list1, dir)
    if (not n = -1) {
      return (StringListItem(list2, n))
    }
    return (dir)
  </function>
  <function name="PadString" parameters="str, n, pad" type="string"><![CDATA[
    s = ""
    str = "" + str
    pad = "" + pad
    step = LengthOf(pad)
    if (step = 0) {
      error ("Zero length pad in PadString")
    }
    if (pad = " ") {
      pad = "&nbsp;"
    }
    for (i, 1, n - LengthOf(str), step) {
      s = s + pad
    }
    return (s + str)
  ]]></function>
  <function name="Decimalise" parameters="n, places" type="string"><![CDATA[
    negative = (n < 0)
    n = abs(n)
    if (places = 0) {
      return ("" + n)
    }
    factor = pow (10, places)
    pounds = floor(n / factor)
    pennies = n % factor
    result = pounds + "." + PadString(pennies, places, 0)
    if (negative) {
      result = "-" + result
    }
    return (result)
  ]]></function>
  <function name="DisplayNumber" parameters="n, control" type="string"><![CDATA[
    n = abs(n)
    regex = "^(?<before>\\D*)(?<padding>\\d+)(?<sep>\\D)(?<places>\\d*)(?<after>\\D*)$"
    if (not IsRegexMatch(regex, control, "DisplayNumber")) {
      error ("Unexpected format in DisplayNumber (" + control + "). Should be a number, followed by a single character separator, followed by a number.")
    }
    options = Populate(regex, control, "DisplayNumber")
    places = ToInt(StringDictionaryItem(options, "places"))
    padding = ToInt(StringDictionaryItem(options, "padding"))
    if (places > 0) {
      padding = padding + 1 + places
    }
    decimal = Replace(Decimalise(n, places), ".", StringDictionaryItem(options, "sep"))
    return (StringDictionaryItem(options, "before") + PadString(decimal, padding, 0) + StringDictionaryItem(options, "after"))
  ]]></function>
  <function name="DisplayMoney" parameters="n" type="string"><![CDATA[
    // Returns the given number formatted according to game.moneyformat
    if (not HasString(game, "moneyformat")) {
      error ("No format for money set in game.moneyformat.")
    }
    ary = Split(game.moneyformat, "!")
    if (ListCount(ary) = 2) {
      return (Replace(game.moneyformat, "!", "" + n))
    }
    else if (ListCount(ary) = 3) {
      negative = (n < 0)
      n = abs(n)
      options = StringListItem(ary, 1)
      showsign = StartsWith(options, "+")
      if (showsign) {
        options = Mid(options, 2)
      }
      number = DisplayNumber(n, options)
      if (negative) {
        number = "-" + number
      }
      else if (not n = 0 and showsign) {
        number = "+" + number
      }
      return (StringListItem(ary, 0) + number + StringListItem(ary, 2))
    }
    else if (ListCount(ary) = 4) {
      if (n < 0) {
        options = StringListItem(ary, 2)
      }
      else {
        options = StringListItem(ary, 1)
      }
      number = DisplayNumber(n, options)
      return (StringListItem(ary, 0) + number + StringListItem(ary, 3))
    }
    else {
      error ("game.moneyformat expected to have either 1, 2 or 3 exclamation marks.")
    }
  ]]></function>
  <function name="IndexOf" parameters="lst, item" type="int">
    for (i, 0, ListCount(lst) - 1) {
      x = ListItem(lst, i)
      if (x = item) {
        return (i)
      }
    }
    return (-1)
  </function>
  <function name="ObjectListToStringList" parameters="list, att" type="stringlist">
    l = NewStringList()
    foreach (o, list) {
      if (HasString(o, att)) {
        list add (l, GetString(o, att))
      }
    }
    return (l)
  </function>
  <function name="FilterByType" parameters="lst, t" type="objectlist">
    l = NewObjectList()
    foreach (o, lst) {
      if (DoesInherit(o, t)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="FilterByAttribute" parameters="lst, name, value" type="objectlist">
    l = NewObjectList()
    foreach (o, lst) {
      val = GetAttribute(o, name)
      if (Equal(val, value)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="FilterByNotAttribute" parameters="lst, name, value" type="objectlist">
    l = NewObjectList()
    foreach (o, lst) {
      val = GetAttribute(o, name)
      if (not Equal(val, value)) {
        list add (l, o)
      }
    }
    return (l)
  </function>
  <function name="ListCompact" parameters="lst" type="list">
    l = NewList()
    foreach (o, lst) {
      if (not Equal(o, null)) {
        if (IndexOf(l, o) = -1) {
          list add (l, o)
        }
      }
    }
    return (l)
  </function>
  <function name="HandleCommand" parameters="command, metadata"><![CDATA[
    handled = false
    if (game.menucallback <> null) {
      if (HandleMenuTextResponse(command)) {
        handled = true
      }
      else {
        if (game.menuallowcancel) {
          ClearMenu
        }
        else {
          handled = true
        }
      }
    }
    if (not handled) {
      StartTurnOutputSection
      if (StartsWith (command, "*")) {
        msg ("")
        msg (SafeXML (command))
      }
      else {
        shownlink = false
        if (game.echocommand) {
          if (metadata <> null and game.enablehyperlinks and game.echohyperlinks) {
            foreach (key, metadata) {
              if (EndsWith(command, key)) {
                objectname = StringDictionaryItem(metadata, key)
                object = GetObject(objectname)
                if (object <> null) {
                  msg ("")
                  msg ("&gt; " + Left(command, LengthOf(command) - LengthOf(key)) + "{object:" + object.name + "}")
                  shownlink = true
                }
              }
            }
          }
          if (not shownlink) {
            msg ("")
            OutputTextRaw ("&gt; " + SafeXML(command))
          }
        }
        if (game.command_newline) {
          msg ("")
        }
        game.pov.commandmetadata = metadata
        if (game.multiplecommands) {
          commands = Split(command, ".")
          if (ListCount(commands) = 1) {
            game.pov.commandqueue = null
            HandleSingleCommand (Trim(command))
          }
          else {
            game.pov.commandqueue = commands
            HandleNextCommandQueueItem
          }
        }
        else {
          game.pov.commandqueue = null
          HandleSingleCommand (Trim(command))
        }
      }
    }
  ]]></function>
  <function name="HandleNextCommandQueueItem"><![CDATA[
    if (TypeOf(game.pov, "commandqueue") = "stringlist") {
      queuelength = ListCount(game.pov.commandqueue)
      if (queuelength > 0) {
        thiscommand = Trim(StringListItem(game.pov.commandqueue, 0))
        if (queuelength = 1) {
          game.pov.commandqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.commandqueue, i))
          }
          game.pov.commandqueue = newqueue
        }
        if (LengthOf(thiscommand) > 0) {
          HandleSingleCommand (thiscommand)
        }
        else {
          HandleNextCommandQueueItem
        }
      }
    }
  ]]></function>
  <function name="HandleSingleCommand" parameters="command"><![CDATA[
    if (LCase(command) = "again" or LCase(command) = "g") {
      // First handle AGAIN
      if (not game.pov.currentcommand = null) {
        HandleSingleCommand (game.pov.currentcommand)
      }
      else {
        msg ("There is nothing to repeat.")
      }
    }
    else {
      // Check through all commands for any that match
      candidates = NewObjectList()
      foreach (cmd, ScopeCommands()) {
        if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
          list add (candidates, cmd)
        }
      }
      maxstrength = -1
      thiscommand = null
      // Pick the best match
      foreach (candidate, candidates) {
        strength = GetMatchStrength(candidate.pattern, command, candidate.name)
        // favour commands defined later, so an author can override a library command...
        if (strength >= maxstrength) {
          // ... except if the command defined later (candidate) has no parent, and the current best
          // match (thiscommand) does have a parent. We want to favour any commands defined in rooms
          // over global candidates.
          skip = false
          if (thiscommand <> null) {
            if (thiscommand.parent <> null and candidate.parent = null) {
              skip = true
            }
          }
          if (not skip) {
            thiscommand = candidate
            maxstrength = strength
          }
        }
      }
      if (thiscommand = null) {
        if (HasScript(game, "unresolvedcommandhandler")) {
          params = NewDictionary()
          dictionary add (params, "command", command)
          do (game, "unresolvedcommandhandler", params)
        }
        else {
          msg (Template("UnrecognisedCommand"))
        }
        HandleNextCommandQueueItem
      }
      else {
        varlist = Populate(thiscommand.pattern, command, thiscommand.name)
        HandleSingleCommandPattern (command, thiscommand, varlist)
      }
    }
  ]]></function>
  <function name="HandleSingleCommandPattern" parameters="command, thiscommand, varlist">
    // current command string
    game.pov.currentcommand = command
    // current command object
    game.pov.currentcommandpattern = thiscommand
    // string dictionary of variables, e.g. object1="book"; object2="table"
    game.pov.currentcommandvarlist = varlist
    // string list of variables left to resolve
    game.pov.currentcommandvarlistqueue = NewStringList()
    foreach (key, varlist) {
      list add (game.pov.currentcommandvarlistqueue, key)
    }
    // dictionary of resolved elements, e.g. object1=book_object; object2=table_object
    game.pov.currentcommandresolvedelements = NewDictionary()
    // list of resolved elements, e.g. book_object; table_object
    game.pov.currentcommandresolvedobjects = NewObjectList()
    game.pov.currentcommandunresolvedobject = null
    game.pov.currentcommandpendingvariable = null
    ResolveNextName
  </function>
  <function name="ResolveNextName"><![CDATA[
    resolvedall = false
    queuetype = TypeOf(game.pov, "currentcommandvarlistqueue")
    if (queuetype = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandvarlistqueue)
      if (queuelength > 0) {
        // Pop next variable off the queue
        var = StringListItem(game.pov.currentcommandvarlistqueue, 0)
        if (queuelength = 1) {
          game.pov.currentcommandvarlistqueue = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandvarlistqueue, i))
          }
          game.pov.currentcommandvarlistqueue = newqueue
        }
        // Resolve variable
        value = StringDictionaryItem(game.pov.currentcommandvarlist, var)
        if (value <> "") {
          result = null
          resolvinglist = false
          // This is to resolve issue 626
          if (StartsWith(var, "objectexit")) {
            result = ResolveName(var, value, "exit")
          }
          if (result = null) {
            if (StartsWith(var, "object")) {
              if (HasScript(game.pov.currentcommandpattern, "multipleobjects")) {
                game.pov.currentcommandpendingobjectlist = NewObjectList()
                game.pov.currentcommandpendingvariable = var
                do (game.pov.currentcommandpattern, "multipleobjects")
                ResolveNameList (value, "object")
                resolvinglist = true
              }
              else {
                result = ResolveName(var, value, "object")
              }
            }
            else if (StartsWith(var, "exit")) {
              result = ResolveName(var, value, "exit")
            }
            else if (StartsWith(var, "text")) {
              result = StringDictionaryItem(game.pov.currentcommandvarlist, var)
            }
            else {
              error ("Unhandled command variable '" + var + "' - command variable names must begin with 'object', 'exit' or 'text'")
            }
          }
          // at this point, ResolveName has returned - either an object name, unresolved, or pending
          if (result = null) {
            if ((not resolvinglist) and LengthOf(GetString(game.pov, "currentcommandpendingvariable")) = 0) {
              UnresolvedCommand (value, var)
            }
          }
          else {
            AddToResolvedNames (var, result)
          }
        }
        else {
          ResolveNextName
        }
      }
      else {
        resolvedall = true
      }
    }
    else if (queuetype = "null") {
      resolvedall = true
    }
    else {
      error ("Invalid queue type")
    }
    if (resolvedall) {
      // All the objects have been resolved, so now we can actually do the command
      // TO DO: game.lastobjects should be game.pov.lastobjects
      game.lastobjects = game.pov.currentcommandresolvedobjects
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", false)
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isundo")) {
        if (LengthOf(game.pov.currentcommand) > 0) {
          start transaction (game.pov.currentcommand)
        }
      }
      if (not GetBoolean(game.pov.currentcommandpattern, "isoops")) {
        // TO DO: game.unresolved* should be game.pov.unresolved*
        game.unresolvedcommand = null
        game.unresolvedcommandvarlist = null
        game.unresolvedcommandkey = null
      }
      if (HasScript(game.pov.currentcommandpattern, "script")) {
        // This is the bit that actually runs the commands
        do (game.pov.currentcommandpattern, "script", game.pov.currentcommandresolvedelements)
      }
      HandleNextCommandQueueItem
    }
  ]]></function>
  <function name="AddToResolvedNames" parameters="var, result">
    if (TypeOf(result) = "object") {
      if (result.type = "object") {
        list add (game.pov.currentcommandresolvedobjects, result)
      }
    }
    else if (TypeOf(result) = "objectlist") {
      foreach (obj, result) {
        if (obj.type = "object") {
          list add (game.pov.currentcommandresolvedobjects, obj)
        }
      }
    }
    dictionary add (game.pov.currentcommandresolvedelements, var, result)
    ResolveNextName
  </function>
  <function name="ResolveName" parameters="variable, value, objtype" type="object"><![CDATA[
    found = false
    if (game.pov.commandmetadata <> null) {
      if (DictionaryContains(game.pov.commandmetadata, value)) {
        result = GetObject(StringDictionaryItem(game.pov.commandmetadata, value))
        if (result <> null) {
          if (ListContains(ScopeVisible(), result)) {
            found = true
            return (result)
          }
        }
      }
    }
    if (not found) {
      value = LCase(value)
      result = ResolveNameInternal(variable, value, objtype)
      if (result <> null) {
        return (result)
      }
      else {
        // TO DO: Check this behaviour. We only want to try ignoring prefixes if we have definitely got an unresolved name.
        foreach (prefix, game.parserignoreprefixes) {
          if (StartsWith(value, prefix + " ")) {
            result = ResolveNameInternal(variable, Mid(value, LengthOf(prefix) + 1), objtype)
          }
        }
        if (result = null and LengthOf(variable) = 0 and not GetBoolean(game.pov, "currentcommandmultiobjectpending")) {
          UnresolvedCommand (value, game.pov.currentcommandpendingvariable)
        }
        return (result)
      }
    }
  ]]></function>
  <function name="ResolveNameInternal" parameters="variable, value, objtype" type="object">
    game.pov.currentcommandmultiobjectpending = false
    scope = GetScope(variable, value, objtype)
    if (HasString(game.pov.currentcommandpattern, "scope")) {
      secondaryscope = ScopeVisible()
    }
    else {
      secondaryscope = null
    }
    return (ResolveNameFromList(variable, value, objtype, scope, secondaryscope))
  </function>
  <function name="ResolveNameFromList" parameters="variable, value, objtype, scope, secondaryscope" type="object"><![CDATA[
    value = Trim(LCase(value))
    fullmatches = NewObjectList()
    partialmatches = NewObjectList()
    foreach (obj, scope) {
      name = LCase(GetDisplayAlias(obj))
      CompareNames (name, value, obj, fullmatches, partialmatches)
      if (obj.alt <> null) {
        foreach (altname, obj.alt) {
          CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
        }
      }
    }
    // allow referring to objects from the previous command by gender or article
    if (objtype = "object" and game.lastobjects <> null) {
      foreach (obj, game.lastobjects) {
        CompareNames (LCase(obj.article), value, obj, fullmatches, partialmatches)
        CompareNames (LCase(obj.gender), value, obj, fullmatches, partialmatches)
      }
    }
    // Also check the secondary scope, but only if we have not found anything yet
    if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 0 and not secondaryscope = null) {
      foreach (obj, secondaryscope) {
        name = LCase(GetDisplayAlias(obj))
        CompareNames (name, value, obj, fullmatches, partialmatches)
        if (obj.alt <> null) {
          foreach (altname, obj.alt) {
            CompareNames (LCase(altname), value, obj, fullmatches, partialmatches)
          }
        }
      }
    }
    if (ListCount(fullmatches) = 1) {
      return (ListItem(fullmatches, 0))
    }
    else if (ListCount(fullmatches) = 0 and ListCount(partialmatches) = 1) {
      return (ListItem(partialmatches, 0))
    }
    else if (ListCount(fullmatches) + ListCount(partialmatches) = 0) {
      return (null)
    }
    else {
      candidates = ListCompact(fullmatches + partialmatches)
      if (LengthOf(variable) > 0) {
        // single object command, so after showing the menu, add the object to game.pov.currentcommandresolvedelements
        game.pov.currentcommandpendingvariable = variable
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          varname = game.pov.currentcommandpendingvariable
          game.pov.currentcommandpendingvariable = null
          if (result <> null) {
            AddToResolvedNames (varname, GetObject(result))
          }
        }
      }
      else {
        // multi-object command, so after showing the menu, add the object to the list
        game.pov.currentcommandmultiobjectpending = true
        ShowMenu (DynamicTemplate("DisambiguateMenu", value), candidates, true) {
          if (result <> null) {
            list add (game.pov.currentcommandpendingobjectlist, GetObject(result))
            ResolveNextNameListItem
          }
        }
      }
      return (null)
    }
  ]]></function>
  <function name="ResolveNameList" parameters="value, objtype">
    game.pov.currentcommandpendingobjectlist = NewObjectList()
    game.pov.currentcommandpendingobjectlistunresolved = NewStringList()
    game.pov.currentcommandpendingobjecttype = objtype
    inputlist = Split(value, ",")
    foreach (inputbase, inputlist) {
      inputlist2 = Split(inputbase, " " + Template("And") + " ")
      foreach (input, inputlist2) {
        list add (game.pov.currentcommandpendingobjectlistunresolved, input)
      }
    }
    ResolveNextNameListItem
  </function>
  <function name="ResolveNextNameListItem"><![CDATA[
    resolvedall = false
    if (TypeOf(game.pov, "currentcommandpendingobjectlistunresolved") = "stringlist") {
      queuelength = ListCount(game.pov.currentcommandpendingobjectlistunresolved)
      if (queuelength > 0) {
        thisitem = Trim(StringListItem(game.pov.currentcommandpendingobjectlistunresolved, 0))
        if (queuelength = 1) {
          game.pov.currentcommandpendingobjectlistunresolved = null
        }
        else {
          newqueue = NewStringList()
          for (i, 1, queuelength - 1) {
            list add (newqueue, StringListItem(game.pov.currentcommandpendingobjectlistunresolved, i))
          }
          game.pov.currentcommandpendingobjectlistunresolved = newqueue
        }
        ResolveNameListItem (Trim(thisitem))
      }
      else {
        resolvedall = true
      }
    }
    else {
      resolvedall = true
    }
    if (resolvedall) {
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectlist)
    }
  ]]></function>
  <function name="ResolveNameListItem" parameters="value"><![CDATA[
    if (ListContains(game.allobjects, value)) {
      // value is "all"
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
      ResolveNameListItemFinished (game.pov.currentcommandpendingobjectscope)
    }
    else {
      object = ResolveName("", value, game.pov.currentcommandpendingobjecttype)
      if (object <> null) {
        if (not ListContains(game.pov.currentcommandpendingobjectlist, object)) {
          list add (game.pov.currentcommandpendingobjectlist, object)
        }
        ResolveNextNameListItem
      }
    }
  ]]></function>
  <function name="ResolveNameListItemFinished" parameters="result"><![CDATA[
    if (ListCount(result) > 1) {
      if (not DictionaryContains(game.pov.currentcommandresolvedelements, "multiple")) {
        dictionary add (game.pov.currentcommandresolvedelements, "multiple", true)
      }
    }
    AddToResolvedNames (game.pov.currentcommandpendingvariable, result)
  ]]></function>
  <function name="UnresolvedCommand" parameters="objectname, varname"><![CDATA[
    // TO DO: Update names below, we don't need these two variables
    unresolvedobject = objectname
    unresolvedkey = varname
    if (HasString(game.pov.currentcommandpattern, "unresolved")) {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (game.pov.currentcommandpattern.unresolved + " (" + unresolvedobject + ")")
      }
      else {
        msg (game.pov.currentcommandpattern.unresolved)
      }
    }
    else {
      if (ListCount(game.pov.currentcommandvarlist) > 1) {
        msg (Template("UnresolvedObject") + " (" + unresolvedobject + ")")
      }
      else {
        msg (Template("UnresolvedObject"))
      }
    }
    game.unresolvedcommand = game.pov.currentcommandpattern
    game.unresolvedcommandvarlist = game.pov.currentcommandvarlist
    game.unresolvedcommandkey = unresolvedkey
  ]]></function>
  <function name="HandleMultiVerb" parameters="object, property, object2, default">
    dictionary = GetAttribute(object, property)
    if (DictionaryContains(dictionary, object2.name)) {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      invoke (ScriptDictionaryItem(dictionary, object2.name), parameters)
    }
    else {
      parameters = NewDictionary()
      dictionary add (parameters, "this", object)
      dictionary add (parameters, "object", object2)
      if (DictionaryContains(dictionary, "default")) {
        invoke (ScriptDictionaryItem(dictionary, "default"), parameters)
      }
      else {
        msg (default)
      }
    }
  </function>
  <function name="GetScope" parameters="variable, value, objtype" type="list"><![CDATA[
    // CHANGE PIX: Returns a list, not an objectlist because that is what ListCombine gives us
    // msg("In GetScope")
    // msg("variable=" + variable)
    // msg("value=" + value)
    // msg("objtype=" + objtype)
    items = NewObjectList()
    if (HasString(game.pov.currentcommandpattern, "scope")) {
      scoping = GetScoping(game.pov.currentcommandpattern.scope, variable)
      // CHANGE: the "scope" for a command can now be a comma-separated list of the accepted values
      foreach (partscope, Split(scoping, ";")) {
        switch (partscope) {
          case ("inventory") {
            items = ListCombine(items, ScopeInventory())
          }
          case ("notheld", "room") {
            items = ListCombine(items, ScopeVisibleNotHeld()) - game.pov
          }
          case ("all") {
            items = ListCombine(items, ScopeVisible()) - game.pov
          }
          case ("container") {
            items = ListCombine(items, FilterByType(ScopeVisible(), "container_base"))
          }
          case ("contents") {
            foreach (cont, FilterByType(ScopeVisible(), "container_base")) {
              items = ListCombine(items, GetAllChildObjects(cont))
            }
          }
          case ("world") {
            items = ListCombine(items, AllObjects())
          }
          case ("none") {
          }
          default {
            // The command's "scope" can be the name of an object, or an attribute of the player's parent
            obj = GetObject(partscope)
            if (not obj = null) {
              items = ListCombine(items, GetAllChildObjects(obj))
            }
            if (HasObject(game.pov.parent, partscope)) {
              obj = GetAttribute(game.pov.parent, partscope)
              items = ListCombine(items, GetAllChildObjects(obj))
            }
            else if (HasAttribute(game.pov.parent, partscope)) {
              attr = GetAttribute(game.pov.parent, partscope)
              if (TypeOf(attr) = "objectlist") {
                items = ListCombine (items, attr)
              }
            }
          }
        }
      }
    }
    else if (objtype = "object") {
      items = ScopeVisible()
    }
    else if (objtype = "exit") {
      items = ScopeExits()
    }
    else {
      // Should never get here!
      // CHANGE: Should still never get here, but we don't return null.
      // If we get here somehow, trust user's scripts to define scope.
    }
    items = ListCompact(items)
    // CHANGE: Run the script 'changecommandscope' (if it exists) for the game object, the player's room and
    // containing rooms, and the current command. This allows the user to change command scope on a per-location
    // or per-command basis
    // This script gets an "items" list parameter, like `scopebackdrop` script does; but also has parameters
    // 'command', 'variable', and 'objtype', so the user can adjust their script to give different item lists
    // for different commands, or different variables within a command.
    objectswithscripts = NewObjectList()
    if (HasScript(game.pov.currentcommandpattern, "changecommandscope")) {
      list add (objectswithscripts, game.pov.currentcommandpattern)
    }
    room = game.pov
    while (not room = null) {
      if (HasScript(room, "changecommandscope")) {
        list add (objectswithscripts, room)
      }
      room = room.parent
    }
    if (HasScript(game, "changecommandscope")) {
      list add (objectswithscripts, game)
    }
    if (ListCount(objectswithscripts) > 0) {
      params = NewDictionary()
      dictionary add (params, "items", items)
      dictionary add (params, "command", game.pov.currentcommandpattern)
      dictionary add (params, "variable", variable)
      dictionary add (params, "objtype", objtype)
      dictionary add (params, "matched", game.pov.currentcommandresolvedelements)
      foreach (o, objectswithscripts) {
        do (o, "changecommandscope", params)
      }
      items = ListCompact(items)
    }
    return (items)
  ]]></function>
  <function name="GetScoping" parameters="scopestring, variable" type="string">
    lst = Split(scopestring, "|")
    if (ListCount(lst) = 1) {
      return (scopestring)
    }
    foreach (s, lst) {
      if (StartsWith(s, variable + "=")) {
        return (Mid(s, LengthOf(variable) + 2))
      }
    }
    return ("all")
  </function>
  <function name="CompareNames" parameters="name, value, obj, fullmatches, partialmatches"><![CDATA[
    if (name = value) {
      if (not ListContains(fullmatches, obj)) {
        list add (fullmatches, obj)
      }
    }
    else {
      if (StartsWith(name, value)) {
        if (not ListContains(partialmatches, obj)) {
          list add (partialmatches, obj)
        }
      }
      else {
        // check if input matches the start of any word in the name
        if (Instr(name, " " + value) > 0) {
          if (not ListContains(partialmatches, obj)) {
            list add (partialmatches, obj)
          }
        }
      }
    }
  ]]></function>
  <function name="GenerateMenuChoices" parameters="dictionary, objects">
    msg ("WARNING: GenerateMenuChoices is deprecated as ShowMenu can handle lists with objects")
    foreach (obj, objects) {
      if (not DictionaryContains(dictionary, obj.name)) {
        dictionary add (dictionary, obj.name, GetDisplayAlias(obj))
      }
    }
  </function>
  <function name="GetPlacesObjectsList" type="objectlist">
    return (ListExclude(ScopeVisibleNotHeldNotScenery(), game.pov))
  </function>
  <function name="GetExitsList" type="objectlist">
    return (RemoveLookOnlyExits(RemoveSceneryObjects(ScopeExits())))
  </function>
  <function name="ScopeInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsVisible(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeReachableInventory" type="objectlist">
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(game.pov)) {
      if (ContainsReachable(game.pov, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotHeld" type="objectlist">
    return (ScopeVisibleNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room))
      list add (result, game.pov)
      return (result)
    }
    else {
      return (ListCombine(ScopeReachableNotHeldForRoom(room), ScopeVisibleNotReachableForRoom(room)))
    }
  </function>
  <function name="ScopeVisibleNotHeldNotScenery" type="objectlist">
    return (ScopeVisibleNotHeldNotSceneryForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotHeldNotSceneryForRoom" parameters="room" type="objectlist">
    return (RemoveSceneryObjects(ScopeVisibleNotHeldForRoom(room)))
  </function>
  <function name="ScopeReachable" type="objectlist">
    return (ScopeReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeReachableForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      result = ListCombine(ScopeReachableNotHeldForRoom(room), ScopeReachableInventory())
      list add (result, game.pov)
    }
    else {
      result = ScopeReachableNotHeldForRoom(room)
    }
    return (result)
  </function>
  <function name="ScopeVisibleNotReachable" type="objectlist">
    return (ScopeVisibleNotReachableForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleNotReachableForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    exclude = ScopeReachableForRoom(room)
    list add (exclude, game.pov)
    newParent = GetNonTransparentParent(room)
    foreach (obj, GetAllChildObjects(newParent)) {
      if (ContainsVisible(newParent, obj) and not ListContains(exclude, obj)) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="GetNonTransparentParent" parameters="room" type="object">
    if (GetBoolean(room, "transparent")) {
      if (room.parent = null) {
        return (room)
      }
      else {
        return (GetNonTransparentParent(room.parent))
      }
    }
    else {
      return (room)
    }
  </function>
  <function name="ScopeReachableNotHeld" type="objectlist">
    return (ScopeReachableNotHeldForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleLightsource" parameters="lightstrength" type="objectlist">
    result = ScopeVisible()
    lightobjects = NewObjectList()
    foreach (obj, result) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    exits = ScopeExits()
    foreach (obj, exits) {
      if (GetBoolean(obj, "lightsource") and GetString(obj, "lightstrength") = lightstrength) {
        list add (lightobjects, obj)
      }
    }
    return (lightobjects)
  </function>
  <function name="ScopeReachableNotHeldForRoom" parameters="room" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, GetAllChildObjects(room)) {
      if (ContainsReachable(room, obj) and obj <> game.pov and not Contains(game.pov, obj)) {
        list add (result, obj)
      }
    }
    if (HasScript(game, "scopebackdrop")) {
      dict = NewDictionary()
      dictionary add (dict, "items", result)
      do (game, "scopebackdrop", dict)
    }
    return (result)
  ]]></function>
  <function name="ScopeVisible" type="objectlist">
    return (ScopeVisibleForRoom(game.pov.parent))
  </function>
  <function name="ScopeVisibleForRoom" parameters="room" type="objectlist">
    if (room = game.pov.parent) {
      return (ListCombine(ScopeVisibleNotHeldForRoom(room), ScopeInventory()))
    }
    else {
      return (ScopeVisibleNotHeldForRoom(room))
    }
  </function>
  <function name="ScopeExits" type="objectlist">
    return (ScopeExitsForRoom(game.pov.parent))
  </function>
  <function name="ScopeExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>
  <function name="ScopeUnlockedExitsForRoom" parameters="room" type="objectlist">
    result = NewObjectList()
    foreach (exit, AllExits()) {
      if (exit.parent = room) {
        if (exit.visible and not exit.locked) {
          if (GetBoolean(room, "darklevel")) {
            if (GetBoolean(exit, "lightsource")) {
              list add (result, exit)
            }
          }
          else {
            list add (result, exit)
          }
        }
      }
    }
    return (result)
  </function>
  <function name="ScopeCommands" type="objectlist">
    result = NewObjectList()
    foreach (command, AllCommands()) {
      if (command.parent = null or command.parent = game.pov.parent) {
        list add (result, command)
      }
      if (not game.pov.parent.parent = null) {
        if (command.parent = game.pov.parent.parent) {
          list add (result, command)
        }
      }
    }
    return (result)
  </function>
  <function name="GetBlockingObject" parameters="obj" type="object">
    result = null
    foreach (obj, ListParents(obj)) {
      if (result = null and not CanReachThrough(obj)) {
        result = obj
      }
    }
    return (result)
  </function>
  <function name="ListParents" parameters="obj" type="objectlist"><![CDATA[
    result = NewObjectList()
    if (obj.parent <> null) {
      parent_as_list = NewObjectList()
      list add (parent_as_list, obj.parent)
      result = ListCombine(parent_as_list, ListParents(obj.parent))
    }
    return (result)
  ]]></function>
  <function name="ContainsVisible" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, false))
  </function>
  <function name="ContainsReachable" parameters="parentObj, searchObj" type="boolean">
    return (ContainsAccessible(parentObj, searchObj, true))
  </function>
  <function name="ContainsAccessible" parameters="parentObj, searchObj, onlyReachable" type="boolean">
    if (not HasObject(searchObj, "parent")) {
      return (false)
    }
    else if (not searchObj.visible) {
      return (false)
    }
    else if (GetBoolean(parentObj, "darklevel") and not GetBoolean(searchObj, "lightsource")) {
      return (false)
    }
    else {
      if (searchObj.parent = null) {
        return (false)
      }
      else if (searchObj.parent = parentObj) {
        return (true)
      }
      else {
        if (onlyReachable) {
          canAdd = CanReachThrough(searchObj.parent)
        }
        else {
          canAdd = CanSeeThrough(searchObj.parent)
        }
        if (canAdd) {
          return (ContainsAccessible(parentObj, searchObj.parent, onlyReachable))
        }
        else {
          return (false)
        }
      }
    }
  </function>
  <function name="GetVolume" parameters="obj, allinclusive" type="int">
    result = 0
    foreach (object, GetAllChildObjects ( obj )) {
      if (HasInt(object, "volume")) {
        result = result + object.volume
      }
    }
    if (allinclusive and HasInt(obj, "volume")) {
      result = result + obj.volume
    }
    return (result)
  </function>
  <function name="CanSeeThrough" parameters="obj" type="boolean">
    return ((GetBoolean(obj, "transparent") or CanReachThrough(obj)) and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="CanReachThrough" parameters="obj" type="boolean">
    return (GetBoolean(obj, "isopen") and not GetBoolean(obj, "hidechildren"))
  </function>
  <function name="Got" parameters="obj" type="boolean">
    return (ListContains(ScopeInventory(), obj))
  </function>
  <function name="UpdateObjectLinks">
    if (game.enablehyperlinks) {
      data = NewStringDictionary()
      foreach (object, ScopeVisible()) {
        dictionary add (data, object.name, Join(GetDisplayVerbs(object), "/"))
      }
      JS.updateObjectLinks (data)
      exits = NewStringList()
      foreach (exit, ScopeExits()) {
        list add (exits, exit.name)
      }
      JS.updateExitLinks (exits)
      commands = NewStringList()
      foreach (cmd, ScopeCommands()) {
        list add (commands, cmd.name)
      }
      JS.updateCommandLinks (commands)
    }
  </function>
  <function name="SecondaryScopeReachableForRoom" parameters="room" type="objectlist">
    return (NewObjectList())
  </function>
  <function name="ShowRoomDescription"><![CDATA[
    isDark = CheckDarkness()
    if (isDark) {
      descriptionfield = "darkroomdescription"
    }
    else {
      descriptionfield = "description"
    }
    if (game.autodescription) {
      desc = ""
      for (i, 1, 4) {
        if (i = game.autodescription_youarein) {
          if (game.autodescription_youarein_useprefix) {
            youarein = game.pov.parent.descprefix
            desc = AddDescriptionLine (desc, youarein + " " + GetDisplayName(game.pov.parent) + ".")
          }
          else {
            desc = AddDescriptionLine (desc, "<b>" + CapFirst(GetDisplayName(game.pov.parent)) + "</b>")
          }
          if (game.autodescription_youarein_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcansee) {
          objects = FormatObjectList(game.pov.parent.objectslistprefix, GetNonTransparentParent(game.pov.parent), Template("And"), ".")
          desc = AddDescriptionLine(desc, objects)
          if (game.autodescription_youcansee_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_youcango) {
          exits = FormatExitList(game.pov.parent.exitslistprefix, GetExitsList(), Template("Or"), ".")
          desc = AddDescriptionLine(desc, exits)
          if (game.autodescription_youcango_newline) {
            msg (desc + "<br/>")
            desc = ""
          }
        }
        if (i = game.autodescription_description) {
          if (HasScript(game.pov.parent, descriptionfield)) {
            if (LengthOf(desc) > 0) {
              msg (desc)
              desc = ""
            }
            do (game.pov.parent, descriptionfield)
            if (game.autodescription_description_newline) {
              msg ("")
            }
          }
          else {
            desc = AddDescriptionLine(desc, GetRoomDescription())
            if (game.autodescription_description_newline) {
              msg (desc + "<br/>")
              desc = ""
            }
          }
        }
      }
      if (LengthOf(desc) > 0) {
        msg (desc)
      }
    }
    else {
      if (HasScript(game.pov.parent, descriptionfield)) {
        do (game.pov.parent, descriptionfield)
      }
      else {
        fulldesc = GetRoomDescription()
        if (LengthOf(fulldesc) > 0) {
          msg (fulldesc)
        }
      }
    }
  ]]></function>
  <function name="AddDescriptionLine" parameters="desc, line" type="string"><![CDATA[
    if (LengthOf(line) > 0) {
      if (LengthOf(desc) > 0) {
        msg (desc)
        desc = ""
      }
      desc = desc + line
    }
    return (desc)
  ]]></function>
  <function name="GetRoomDescription" type="string"><![CDATA[
    fulldesc = ""
    if (CheckDarkness()) {
      if (HasString(game.pov.parent, "darkroomdescription")) {
        if (LengthOf(game.pov.parent.darkroomdescription) > 0) {
          fulldesc = game.pov.parent.darkroomdescription
        }
      }
      // Added by The Pixie to correct what appears to be a bug
      if (fulldesc = "") {
        fulldesc = DynamicTemplate("LookAtDarkness", game.pov.parent)
      }
    }
    else {
      if (HasString(game.pov.parent, "description")) {
        if (LengthOf(game.pov.parent.description) > 0) {
          fulldesc = game.pov.parent.description
        }
      }
    }
    if (game.appendobjectdescription) {
      foreach (val, ScopeVisibleNotHeld()) {
        if (HasString(val, "inroomdescription")) {
          if (LengthOf(val.inroomdescription) > 0 and val <> game.pov) {
            fulldesc = fulldesc + " " + val.inroomdescription
          }
        }
      }
    }
    return (Trim(fulldesc))
  ]]></function>
  <function name="OnEnterRoom" parameters="oldRoom"><![CDATA[
    game.displayroomdescriptiononstart = false
    if (IsDefined("oldRoom")) {
      if (oldRoom <> null) {
        if (game.clearscreenonroomenter) {
          ClearScreen
          if (not game.currentexitmessage = null) {
            msg (game.currentexitmessage)
            game.currentexitmessage = null
          }
        }
        if (HasScript(oldRoom, "onexit")) {
          do (oldRoom, "onexit")
        }
      }
    }
    on ready {
      if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "beforefirstenter")) {
        do (game.pov.parent, "beforefirstenter")
      }
      on ready {
        if (HasScript(game.pov.parent, "beforeenter")) {
          do (game.pov.parent, "beforeenter")
        }
        on ready {
          if (game.gridmap) {
            Grid_CalculateMapCoordinates (game.pov.parent, game.pov)
            Grid_DrawPlayerInRoom (game.pov.parent)
          }
          if (IsDefined("oldRoom")) {
            if (oldRoom <> null and game.changeroom_newline and not game.command_newline) {
              msg ("")
            }
          }
          request (UpdateLocation, CapFirst(GetDisplayName(game.pov.parent)))
          roomFrameExists = false
          if (HasString(game.pov.parent, "picture")) {
            if (LengthOf(game.pov.parent.picture) > 0) {
              roomFrameExists = true
              SetFramePicture (game.pov.parent.picture)
            }
          }
          if (game.clearframe and not roomFrameExists) {
            ClearFramePicture
          }
          if (game.showdescriptiononenter) {
            ShowRoomDescription
          }
          if (HasScript( game, "roomenter")) {
            do (game, "roomenter")
          }
          on ready {
            if ((not GetBoolean(game.pov.parent, "visited")) and HasScript(game.pov.parent, "firstenter")) {
              do (game.pov.parent, "firstenter")
            }
            on ready {
              if (HasScript(game.pov.parent, "enter")) {
                do (game.pov.parent, "enter")
              }
            }
            set (game.pov.parent, "visited", true)
          }
        }
      }
    }
  ]]></function>
  <function name="FormatObjectList" parameters="preList, parent, preFinal, postList" type="string"><![CDATA[
    result = ""
    count = 0
    list = RemoveSceneryObjects(GetDirectChildren(parent))
    if (CheckDarkness()) {
      list = RemoveDarkObjects(list)
    }
    listLength = ListCount(list)
    foreach (item, list) {
      if (LengthOf(result) = 0) {
        result = preList + " "
      }
      result = result + GetDisplayNameLink(item, "object")
      if (CanSeeThrough(item)) {
        result = result + FormatObjectList(" (" + item.contentsprefix, item, preFinal, ")")
      }
      count = count + 1
      if (count = listLength - 1) {
        result = result + " " + preFinal + " "
      }
      else if (count < listLength) {
        result = result + ", "
      }
      else {
        result = result + postList
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveSceneryObjects" parameters="list" type="objectlist"><![CDATA[
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.scenery and obj <> game.pov and obj.visible) {
        list add (result, obj)
      }
    }
    return (result)
  ]]></function>
  <function name="RemoveLookOnlyExits" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (not obj.lookonly) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="RemoveDarkObjects" parameters="list" type="objectlist">
    result = NewObjectList()
    foreach (obj, list) {
      if (GetBoolean(obj, "lightsource") or obj.parent = game.pov) {
        list add (result, obj)
      }
    }
    return (result)
  </function>
  <function name="FormatExitList" parameters="preList, list, preFinal, postList" type="string"><![CDATA[
    result = ""
    listLength = ListCount(list)
    if (listLength > 0) {
      count = 0
      result = preList + " "
      foreach (item, list) {
        result = result + GetDisplayNameLink(item, "exit")
        count = count + 1
        if (count = listLength - 1) {
          result = result + " " + preFinal + " "
        }
        else if (count < listLength) {
          result = result + ", "
        }
      }
      result = result + postList
    }
    return (result)
  ]]></function>
  <function name="GetDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "alias")) {
      result = obj.alias
    }
    else {
      result = obj.name
    }
    return (result)
  </function>
  <function name="GetDisplayName" parameters="obj" type="string">
    return (GetDisplayNameLink(obj, ""))
  </function>
  <function name="GetDisplayNameLink" parameters="obj, type" type="string"><![CDATA[
    verbs = GetDisplayVerbs(obj)
    if (verbs <> null) {
      verbCount = ListCount(verbs)
    }
    else {
      verbCount = 0
    }
    if (type = "exit" and verbCount = 1) {
      if (not game.enablehyperlinks) {
        result = GetDisplayAlias(obj)
      }
      else {
        result = "{exit:" + obj.name + "}"
      }
    }
    else if (type = "") {
      result = GetDisplayAlias(obj)
    }
    else {
      result = "{object:" + obj.name + "}"
    }
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else if (type = "exit") {
      prefix = ""
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    result = prefix + result
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>
  <function name="ObjectLink" parameters="obj" type="string">
    return ("{object:" + obj.name + "}")
  </function>
  <function name="GetListDisplayAlias" parameters="obj" type="string">
    if (HasString(obj, "listalias")) {
      result = obj.listalias
    }
    else {
      result = GetDisplayAlias(obj)
    }
    return (result)
  </function>
  <function name="CheckDarkness" type="boolean"><![CDATA[
    roomCheckDarkness = true
    if (GetBoolean(game.pov.parent, "dark")) {
      if (ListCount(ScopeVisibleLightsource("strong")) > 0) {
        roomCheckDarkness = false
      }
    }
    else {
      roomCheckDarkness = false
    }
    game.pov.parent.darklevel = roomCheckDarkness
    return (roomCheckDarkness)
  ]]></function>
  <function name="EnableTimer" parameters="timer">
    timer.enabled = true
    timer.trigger = game.timeelapsed + timer.interval
  </function>
  <function name="DisableTimer" parameters="timer">
    timer.enabled = false
  </function>
  <function name="SetTimerInterval" parameters="timer, interval">
    timer.interval = interval
  </function>
  <function name="SetTimerScript" parameters="timer, script">
    timer.script = script
  </function>
  <function name="SetTimeout" parameters="interval, script">
    SetTimeoutID (interval, "", script)
  </function>
  <function name="SetTimeoutID" parameters="interval, name, script">
    timername = ""
    if (name = "") {
      timername = GetUniqueElementName("timeout")
    }
    else {
      if (GetTimer(name) = null and GetObject(name) = null) {
        timername = name
      }
      else {
        error ("Error creating timer: There is already an existing object named " + name)
      }
    }
    if (not timername = "") {
      create timer (timername)
      timer = GetTimer(timername)
      SetTimerInterval (timer, interval)
      timer.timeoutscript = script
      SetTimerScript (timer) {
        this.enabled = false
        invoke (this.timeoutscript)
        destroy (this.name)
      }
      EnableTimer (timer)
    }
  </function>
  <function name="Pause" parameters="interval">
    request (Pause, ToString(interval * 1000))
  </function>
  <function name="RunTurnScripts">
    if (IsGameRunning()) {
      if (game.menucallback = null) {
        foreach (turnscript, ObjectListSort(AllTurnScripts(), "name")) {
          if (GetBoolean(turnscript, "enabled")) {
            inscope = false
            if (turnscript.parent = game or turnscript.parent = null) {
              inscope = true
            }
            else {
              if (Contains(turnscript.parent, game.pov)) {
                inscope = true
              }
            }
            if (inscope) {
              do (turnscript, "script")
            }
          }
        }
      }
    }
  </function>
  <function name="EnableTurnScript" parameters="turnscript">
    turnscript.enabled = true
  </function>
  <function name="DisableTurnScript" parameters="turnscript">
    turnscript.enabled = false
  </function>
  <function name="SetTurnScript" parameters="turnscript, script">
    turnscript.script = script
  </function>
  <function name="SetTurnTimeout" parameters="turncount, script">
    SetTurnTimeoutID (turncount, "", script)
  </function>
  <function name="SetTurnTimeoutID" parameters="turncount, name, script"><![CDATA[
    turnscriptname = ""
    if (name = "") {
      turnscriptname = GetUniqueElementName("turnscript")
    }
    else {
      if (GetObject(name) = null and GetTimer(name) = null) {
        turnscriptname = name
      }
      else {
        error ("Error creating turnscript: There is already an existing object named " + name)
      }
    }
    if (not turnscriptname="") {
      create turnscript (turnscriptname)
      turnscript = GetObject(turnscriptname)
      turnscript.turncount = 0
      turnscript.triggerturncount = turncount
      turnscript.timeoutscript = script
      SetTurnScript (turnscript) {
        this.turncount = this.turncount + 1
        if (this.turncount >= this.triggerturncount) {
          this.enabled = false
          invoke (this.timeoutscript)
          destroy (this.name)
        }
      }
      EnableTurnScript (turnscript)
    }
  ]]></function>
  <function name="UpdateStatusAttributes">
    status = AddStatusAttributesForElement("", game, game.statusattributes)
    status = AddStatusAttributesForElement(status, game.pov, game.povstatusattributes)
    status = AddStatusAttributesForElement(status, game.pov, game.pov.statusattributes)
    request (SetStatus, status)
  </function>
  <function name="AddStatusAttributesForElement" parameters="status, element, statusAttributes" type="string"><![CDATA[
    if (statusAttributes <> null) {
      foreach (attr, statusAttributes) {
        if (LengthOf(status) > 0) {
          status = status + "\n"
        }
        status = status + FormatStatusAttribute(attr, GetAttribute(element, attr), StringDictionaryItem(statusAttributes, attr))
      }
    }
    return (status)
  ]]></function>
  <function name="FormatStatusAttribute" parameters="attr, value, format" type="string">
    if (LengthOf(format) = 0) {
      return (CapFirst(attr) + ": " + value)
    }
    else {
      if (TypeOf(value) = "int" and attr = "money" and HasString(game, "moneyformat")) {
        value = DisplayMoney(value)
      }
      else if (TypeOf(value) = "int" or TypeOf(value) = "double") {
        value = ToString(value)
      }
      else if (TypeOf(value) = "null") {
        value = ""
      }
      return (Replace(format, "!", value))
    }
  </function>
  <function name="InitStatusAttributes">
    if (game.showscore) {
      game.score = 0
      if (game.statusattributes = null) {
        game.statusattributes = NewStringDictionary()
      }
      dictionary add (game.statusattributes, "score", "Score: !")
    }
    if (game.showhealth) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "health", "Health: !%")
    }
    if (game.showmoney) {
      if (game.povstatusattributes = null) {
        game.povstatusattributes = NewStringDictionary()
      }
      dictionary add (game.povstatusattributes, "money", "Money: !")
    }
  </function>
  <function name="IncreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score + amount
  </function>
  <function name="DecreaseScore" parameters="amount">
    if (not HasInt(game, "score")) {
      error ("Score is not configured. To enable score, go to 'game' and tick 'Show score' on the Player tab.")
    }
    game.score = game.score - amount
  </function>
  <function name="IncreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health + amount
  </function>
  <function name="DecreaseHealth" parameters="amount">
    if (not HasInt(game.pov, "health")) {
      error ("Health is not configured. To enable health, go to 'game' and tick 'Show health' on the Player tab.")
    }
    game.pov.health = game.pov.health - amount
  </function>
  <function name="IncreaseMoney" parameters="amount">
    if (not HasInt(game.pov, "money")) {
      error ("Money is not configured. To enable money, go to 'game' and tick 'Show money' on the Player tab.")
    }
    game.pov.money = game.pov.money + amount
  </function>
  <function name="DecreaseMoney" parameters="amount">
    if (not HasInt(game.pov, "money")) {
      error ("Money is not configured. To enable money, go to 'game' and tick 'Show money' on the Player tab.")
    }
    game.pov.money = game.pov.money - amount
  </function>
  <function name="OutputText" parameters="text">
    OutputTextRaw (ProcessText(text))
  </function>
  <function name="OutputTextRaw" parameters="text"><![CDATA[
    format = GetCurrentTextFormat("")
    JS.addText ("<span style=\"" + format + "\">" + text + "</span><br/>")
    if (GetString(game, "commandbarformat") <> format) {
      ResetCommandBarFormat
    }
    request (Speak, text)
  ]]></function>
  <function name="ResetCommandBarFormat">
    format = GetCurrentTextFormat("") + ";background:" + game.defaultbackground
    game.commandbarformat = format
    JS.setCommandBarStyle (format)
  </function>
  <function name="OutputTextNoBr" parameters="text">
    OutputTextRawNoBr (ProcessText(text))
  </function>
  <function name="OutputTextRawNoBr" parameters="text"><![CDATA[
    JS.addText ("<span style=\"" + GetCurrentTextFormat("") + "\">" + text + "</span>")
    request (Speak, text)
  ]]></function>
  <function name="GetCurrentTextFormat" parameters="colour" type="string"><![CDATA[
    style = ""
    if (UIOptionUseGameFont()) {
      font = GetCurrentFontFamily()
    }
    else {
      font = GetUIOption("OverrideFontName")
    }
    if (LengthOf(font) > 0) {
      style = style + "font-family:" + font + ";"
    }
    if (LengthOf(colour) = 0) {
      if (UIOptionUseGameColours()) {
        colour = game.defaultforeground
      }
      else {
        colour = GetUIOption("OverrideForeground")
      }
    }
    if (LengthOf(colour) > 0) {
      style = style + "color:" + colour + ";"
    }
    if (UIOptionUseGameFont()) {
      size = game.defaultfontsize
    }
    else {
      size = ToDouble(GetUIOption("OverrideFontSize"))
    }
    if (size > 0) {
      style = style + "font-size:" + ToString(size) + "pt;"
    }
    return (style)
  ]]></function>
  <function name="GetCurrentLinkTextFormat" type="string">
    return (GetCurrentTextFormat(GetLinkTextColour()))
  </function>
  <function name="UIOptionUseGameFont" type="boolean">
    value = GetUIOption("UseGameFont")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="UIOptionUseGameColours" type="boolean">
    value = GetUIOption("UseGameColours")
    if (value = null or value = "true") {
      return (true)
    }
    else {
      return (false)
    }
  </function>
  <function name="GetLinkTextColour" type="string">
    if (UIOptionUseGameColours()) {
      return (game.defaultlinkforeground)
    }
    else {
      return (GetUIOption("OverrideLinkForeground"))
    }
  </function>
  <function name="ProcessText" parameters="text" type="string">
    data = NewDictionary()
    dictionary add (data, "fulltext", text)
    text = ProcessTextSection(text, data)
    return (Replace(Replace(text, "@@@open@@@", "{"), "@@@close@@@", "}"))
  </function>
  <function name="ProcessTextSection" parameters="text, data" type="string"><![CDATA[
    containsUnprocessedSection = false
    open = Instr(text, "{")
      if (open > 0) {
        nestCount = 1
        searchStart = open + 1
        finished = false
        while (not finished) {
          nextOpen = Instr(searchStart, text, "{")
            nextClose = Instr(searchStart, text, "}")
          if (nextClose > 0) {
            if (nextOpen > 0 and nextOpen < nextClose) {
              nestCount = nestCount + 1
              searchStart = nextOpen + 1
            }
            else {
              nestCount = nestCount - 1
              searchStart = nextClose + 1
              if (nestCount = 0) {
                close = nextClose
                containsUnprocessedSection = true
                finished = true
              }
            }
          }
          else {
            finished = true
          }
        }
      }
      if (containsUnprocessedSection) {
        section = Mid(text, open + 1, close - open - 1)
        value = ProcessTextCommand(section, data)
        value = ProcessTextSection(value, data)
        text = Left(text, open - 1) + value + ProcessTextSection(Mid(text, close + 1), data)
      }
      return (text)
  ]]></function>
  <function name="ProcessTextCommand" parameters="section, data" type="string">
    if (StartsWith(section, "if ")) {
      return (ProcessTextCommand_If(section, data))
    }
    else if (StartsWith(section, "either ")) {
      return (ProcessTextCommand_Either(section, data))
    }
    else if (StartsWith(section, "here ")) {
      return (ProcessTextCommand_Here(section, data, true))
    }
    else if (StartsWith(section, "nothere ")) {
      return (ProcessTextCommand_Here(section, data, false))
    }
    else if (StartsWith(section, "popup:")) {
      return (ProcessTextCommand_Popup(Mid(section, 7), data))
    }
    else if (StartsWith(section, "i:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "i"))
    }
    else if (StartsWith(section, "u:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "u"))
    }
    else if (StartsWith(section, "b:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "b"))
    }
    else if (StartsWith(section, "s:")) {
      return (ProcessTextCommand_Format(Mid(section, 3), data, "s"))
    }
    else if (StartsWith(section, "color:")) {
      return (ProcessTextCommand_Colour(Mid(section, 7), data))
    }
    else if (StartsWith(section, "colour:")) {
      return (ProcessTextCommand_Colour(Mid(section, 8), data))
    }
    else if (StartsWith(section, "back:")) {
      return (ProcessTextCommand_Background(Mid(section, 6), data))
    }
    else if (StartsWith(section, "object:")) {
      return (ProcessTextCommand_Object(section, data))
    }
    else if (StartsWith(section, "command:")) {
      return (ProcessTextCommand_Command(Mid(section, 9), data))
    }
    else if (StartsWith(section, "page:")) {
      return (ProcessTextCommand_Command(Mid(section, 6), data))
    }
    else if (StartsWith(section, "exit:")) {
      return (ProcessTextCommand_Exit(section, data))
    }
    else if (StartsWith(section, "once:")) {
      return (ProcessTextCommand_Once(section, data))
    }
    else if (StartsWith(section, "notfirst:")) {
      return (ProcessTextCommand_NotFirst(section, data))
    }
    else if (StartsWith(section, "random:")) {
      return (ProcessTextCommand_Random(section, data))
    }
    else if (StartsWith(section, "rndalt:")) {
      return (ProcessTextCommand_RandomAlias(section, data))
    }
    else if (StartsWith(section, "img:")) {
      return (ProcessTextCommand_Img(section, data))
    }
    else if (StartsWith(section, "counter:")) {
      return (ProcessTextCommand_Counter(Mid(section, 9), data))
    }
    else if (StartsWith(section, "select:")) {
      return (ProcessTextCommand_Select(section, data))
    }
    else if (StartsWith(section, "eval:")) {
      return (ProcessTextCommand_Eval(Mid(section, 6), data))
    }
    else if (StartsWith(section, "=")) {
      return (ProcessTextCommand_Eval(Mid(section, 2), data))
    }
    else {
      dot = Instr(section, ".")
      if (dot = 0) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        objectname = Left(section, dot - 1)
        attributename = Mid(section, dot + 1)
        if (objectname = "this") {
          object = game.text_processor_this
        }
        else {
          object = GetObject(objectname)
        }
        if (object = null) {
          return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
        }
        else {
          if (HasAttribute(object, attributename)) {
            type = TypeOf(object, attributename)
            switch (type) {
              case ("string", "int", "double") {
                return (ToString(GetAttribute(object, attributename)))
              }
              case ("boolean") {
                result = GetAttribute(object, attributename)
                if (result) {
                  return ("true")
                }
                else {
                  return ("false")
                }
              }
              default {
                return ("(" + type + ")")
              }
            }
          }
          else {
            return ("")
          }
        }
      }
    }
  </function>
  <function name="ProcessTextCommand_Eval" parameters="section, data" type="string">
    if (not IsRegexMatch("[^\\w\\s]", section, "tp_punctuation_check")) {
      section = section + "()"
    }
    return (ToString(eval(section)))
  </function>
  <function name="ProcessTextCommand_Either" parameters="section, data" type="string">
    command = Mid(section, 8)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@either " + command + "@@@close@@@")
    }
    text = Mid(command, colon + 1)
    colon2 = Instr(colon + 1, command, "|")
    if (colon2 = 0) {
      text2 = ""
    }
    else {
      text2 = Mid(command, colon2 + 1)
      text = Replace(text, "|" + text2, "")
    }
    condition = Left(command, colon - 1)
    if (not game.text_processor_this = null) {
      condition = Replace(condition, "this", game.text_processor_this.name)
    }
    result = eval(condition)
    if (result) {
      return (ProcessTextSection(text, data))
    }
    else {
      if (text2 = "") {
        return ("")
      }
      else {
        return (ProcessTextSection(text2, data))
      }
    }
  </function>
  <function name="ProcessTextCommand_Here" parameters="section, data, flag" type="string">
    len = 9
    if (flag) {
      len = 6
    }
    command = Mid(section, len)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@" + section + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      if (not game.text_processor_this = null) {
        condition = Replace(condition, "this", game.text_processor_this.name)
      }
      object = Eval(condition)
      if (object = null) {
        return ("@@@open@@@" + section + "@@@close@@@")
      }
      if (object.parent = game.pov.parent and flag) {
        return (ProcessTextSection(text, data))
      }
      else if (not object.parent = game.pov.parent and not flag) {
        return (ProcessTextSection(text, data))
      }
      else {
        return ("")
      }
    }
  </function>
  <function name="ProcessTextCommand_If" parameters="section, data" type="string"><![CDATA[
    command = Mid(section, 4)
    colon = Instr(command, ":")
    if (colon = 0) {
      return ("@@@open@@@if " + command + "@@@close@@@")
    }
    else {
      text = Mid(command, colon + 1)
      condition = Left(command, colon - 1)
      if (not game.text_processor_this = null) {
        condition = Replace(condition, "this", game.text_processor_this.name)
      }
      operator = Instr(condition, "<=")
      if (operator <> 0) {
        operatorlength = 2
      }
      if (operator = 0) {
        operator = Instr(condition, ">=")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<>")
        if (operator <> 0) {
          operatorlength = 2
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "<")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, ">")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        operator = Instr(condition, "=")
        if (operator <> 0) {
          operatorlength = 1
        }
      }
      if (operator = 0) {
        checkfor = true
        if (StartsWith(condition, "not ")) {
          checkfor = false
          condition = Mid(condition, 5)
        }
        dot = Instr(condition, ".")
        if (dot = 0) {
          result = GetBoolean(game, condition)
        }
        else {
          objectname = Left(condition, dot - 1)
          attributename = Mid(condition, dot + 1)
          object = GetObject(objectname)
          if (object = null) {
            result = false
          }
          else {
            result = GetBoolean(object, attributename)
          }
        }
        if (result = checkfor) {
          return (ProcessTextSection(text, data))
        }
        else {
          return ("")
        }
      }
      else {
        lhs = Left(condition, operator - 1)
        rhs = Mid(condition, operator + operatorlength)
        op = Mid(condition, operator, operatorlength)
        dot = Instr(lhs, ".")
        if (dot = 0) {
          objectname = ""
          attributename = ""
          if (HasInt(game, lhs)) {
            objectname = "game"
            attributename = lhs
          }
          else {
            return ("@@@open@@@if " + command + "@@@close@@@")
          }
        }
        else {
          objectname = Left(lhs, dot - 1)
          attributename = Mid(lhs, dot + 1)
        }
        object = GetObject(objectname)
        if (object = null) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else if (not HasAttribute(object, attributename)) {
          return ("@@@open@@@if " + command + "@@@close@@@")
        }
        else {
          value = GetAttribute(object, attributename)
          if (TypeOf(value) = "object") {
            value = value.name
          }
          if (op = "=") {
            if (ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<>") {
            if (not ToString(value) = rhs) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">") {
            if (ToDouble(ToString(value)) > ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<") {
            if (ToDouble(ToString(value)) < ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = ">=") {
            if (ToDouble(ToString(value)) >= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
          else if (op = "<=") {
            if (ToDouble(ToString(value)) <= ToDouble(rhs)) {
              return (ProcessTextSection(text, data))
            }
            else {
              return ("")
            }
          }
        }
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_Format" parameters="section, data, html" type="string"><![CDATA[
    return (ProcessTextSection("<" + html + ">" + section + "</" + html + ">", data))
  ]]></function>
  <function name="ProcessTextCommand_Colour" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    c = StringListItem(ary, 0)
    list remove (ary, c)
    s = Join (ary, ":")
    return (ProcessTextSection("<span style=\"color:" + c + ";\">" + s + "</span>", data))
  ]]></function>
  <function name="ProcessTextCommand_Background" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    c = StringListItem(ary, 0)
    list remove (ary, c)
    s = Join (ary, ":")
    return (ProcessTextSection("<span style=\"background-color:" + c + ";\">" + s + "</span>", data))
  ]]></function>
  <function name="ProcessTextCommand_Popup" parameters="section, data" type="string"><![CDATA[
    ary = Split(section, ":")
    s1 = StringListItem(ary, 0)
    list remove (ary, s1)
    s2 = Join (ary, ":")
    id = JSSafe(s1) + GetRandomInt(0, 999999999)
    link = game.defaultlinkforeground
    if (HasString(game, "altlinkforeground")) {
      link = game.altlinkforeground
    }
    s = "<span  style=\"cursor:pointer;color:" + link + ";\" onclick=\"$('#" + id + "').css('display', 'block');\">" + s1 + "</span><div id=\"" + id + "\" class=\"w3-theme-border\" style=\"position:fixed;z-index:9999;display:none;cursor:pointer;left:50px;top:40%;width:40%;background-color:" + game.defaultbackground + ";border:2px solid " + game.defaultforeground + ";color:" + link + ";border-radius:5px;padding:5px;\" onclick=\"$('#" + id + "').css('display', 'none');\"><p>"
    s = s + s2 + "</p></div>"
    return (ProcessTextSection(s, data))
  ]]></function>
  <function name="ProcessTextCommand_Object" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    text = ""
    colon = Instr(objectname, ":")
    if (colon > 0) {
      text = Mid(objectname, colon + 1)
      objectname = Left(objectname, colon - 1)
    }
    if (not game.text_processor_this = null) {
      objectname = Replace(objectname, "this", game.text_processor_this.name)
    }
    object = GetObject(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      if (LengthOf(text) = 0) {
        text = SafeXML(GetDisplayAlias(object))
      }
      if (game.enablehyperlinks) {
        linkid = ProcessTextCommand_GetNextLinkId()
        colour = ""
        if (HasString(object, "linkcolour") and GetUIOption("UseGameColours") = "true") {
          colour = object.linkcolour
        }
        else {
          colour = GetLinkTextColour()
        }
        style = GetCurrentTextFormat(colour)
        return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink elementmenu\" data-elementid=\"" + object.name + "\">" + text + "</a>")
      }
      else {
        return (text)
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_GetNextLinkId" type="string">
    if (not HasInt(game, "lastlinkid")) {
      game.lastlinkid = 0
    }
    game.lastlinkid = game.lastlinkid + 1
    return ("verblink" + game.lastlinkid)
  </function>
  <function name="ProcessTextCommand_Command" parameters="command, data" type="string"><![CDATA[
    text = command
    colon = Instr(command, ":")
    if (colon > 0) {
      text = Mid(command, colon + 1)
      command = Left(command, colon - 1)
    }
    style = GetCurrentLinkTextFormat()
    candidates = NewObjectList()
    foreach (cmd, ScopeCommands()) {
      if (IsRegexMatch(cmd.pattern, command, cmd.name)) {
        list add (candidates, cmd)
      }
    }
    elementid = ""
    if (ListCount(candidates) = 1) {
      cmd = ObjectListItem(candidates, 0)
      elementid = cmd.name
    }
    linkid = ProcessTextCommand_GetNextLinkId()
    dataattrs = ""
    if (game.deactivatecommandlinks) {
      dataattrs = dataattrs + "data-deactivateonclick=\"true\" "
    }
    dataattrs = dataattrs + "data-command=\"" + command + "\""
    return ("<a id=\"" + linkid + "\" style=\"" + style + "\" class=\"cmdlink commandlink\" data-elementid=\"" + elementid + "\" " + dataattrs + ">" + ProcessTextSection(text, data) + "</a>")
  ]]></function>
  <function name="ProcessTextCommand_Exit" parameters="section, data" type="string"><![CDATA[
    exitname = Mid(section, 6)
    exit = GetObject(exitname)
    if (exit = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      verbs = GetDisplayVerbs(exit)
      alias = GetDisplayAlias(exit)
      command = LCase(StringListItem(verbs, 0)) + " " + alias
      style = GetCurrentLinkTextFormat()
      return ("<a style=\"" + style + "\" class=\"cmdlink exitlink\" data-elementid=\"" + exit.name + "\" data-command=\"" + command + "\">" + alias + "</a>")
    }
  ]]></function>
  <function name="ProcessTextCommand_Once" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return (ProcessTextSection(Mid(section, 6), data))
    }
    else {
      return ("")
    }
  </function>
  <function name="ProcessTextCommand_NotFirst" parameters="section, data" type="string">
    if (not HasAttribute(game, "textprocessor_seen")) {
      game.textprocessor_seen = NewDictionary()
    }
    fulltext = StringDictionaryItem(data, "fulltext")
    if (not DictionaryContains(game.textprocessor_seen, fulltext)) {
      onceSectionsInThisText = NewList()
      dictionary add (game.textprocessor_seen, fulltext, onceSectionsInThisText)
    }
    else {
      onceSectionsInThisText = DictionaryItem(game.textprocessor_seen, fulltext)
    }
    if (not ListContains(onceSectionsInThisText, section)) {
      list add (onceSectionsInThisText, section)
      return ("")
    }
    else {
      return (ProcessTextSection(Mid(section, 10), data))
    }
  </function>
  <function name="ProcessTextCommand_Random" parameters="section, data" type="string">
    elements = Mid(section, 8)
    elementslist = Tsplit(elements)
    index = GetRandomInt(0, ListCount(elementslist) - 1)
    return (ProcessTextSection(ListItem(elementslist, index), data))
  </function>
  <function name="Tsplit" parameters="splittext" type="stringlist"><![CDATA[
    itemlist = NewStringList()
    sections = 0
    startpos = 1
    for (i, 1, LengthOf(splittext)) {
      if (Mid(splittext, i, 1) = "{") {
          sections = sections + 1
        }
        if (Mid(splittext, i, 1) = "}") {
        sections = sections - 1
      }
      if (Mid(splittext, i, 1) = ":" and 0 >= sections) {
        item = Mid(splittext, startpos, i - startpos)
        list add (itemlist, item)
        startpos = i + 1
      }
    }
    item = Mid(splittext, startpos)
    list add (itemlist, item)
    return (itemlist)
  ]]></function>
  <function name="ProcessTextCommand_RandomAlias" parameters="section, data" type="string"><![CDATA[
    objectname = Mid(section, 8)
    if (not game.text_processor_this = null) {
      objectname = Replace(objectname, "this", game.text_processor_this.name)
    }
    object = GetObject(objectname)
    if (object = null) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      count = ListCount(object.alt)
      if (count > 0) {
        return (ListItem(object.alt, GetRandomInt(0, count - 1)))
      }
      else {
        return ("")
      }
    }
  ]]></function>
  <function name="ProcessTextCommand_Img" parameters="section, data" type="string"><![CDATA[
    filename = Mid(section, 5)
    return ("<img src=\"" + GetFileURL(filename) + "\" />")
  ]]></function>
  <function name="ProcessTextCommand_Counter" parameters="section, data" type="string">
    if (HasAttribute(game, section)) {
      return (ToString(GetAttribute(game, section)))
    }
    else {
      return ("0")
    }
  </function>
  <function name="ProcessTextCommand_Select" parameters="section, data" type="string"><![CDATA[
    elements = Mid(section, 8)
    elementslist = Split(elements, ":")
    objectandatt = StringListItem (elementslist, 0)
    list remove (elementslist, objectandatt)
    objectandattlist = Split(objectandatt, ".")
    if (not ListCount (objectandattlist) = 2) {
      return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
    }
    else {
      objectname = StringListItem(objectandattlist, 0)
      if (not game.text_processor_this = null) {
        objectname = Replace(objectname, "this", game.text_processor_this.name)
      }
      object = GetObject(objectname)
      if (object = null) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else if (not HasInt (object, StringListItem(objectandattlist, 1))) {
        return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
      }
      else {
        if (Instr(elements, "|") > 0) {
          elementslist = Split(Join(elementslist, ":"), "|")
        }
        index = GetInt(object, StringListItem(objectandattlist, 1))
        if ((0 > index) or (index >= Listcount(elementslist))) {
          return ("@@@open@@@" + ProcessTextSection(section, data) + "@@@close@@@")
        }
        else {
          return (ProcessTextSection(ListItem(elementslist, index), data))
        }
      }
    }
  ]]></function>
  <function name="SetFramePicture" parameters="filename"><![CDATA[
    request (SetPanelContents, "<img src=\"" + GetFileURL(filename) + "\" onload=\"setPanelHeight()\"/>")
    game.panelcontents = filename
  ]]></function>
  <function name="ClearFramePicture">
    request (SetPanelContents, "")
    game.panelcontents = null
  </function>
  <function name="ClearScreen">
    request (ClearScreen, "")
  </function>
  <function name="SetForegroundColour" parameters="colour">
    request (Foreground, colour)
    game.defaultforeground = colour
  </function>
  <function name="SetBackgroundColour" parameters="colour">
    request (Background, colour)
    game.defaultbackground = colour
  </function>
  <function name="SetLinkForegroundColour" parameters="colour">
    request (LinkForeground, colour)
    game.defaultlinkforeground = colour
  </function>
  <function name="SetFontName" parameters="font">
    game.defaultfont = font
    game.defaultwebfont = ""
  </function>
  <function name="SetWebFontName" parameters="font">
    AddExternalStylesheet ("https://fonts.googleapis.com/css?family=" + Replace(font, " ", "+"))
    game.defaultwebfont = font
  </function>
  <function name="AddExternalStylesheet" parameters="stylesheet">
    if (game.externalstylesheets = null) {
      game.externalstylesheets = NewStringList()
    }
    if (not ListContains(game.externalstylesheets, stylesheet)) {
      list add (game.externalstylesheets, stylesheet)
      JS.addExternalStylesheet (stylesheet)
    }
  </function>
  <function name="SetFontSize" parameters="size">
    game.defaultfontsize = size
  </function>
  <function name="PrintCentered" parameters="text">
    SetAlignment ("center")
    msg (text)
    SetAlignment ("left")
  </function>
  <function name="ShowYouTube" parameters="id">
    JS.AddYouTube (id)
  </function>
  <function name="ShowVimeo" parameters="id">
    JS.AddVimeo (id)
  </function>
  <function name="WaitForKeyPress">
    request (Wait, "")
  </function>
  <function name="DisplayHttpLink" parameters="text, url, https"><![CDATA[
    pos = Instr(url, "://")
    if (pos > 0) {
      url = Mid(url, pos + 3)
    }
    if (https) {
      url = "https://" + url
    }
    else {
      url = "http://" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="DisplayMailtoLink" parameters="text, url"><![CDATA[
    if (Instr(url, "mailto:") = 0) {
      url = "mailto:" + url
    }
    msg ("<a style=\"" + GetCurrentLinkTextFormat() + "\" href=\"" + url + "\">" + text + "</a>")
  ]]></function>
  <function name="CommandLink" parameters="cmd, text" type="string">
    return ("{command:" + cmd + ":" + text + "}")
  </function>
  <function name="Log" parameters="text">
    request (Log, text)
    JS.console.log(text)
  </function>
  <function name="SetBackgroundImage" parameters="filename">
    JS.SetBackgroundImage (GetFileURL(filename))
    game.backgroundimage = filename
  </function>
  <function name="SetBackgroundOpacity" parameters="opacity">
    JS.SetBackgroundOpacity (opacity)
    game.backgroundopacity = opacity
    game.setbackgroundopacity = true
  </function>
  <function name="DisplayList" parameters="list, numbers"><![CDATA[
    if (numbers) {
      result = "<ol>"
    }
    else {
      result = "<ul>"
    }
    foreach (item, list) {
      result = result + "<li>" + item + "</li>"
    }
    if (numbers) {
      result = result + "</ol>"
    }
    else {
      result = result + "</ul>"
    }
    msg (result)
  ]]></function>
  <function name="SetAlignment" parameters="align">
    JS.createNewDiv (align)
  </function>
  <function name="GetCurrentFontFamily" type="string">
    if (game.defaultwebfont = null) {
      return (game.defaultfont)
    }
    else {
      if (game.defaultwebfont = "") {
        return (game.defaultfont)
      }
      else {
        return ("'" + game.defaultwebfont + "', " + game.defaultfont)
      }
    }
  </function>
  <function name="FormatList" parameters="list, joiner, lastjoiner, nothing" type="string"><![CDATA[
    if (ListCount (list) = 0) {
      return (nothing)
    }
    else {
      result = ""
      count = 0
      listLength = ListCount(list)
      foreach (item, list) {
        if (TypeOf(item) = "object") {
          result = result + GetDisplayName(item)
        }
        else {
          result = result + item
        }
        count = count + 1
        if (count = listLength - 1) {
          if (not IsRegexMatch("^\\W", lastjoiner)) {
            result = result + " "
          }
          result = result + lastjoiner + " "
        }
        else if (count < listLength) {
          result = result + joiner + " "
        }
      }
      return (Trim (result))
    }
  ]]></function>
  <function name="Spaces" parameters="number" type="string"><![CDATA[
    game.command_successful = True
    text = ""
    for (x, 1, number) {
      text = text+ "&nbsp;"
    }
    return (text)
  ]]></function>
  <function name="ToRoman" parameters="n" type="string"><![CDATA[
    if (not TypeOf(n) = "int") {
      error ("ToRoman can only handle ints")
    }
    arabic = Split("1000;900;500;400;100;90;50;40;10;9;5;4;1", ";")
    roman = Split("M;CM;D;CD;C;XC;L;XL;X;IX;V;IV;I", ";")
    result = ""
    for (i, 0, 12) {
      a = ToInt(StringListItem(arabic, i))
      r = StringListItem(roman, i)
      while (n >= a) {
        result = result + r
        n = n - a
      }
    }
    return (result)
  ]]></function>
  <function name="Grid_SetScale" parameters="scale">
    JS.Grid_SetScale (scale)
  </function>
  <function name="Grid_CalculateMapCoordinates" parameters="room, playerobject"><![CDATA[
    if (room.parent <> null) {
      if (room.grid_parent_offset_auto) {
        room.grid_parent_offset_x = (room.parent.grid_width - room.grid_width) /2.0
        room.grid_parent_offset_y = (room.parent.grid_length - room.grid_length) /2.0
      }
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") - room.grid_parent_offset_x)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") - room.grid_parent_offset_y)
      Grid_SetGridCoordinateForPlayer (playerobject, room.parent, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
      room.parent.grid_render = true
      Grid_CalculateMapCoordinates (room.parent, playerobject)
    }
    // go through all exits in room, set x,y co-ordinates for the rooms they point to
    foreach (exit, AllExits()) {
      if (exit.parent = room and not GetBoolean(exit, "lookonly")) {
        if (DoesInherit(exit, "northdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "eastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "westdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length/2.0)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y"))
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "northeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.to.grid_length) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") - exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southwestdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", (Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.to.grid_width) - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") - exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "southeastdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_x", Grid_GetGridCoordinateForPlayer(playerobject, exit, "x") + exit.grid_length)
          Grid_SetGridCoordinateForPlayer (playerobject, exit, "end_y", Grid_GetGridCoordinateForPlayer(playerobject, exit, "y") + exit.grid_length)
          exit.grid_render = true
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "updirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") + exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "downdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z") - exit.grid_length)
          exit.grid_render = false
          exit.to.grid_render = true
        }
        else if (DoesInherit(exit, "indirection") or DoesInherit(exit, "outdirection")) {
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "x", Grid_GetGridCoordinateForPlayer(playerobject, room, "x") + room.grid_width/2.0 - exit.to.grid_width/2.0 + exit.grid_offset_x)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "y", Grid_GetGridCoordinateForPlayer(playerobject, room, "y") + room.grid_length/2.0 - exit.to.grid_length/2.0 + exit.grid_offset_y)
          Grid_SetGridCoordinateForPlayer (playerobject, exit.to, "z", Grid_GetGridCoordinateForPlayer(playerobject, room, "z"))
          exit.grid_render = false
          exit.to.grid_render = true
        }
      }
    }
  ]]></function>
  <function name="Grid_DrawPlayerInRoom" parameters="room">
    if (room.grid_render) {
      Grid_DrawRoom (room, false, game.pov)
      player_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
      player_y = Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0
      player_z = Grid_GetGridCoordinateForPlayer(game.pov, room, "z")
      // Grid_DrawPlayer(x, y, z, radius, border, borderWidth, fill)
      JS.Grid_DrawPlayer (player_x, player_y, player_z, 5, "black", 2, "yellow")
    }
  </function>
  <function name="Grid_DrawRoom" parameters="room, redraw, playerobject"><![CDATA[
    if (room.grid_render) {
      if (redraw or not Grid_GetRoomBooleanForPlayer(playerobject, room, "grid_isdrawn")) {
        if (room.parent <> null) {
          Grid_DrawRoom (room.parent, redraw, playerobject)
        }
        JS.Grid_DrawBox (Grid_GetGridCoordinateForPlayer(game.pov, room, "x"), Grid_GetGridCoordinateForPlayer(game.pov, room, "y"), Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_width, room.grid_length, room.grid_border, room.grid_borderwidth, room.grid_fill, room.grid_bordersides)
        if (LengthOf(room.grid_label) > 0) {
          label_x = Grid_GetGridCoordinateForPlayer(game.pov, room, "x") + room.grid_width/2.0
          label_y = (Grid_GetGridCoordinateForPlayer(game.pov, room, "y") + room.grid_length/2.0) - 0.5
          JS.Grid_DrawLabel (label_x, label_y, Grid_GetGridCoordinateForPlayer(game.pov, room, "z"), room.grid_label, room.grid_label_colour)
        }
        foreach (exit, AllExits()) {
          if (exit.grid_render and exit.parent = room and exit.grid_length > 0) {
            Grid_DrawLine (Grid_GetGridCoordinateForPlayer(game.pov, exit, "x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "y"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_x"), Grid_GetGridCoordinateForPlayer(game.pov, exit, "end_y"), game.mapexitcolour, game.mapexitwidth)
          }
        }
        Grid_SetRoomBooleanForPlayer (playerobject, room, "grid_isdrawn", true)
      }
    }
  ]]></function>
  <function name="Grid_ShowCustomLayer" parameters="visible">
    if (visible) {
      JS.Grid_ShowCustomLayer (true)
    }
    else {
      JS.Grid_ShowCustomLayer (false)
    }
  </function>
  <function name="Grid_ClearCustomLayer">
    JS.Grid_ClearCustomLayer ()
  </function>
  <function name="Grid_DrawLine" parameters="x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawLine (x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawArrow" parameters="id, x1, y1, x2, y2, border, borderWidth">
    JS.Grid_DrawArrow (id, x1, y1, x2, y2, border, borderWidth)
  </function>
  <function name="Grid_DrawGridLines" parameters="x1, y1, x2, y2, border">
    JS.Grid_DrawGridLines (x1, y1, x2, y2, border)
  </function>
  <function name="Grid_SetCentre" parameters="x, y">
    JS.Grid_SetCentre (x, y)
  </function>
  <function name="Grid_DrawSquare" parameters="id, x, y, width, height, text, fill">
    JS.Grid_DrawSquare (id, x, y, width, height, text, fill)
  </function>
  <function name="Grid_LoadSvg" parameters="data, id">
    JS.Grid_LoadSvg (data, id)
  </function>
  <function name="Grid_DrawSvg" parameters="id, symbolid, x, y, width, height">
    JS.Grid_DrawSvg (id, symbolid, x, y, width, height)
  </function>
  <function name="Grid_DrawImage" parameters="id, url, x, y, width, height">
    JS.Grid_DrawImage (id, url, x, y, width, height)
  </function>
  <function name="Grid_AddNewShapePoint" parameters="x, y">
    JS.Grid_AddNewShapePoint (x, y)
  </function>
  <function name="Grid_DrawShape" parameters="id, border, fill, opacity">
    JS.Grid_DrawShape (id, border, fill, opacity)
  </function>
  <function name="JS_GridSquareClick" parameters="parameterstring">
    parameters = Split(parameterstring, ";")
    x = ToInt(StringListItem(parameters, 0))
    y = ToInt(StringListItem(parameters, 1))
    GridSquareClick (x, y)
  </function>
  <function name="GridSquareClick" parameters="x, y">
    // Copy this function into your game to handle grid square clicks
  </function>
  <function name="Grid_Redraw">
    foreach (object, AllObjects()) {
      if (Grid_GetRoomBooleanForPlayer(game.pov, object, "grid_isdrawn")) {
        Grid_DrawRoom (object, true, game.pov)
      }
    }
  </function>
  <function name="Grid_SetGridCoordinateForPlayer" parameters="playerobject, room, coordinate, value">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(coordinates, coordinate)) {
      dictionary remove (coordinates, coordinate)
    }
    dictionary add (coordinates, coordinate, value * 1.0)
  </function>
  <function name="Grid_GetGridCoordinateForPlayer" parameters="playerobject, room, coordinate" type="double">
    coordinates = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    return (DictionaryItem(coordinates, coordinate))
  </function>
  <function name="Grid_SetRoomBooleanForPlayer" parameters="playerobject, room, coordinate, value">
    datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
    if (DictionaryContains(datadictionary, coordinate)) {
      dictionary remove (datadictionary, coordinate)
    }
    dictionary add (datadictionary, coordinate, value)
  </function>
  <function name="Grid_GetRoomBooleanForPlayer" parameters="playerobject, room, attribute" type="boolean">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      return (false)
    }
    else {
      datadictionary = Grid_GetPlayerCoordinatesForRoom(playerobject, room)
      if (DictionaryContains(datadictionary, attribute)) {
        return (DictionaryItem(datadictionary, attribute))
      }
      else {
        return (false)
      }
    }
  </function>
  <function name="Grid_GetPlayerCoordinateDictionary" parameters="playerobject" type="dictionary">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (Grid_GetPlayerCoordinateDictionary(playerobject.grid_coordinates_delegate))
    }
    else {
      if (not HasAttribute(playerobject, "grid_coordinates")) {
        playerobject.grid_coordinates = NewDictionary()
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "x", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "y", 0)
        Grid_SetGridCoordinateForPlayer (playerobject, playerobject.parent, "z", 0)
        playerobject.parent.grid_render = true
        Grid_CalculateMapCoordinates (playerobject.parent, playerobject)
      }
      return (playerobject.grid_coordinates)
    }
  </function>
  <function name="Grid_GetPlayerCoordinatesForRoom" parameters="playerobject, room" type="dictionary">
    coordinatedata = Grid_GetPlayerCoordinateDictionary(playerobject)
    if (not DictionaryContains(coordinatedata, room.name)) {
      dictionary add (coordinatedata, room.name, NewDictionary())
    }
    return (DictionaryItem(coordinatedata, room.name))
  </function>
  <function name="MergePOVCoordinates"><![CDATA[
    coordinateowner = GetCoordinateOwner(game.pov)
    foreach (obj, GetDirectChildren(game.pov.parent)) {
      if (obj <> game.pov and HasAttribute(obj, "grid_coordinates")) {
        objcoordinateowner = GetCoordinateOwner(obj)
        if (coordinateowner <> objcoordinateowner) {
          MapPOVCoordinates (objcoordinateowner, coordinateowner)
        }
      }
    }
  ]]></function>
  <function name="GetCoordinateOwner" parameters="playerobject" type="object">
    if (HasAttribute(playerobject, "grid_coordinates_delegate")) {
      return (GetCoordinateOwner(playerobject.grid_coordinates_delegate))
    }
    else {
      return (playerobject)
    }
  </function>
  <function name="MapPOVCoordinates" parameters="source, target">
    sourcecoordinates = Grid_GetPlayerCoordinateDictionary(source)
    targetcoordinates = Grid_GetPlayerCoordinateDictionary(target)
    xoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "x") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "x")
    yoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "y") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "y")
    zoffset = Grid_GetGridCoordinateForPlayer(target, game.pov.parent, "z") - Grid_GetGridCoordinateForPlayer(source, game.pov.parent, "z")
    foreach (roomname, sourcecoordinates) {
      coordinatedata = DictionaryItem(sourcecoordinates, roomname)
      if (not DictionaryContains(targetcoordinates, roomname)) {
        newroomdata = NewDictionary()
        dictionary add (targetcoordinates, roomname, newroomdata)
        MapPOVCoordinate (coordinatedata, newroomdata, "x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "y", yoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "z", zoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_x", xoffset)
        MapPOVCoordinate (coordinatedata, newroomdata, "end_y", yoffset)
      }
      else {
        newroomdata = DictionaryItem(targetcoordinates, roomname)
      }
      if (DictionaryContains(coordinatedata, "grid_isdrawn")) {
        if (DictionaryContains(newroomdata, "grid_isdrawn")) {
          dictionary remove (newroomdata, "grid_isdrawn")
        }
        dictionary add (newroomdata, "grid_isdrawn", DictionaryItem(coordinatedata, "grid_isdrawn"))
      }
    }
    source.grid_coordinates_delegate = target
    Grid_Redraw
    Grid_DrawPlayerInRoom (game.pov.parent)
  </function>
  <function name="MapPOVCoordinate" parameters="sourcedata, targetdata, name, offset">
    if (DictionaryContains(sourcedata, name)) {
      value = DictionaryItem(sourcedata, name)
      dictionary add (targetdata, name, value + offset)
    }
  </function>
  <function name="DiceRoll" parameters="dice" type="int"><![CDATA[
    if (TypeOf(dice) = "int") {
      return (dice)
    }
    p1 = Instr(dice, "d")
    p2 = Instr(dice, "+")
    p4 = Instr(dice, "-")
    p3 = LengthOf(dice)
    if (p1 = 0) {
      if (IsInt(dice)) {
        return (ToInt(dice))
      }
      error ("Invalid dice type: " + dice)
    }
    number_str = Mid(dice, 1, p1 - 1)
    if (LengthOf(number_str) = 0) {
      number = 1
    }
    else {
      number = ToInt(number_str)
    }
    if (p2 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p2 - p1 - 1))
      total = ToInt(Mid(dice, p2 + 1, p3 - p2))
    }
    else if (p4 > 0) {
      sides = ToInt(Mid(dice, p1 + 1, p4 - p1 - 1))
      total = -ToInt(Mid(dice, p4 + 1, p3 - p2))
    }
    else {
      sides = ToInt(Mid(dice, p1 + 1, p3 - p1))
      total = 0
    }
    for (i, 1, number) {
      total = total + GetRandomInt(1, sides)
    }
    return (total)
  ]]></function>
  <function name="PickOneObject" parameters="lst" type="object">
    n = ListCount(lst)
    if (n = 0) {
      return (null)
    }
    index = GetRandomInt(0, n - 1)
    return (ObjectListItem(lst, index))
  </function>
  <function name="PickOneString" parameters="lst" type="string">
    if (TypeOf(lst) = "string") {
      lst = Split(lst, ";")
    }
    n = ListCount(lst)
    if (n = 0) {
      return ("")
    }
    index = GetRandomInt(0, n - 1)
    return (StringListItem(lst, index))
  </function>
  <function name="PickOneChild" parameters="obj" type="object">
    return (PickOneObject(GetDirectChildren(obj)))
  </function>
  <function name="PickOneChildOfType" parameters="room, typename" type="object">
    l = NewObjectList()
    foreach (o, GetDirectChildren(room)) {
      if (DoesInherit(o, typename)) {
        list add (l, o)
      }
    }
    return (PickOneObject(l))
  </function>
  <function name="PickOneExit" parameters="room" type="object">
    return (PickOneObject(ScopeExitsForRoom (room)))
  </function>
  <function name="PickOneUnlockedExit" parameters="room" type="object">
    return (PickOneObject(ScopeUnlockedExitsForRoom (room)))
  </function>
  <function name="TextFX_Typewriter" parameters="text, speed">
    TextFX_Typewriter_Internal (text, speed, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Typewriter_Internal" parameters="text, speed, font, color, size">
    JS.TextFX.Typewriter (text, speed, font, color, size)
  </function>
  <function name="TextFX_Unscramble" parameters="text, speed, reveal">
    TextFX_Unscramble_Internal (text, speed, reveal, GetCurrentFontFamily(), game.defaultforeground, game.defaultfontsize)
  </function>
  <function name="TextFX_Unscramble_Internal" parameters="text, speed, reveal, font, color, size">
    JS.TextFX.Unscramble (text, speed, reveal, font, color, size)
  </function>
  <function name="_DoWear" parameters="object" type="boolean"><![CDATA[
    // Is this possible?
    if (not HasAttribute(object,"worn") or not HasAttribute(object,"wear_slots")) {
      // No, not a garment
      msg (DynamicTemplate("WearUnsuccessful", object))
      return (false)
    }
    if (object.parent = game.pov and object.worn = true) {
      // No, already worn
      msg (DynamicTemplate("AlreadyWearing", object))
      return (false)
    }
    if (not ListContains(ScopeInventory(), object)) {
      // No, not held
      msg (DynamicTemplate("CannotWearIfNotHeld", object))
      return (false)
    }
    // Are other worn garments in the way?
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer or obj.wear_layer = 0 or object.wear_layer = 0) {
        msg (DynamicTemplate("CannotWearOver", obj))
        return (false)
      }
      if (obj.wear_layer = object.wear_layer) {
        msg (DynamicTemplate("CannotWearWith", obj))
        return (false)
      }
    }
    if (not TestGarment(object)) {
      return (false)
    }
    WearGarment (object)
    if (object.wearmsg = null) {
      P (DynamicTemplate("WearSuccessful",object))
    }
    else {
      P (object.wearmsg)
    }
    // do after
    if (HasScript(object, "onafterwear")) {
      do (object, "onafterwear")
    }
    else if (HasString(object, "onafterwear")) {
      P (object.onafterwear)
    }
    AfterWear
    return (true)
  ]]></function>
  <function name="WearGarment" parameters="object">
    if (GetBoolean(object, "multistate")) {
      object.multistate_status = 1
    }
    else {
      object.multistate_status = 0
    }
    if (object.alias = null) {
      object.alias = object.name
    }
    if (object.listalias = null) {
      object.listalias = object.alias
    }
    if (object.original_alias = null) {
      object.original_drop = object.drop
      object.original_alias = object.alias
      object.original_listalias = object.listalias
      object.original_bonusatts = object.bonusatts
      object.original_wearslots = object.wear_slots
      object.display = GetDisplayAlias(object)
    }
    object.parent = _GetWornClothingLocation()
    object.worn = True
    object.drop = false
    _SetGarmentAlias (object)
    _SetMultistate (object)
    SetVerbs
    SetBonuses (object, true)
    if (HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects + 1
    }
    // Do error checking now so item can be put on even if multistate is going to fail
    if (GetBoolean(object, "multistate")) {
      if (not HasAttribute(object, "multistate_descriptors")) {
        error ("No descriptors for multistate clothing: " + object.name)
      }
      if (not HasAttribute(object, "multistate_verbs")) {
        error ("No verbs for multistate clothing: " + object.name)
      }
      if (not HasAttribute(object, "multistate_wearslots")) {
        error ("No wearslots for multistate clothing: " + object.name)
      }
      statecount = ListCount(object.multistate_descriptors)
      if (not statecount = ListCount(object.multistate_verbs)) {
        error ("Mismatch in lists for multistate clothing: " + object.name)
      }
      if (not statecount = ListCount(object.multistate_wearslots)) {
        error ("Mismatch in lists for multistate clothing: " + object.name)
      }
      object.original_wearslots = object.wear_slots
    }
  </function>
  <function name="_DoRemove" parameters="object" type="boolean"><![CDATA[
    if (not ListContains(GetAllChildObjects(game.pov), object)) {
      msg (DynamicTemplate("CannotRemoveIfNotHeld", object))
      return (false)
    }
    if (not GetBoolean(object, "worn")) {
      msg (DynamicTemplate("CannotRemoveIfNotWearing", object))
      return (false)
    }
    if (not GetBoolean(object, "removeable")) {
      if (HasString(object, "notremoveablemessage")) {
        msg (object.notremoveablemessage)
      }
      else {
        msg (DynamicTemplate("NotRemovable", object))
      }
      return (false)
    }
    if (HasInt(game.pov, "maxobjects")) {
      if (ListCount(GetAllChildObjects(game.pov)) >= game.pov.maxobjects) {
        msg (DynamicTemplate("MaxObjectsInInventory", object))
        return (false)
      }
    }
    obj = _GetOuterForGarment(game.pov, object)
    if (not obj = null) {
      if (obj.wear_layer > object.wear_layer) {
        msg (DynamicTemplate("RemoveFirst", obj))
        return (false)
      }
    }
    if (not TestRemove(object)) {
      return (false)
    }
    RemoveGarment (object)
    if (object.removemsg = null) {
      P (DynamicTemplate("RemoveSuccessful",object))
    }
    else {
      P (object.removemsg)
    }
    // do after
    if (HasScript(object, "onafterremove")) {
      do (object, "onafterremove")
    }
    else if (HasString(object, "onafterremove")) {
      P (object.onafterremove)
    }
    AfterRemove
    return (true)
  ]]></function>
  <function name="RemoveGarment" parameters="object"><![CDATA[
    SetBonuses (object, false)
    object.worn = false
    object.drop = object.original_drop
    object.alias = object.original_alias
    object.multistate_status = 0
    if (HasString(object, "listalias")) {
      if (StartsWith(object.listalias, "<span style=\"color:blue\">")) {
        object.listalias = null
        do (object, "colourmylistalias")
      }
      else {
        object.listalias = object.original_listalias
      }
    }
    object.parent = game.pov
    if (HasInt(game.pov, "maxobjects")) {
      game.pov.maxobjects = game.pov.maxobjects - 1
    }
    SetVerbs
  ]]></function>
  <function name="Slots" type="stringlist">
    sl = NewStringList()
    foreach (o, AllObjects()) {
      if (HasAttribute(o, "wear_slots")) {
        foreach (s, o.wear_slots) {
          if (not ListContains(sl, s)) {
            list add (sl, s)
          }
        }
      }
    }
    return (sl)
  </function>
  <function name="GetDisplayGarment" parameters="obj" type="string"><![CDATA[
    if (not GetBoolean(obj, "usedefaultprefix")) {
      if (obj.prefix = null) {
        prefix = ""
      }
      else {
        prefix = obj.prefix
      }
    }
    else {
      prefix = GetDefaultPrefix(obj)
    }
    if (LengthOf(prefix) > 0) {
      prefix = prefix + " "
    }
    if (HasString(obj, "original_alias")) {
      result = prefix + obj.original_alias
    }
    else {
      result = prefix + obj.alias
    }
    if (not GetBoolean(obj, "usedefaultprefix") and HasString(obj, "suffix")) {
      if (LengthOf(obj.suffix) > 0) {
        result = result + " " + obj.suffix
      }
    }
    return (result)
  ]]></function>
  <function name="GetDescriptor" parameters="object" type="string">
    if (object.multistate_status = 0) {
      return (" (worn)")
    }
    s = StringListItem(object.multistate_descriptors, object.multistate_status - 1)
    if (s = "*") {
      return (" (worn)")
    }
    return (" (worn " + s + ")")
  </function>
  <function name="SetMultistate" parameters="object, state"><![CDATA[
    if (state < 1) {
      error ("Attempt to set state to " + state + " for " + object.name)
    }
    if (state > ListCount(object.multistate_descriptors)) {
      error ("Attempt to set state to " + state + " for " + object.name + " (max " + ListCount(object.multistate_descriptors) + ")")
    }
    if (not object.multistate_status = state) {
      SetBonuses (object, false)
      object.multistate_status = state
      _SetGarmentAlias (object)
      _SetMultistate (object)
      SetBonuses (object, true)
      SetVerbs
    }
  ]]></function>
  <function name="GetOuterFor" parameters="char, slot" type="object"><![CDATA[
    garment = null
    foreach (o, _GetList(char, slot)) {
      if (garment = null) {
        garment = o
      }
      else if (o.wear_layer > garment.wear_layer) {
        garment = o
      }
    }
    return (garment)
  ]]></function>
  <function name="ListWornFor" parameters="char" type="objectlist">
    return (_GetList(char, null))
  </function>
  <function name="ListVisibleFor" parameters="char" type="objectlist">
    ol = newObjectList()
    foreach (s, Slots()) {
      o = GetOuterFor(char, s)
      if (not o = null and not ListContains(ol, o)) {
        list add (ol, o)
      }
    }
    return (ol)
  </function>
  <function name="GetArmourFor" parameters="char" type="int">
    total = 2 * _GetSlotArmour(char, "head") + 3 * _GetSlotArmour(char, "torso")
    foreach (s, Split("feet|legs|shoulders|arms|hands", "|")) {
      total = total + _GetSlotArmour(char, s)
    }
    return (total)
  </function>
  <function name="GetOuter" parameters="slot" type="object">
    return (GetOuterFor(game.pov, slot))
  </function>
  <function name="GetArmour" type="int">
    return (GetArmourFor(game.pov))
  </function>
  <function name="SetVerbs">
    foreach (o, GetAllChildObjects(game.pov)) {
      if (DoesInherit(o, "wearable")) {
        if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer")) {
          _SetVerbsForGarment (o)
        }
        if (not HasString(o, "alias")) {
          o.alias = o.name
        }
        if (not HasString(o, "listalias")) {
          o.listalias = o.alias
        }
      }
    }
  </function>
  <function name="WornCount" type="int">
    count = 0
    foreach (o, GetAllChildObjects(game.pov)) {
      if (GetBoolean(o, "worn")) {
        count = count + 1
      }
    }
    return (count)
  </function>
  <function name="ListClothes" type="string">
    l = NewStringList()
    foreach (obj, ListWornFor(game.pov)) {
      list add (l, GetDisplayGarment(obj))
    }
    return (FormatList(l, ",", "and", "nothing"))
  </function>
  <function name="SetBonuses" parameters="garment, wearflag">
    if (HasString(garment, "bonusatts")) {
      foreach (att, Split(garment.bonusatts, ";")) {
        bonus = 1
        plusarray = Split(att, "+")
        minusarray = Split(att, "-")
        if (ListCount(plusarray) = 2) {
          att = StringListitem(plusarray, 0)
          if (not IsInt(StringListitem(plusarray, 1))) {
            error ("Bonus attribute for " + garment.name + " not properly formatted: " + garment.bonusatts)
          }
          bonus = ToInt(StringListitem(plusarray, 1))
        }
        if (ListCount(minusarray) = 2) {
          att = StringListitem(minusarray, 0)
          if (not IsInt(StringListitem(minusarray, 1))) {
            error ("Negative bonus attribute for " + garment.name + " not properly formatted: " + garment.bonusatts)
          }
          bonus = -ToInt(StringListitem(minusarray, 1))
        }
        if (not wearflag) {
          bonus = -bonus
        }
        bonus = ClothingBonusMultiplier() * bonus
        n = GetInt(game.pov, att) + bonus
        set (player, att, n)
      }
    }
  </function>
  <function name="SetAlias" parameters="object, alias">
    SetListAlias (object, alias, alias)
  </function>
  <function name="SetListAlias" parameters="object, alias, listalias">
    object.alias = alias
    object.listalias = listalias
    if (Equal(object.worn, true)) {
      object.original_alias = object.alias
      object.original_listalias = object.listalias
      object.display = GetDisplayAlias(object)
      _SetGarmentAlias (object)
    }
  </function>
  <function name="_SetMultistate" parameters="object">
    if (GetBoolean(object, "multistate")) {
      ws = StringListItem(object.multistate_wearslots, object.multistate_status - 1)
      if (ws = "*") {
        object.wear_slots = object.original_wearslots
      }
      else {
        object.wear_slots = Split(ws, ";")
      }
      wv = StringListItem(object.multistate_verbs, object.multistate_status - 1)
      if (wv = "*") {
        object.wornverbs = null
      }
      else {
        object.wornverbs = wv
      }
      ba = StringListItem(object.multistate_bonusatts, object.multistate_status - 1)
      if (ba = "*") {
        object.bonusatts = object.original_bonusatts
      }
      else {
        object.bonusatts = ba
      }
    }
  </function>
  <function name="_SetGarmentAlias" parameters="object"><![CDATA[
    ext = GetDescriptor(object)
    object.alias = object.display + ext
    if (HasString(object, "listalias")) {
      if (StartsWith(object.listalias, "<span style=\"color:blue\">")) {
        object.listalias = null
        do (object, "colourmylistalias")
      }
      else {
        object.listalias = object.original_listalias + ext
      }
    }
  ]]></function>
  <function name="_GetWornClothingLocation" type="object">
    foreach (o, GetDirectChildren(game.pov)) {
      if (GetBoolean(o, "wornclothinglocation")) {
        return (o)
      }
    }
    return (game.pov)
  </function>
  <function name="_GetOuterForGarment" parameters="char, garment" type="object">
    foreach (slot, garment.wear_slots) {
      obj = GetOuterFor(char, slot)
      if (not obj = null and not obj = garment) {
        return (obj)
      }
    }
    return (null)
  </function>
  <function name="_SetVerbList" parameters="garment, list, s">
    garment.inventoryverbs = list
    if (not s = null) {
      if (not s = "") {
        foreach (s2, Split(s, ";")) {
          list add (garment.inventoryverbs, s2)
        }
      }
    }
  </function>
  <function name="_SetVerbsForGarment" parameters="garment"><![CDATA[
    outer = _GetOuterForGarment(game.pov, garment)
    if (not garment.worn) {
      if (outer = null) {
        _SetVerbList (garment, Split("Look at;Drop;Wear", ";"), garment.invverbs)
      }
      else if (outer.wear_layer < garment.wear_layer) {
        _SetVerbList (garment, Split("Look at;Drop;Wear", ";"), garment.invverbs)
      }
      else {
        _SetVerbList (garment, Split("Look at;Drop", ";"), garment.invverbs)
      }
    }
    else {
      if (outer = null) {
        if (garment.removeable) {
          _SetVerbList (garment, Split("Look at;Remove", ";"), garment.wornverbs)
        }
        else {
          _SetVerbList (garment, Split("Look at", ";"), garment.wornverbs)
        }
      }
      else if (outer.wear_layer < garment.wear_layer) {
        if (garment.removeable) {
          _SetVerbList (garment, Split("Look at;Remove", ";"), garment.wornverbs)
        }
        else {
          _SetVerbList (garment, Split("Look at", ";"), garment.wornverbs)
        }
      }
      else {
        garment.inventoryverbs = Split("Look at", ";")
      }
    }
  ]]></function>
  <function name="_GetList" parameters="char, slot" type="objectlist">
    garments = NewObjectList()
    foreach (o, GetAllChildObjects(char)) {
      if (HasAttribute(o, "wear_slots") and HasInt(o, "wear_layer") and GetBoolean(o, "worn")) {
        if (ListContains(o.wear_slots, slot) or slot = null) {
          list add (garments, o)
        }
      }
    }
    return (garments)
  </function>
  <function name="_GetSlotArmour" parameters="char, slot" type="int"><![CDATA[
    total = 0
    max = 0
    foreach (o, _GetList(char, slot)) {
      total = total + o.armour
      if (o.armour > max) {
        max = o.armour
      }
    }
    return (total + max)
  ]]></function>
  <function name="ClothingBonusMultiplier" type="int">
    return (1)
  </function>
  <function name="AfterRemove">
  </function>
  <function name="AfterWear">
  </function>
  <function name="P" parameters="s">
    msg (s)
  </function>
  <function name="UpdateArmour">
  </function>
  <function name="TestGarment" parameters="object" type="boolean">
    return (true)
  </function>
  <function name="TestRemove" parameters="object" type="boolean">
    return (true)
  </function>
  <function name="InitInterface"><![CDATA[
    if (game.setcustomwidth) {
      JS.setGameWidth (game.customwidth)
    }
    if (game.setcustompadding) {
      JS.setGamePadding (game.custompaddingtop, game.custompaddingbottom, game.custompaddingleft, game.custompaddingright)
    }
    if (game.externalstylesheets <> null) {
      foreach (stylesheet, game.externalstylesheets) {
        JS.addExternalStylesheet (stylesheet)
      }
    }
    if (game.setbackgroundopacity) {
      SetBackgroundOpacity (game.backgroundopacity)
    }
    request (Background, game.defaultbackground)
    request (Foreground, game.defaultforeground)
    request (LinkForeground, game.defaultlinkforeground)
    if (LengthOf(game.backgroundimage) > 0) {
      SetBackgroundImage (game.backgroundimage)
    }
    request (SetCompassDirections, Join(game.compassdirections, ";"))
    request (SetInterfaceString, "InventoryLabel=Inventory")
    request (SetInterfaceString, "StatusLabel=Status")
    request (SetInterfaceString, "PlacesObjectsLabel=Places and Objects")
    request (SetInterfaceString, "CompassLabel=Compass")
    request (SetInterfaceString, "InButtonLabel=in")
    request (SetInterfaceString, "OutButtonLabel=out")
    request (SetInterfaceString, "EmptyListLabel=(empty)")
    request (SetInterfaceString, "NothingSelectedLabel=(nothing selected)")
    request (SetInterfaceString, "TypeHereLabel=Type here...")
    request (SetInterfaceString, "ContinueLabel=Continue...")
    JS.SetMenuBackground (game.menubackground)
    JS.SetMenuForeground (game.menuforeground)
    JS.SetMenuHoverBackground (game.menuhoverbackground)
    JS.SetMenuHoverForeground (game.menuhoverforeground)
    JS.SetMenuFontName (game.menufont)
    JS.SetMenuFontSize (game.menufontsize + "pt")
    if (not game.underlinehyperlinks) {
      JS.TurnOffHyperlinksUnderline ()
    }
    ResetCommandBarFormat
    if (game.showcommandbar) {
      request (Show, "Command")
    }
    else {
      request (Hide, "Command")
    }
    if (HasString(game, "panelcontents")) {
      SetFramePicture (game.panelcontents)
    }
    if (game.gridmap) {
      JS.ShowGrid (game.mapsize)
      Grid_SetScale (game.mapscale)
      if (game.pov <> null) {
        if (game.pov.parent <> null) {
          Grid_Redraw
          Grid_DrawPlayerInRoom (game.pov.parent)
        }
      }
    }
    // Added by the Pixie
    // Note that panesVisible in playercore.js must be updated too
    // This line will get the save confirmation to appear in the right font and colour
    JS.setCss ("body", "color:" + game.defaultforeground + ";font-family:" + game.defaultfont + ";font-size:" + game.defaultfontsize + "pt;")
    // various new options
    if (HasString(game, "bordercolour")) {
      JS.setCss ("#gameBorder", "border-left:1px solid " + game.bordercolour + ";border-right:1px solid " + game.bordercolour)
    }
    if (not game.classiclocation) {
      JS.setCss ("#status", "background-image:none")
      if (HasString(game, "customlocationcolour")) {
        JS.setCss ("#status", "background-color:" + game.customlocationcolour)
      }
      else {
        JS.setCss ("#status", "background:transparent")
      }
      if (HasString(game, "customlocationtextcolour")) {
        JS.setCss ("#status", "color:" + game.customlocationtextcolour)
      }
      if (HasString(game, "customlocationbordercolour")) {
        JS.setCss ("#status", "border:1px solid " + game.customlocationbordercolour)
      }
      else {
        JS.setCss ("#status", "border:none")
      }
    }
    request (Show, "Location")
    if (game.showlocation) {
      JS.setCss ("#status", "display:block")
    }
    else {
      JS.setCss ("#status", "display:none")
    }
    if (HasString(game, "marginscolour")) {
      JS.setCss ("body", "background-color:" + game.marginscolour)
    }
    if (game.turnoffsavebutton) {
      JS.setCss ("#controlButtons", "display:none")
    }
    if (game.turnoffcompass) {
      JS.setCss ("#compassLabel", "display:none;")
      JS.setCss ("#compassAccordion", "display:none;")
    }
    if (game.turnoffinventory) {
      JS.setCss ("#inventoryLabel", "display:none")
      JS.setCss ("#inventoryAccordion", "display:none")
    }
    if (game.turnoffplacesandobjects) {
      JS.setCss ("#placesObjectsLabel", "display:none")
      JS.setCss ("#placesObjectsAccordion", "display:none")
    }
    if (game.statusandcompassattop) {
      JS.eval ("$('#commandPane').insertBefore('#inventoryLabel')")
      JS.eval ("$('#customStatusPane').insertBefore('#inventoryLabel')")
      JS.eval ("$('#statusVarsLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#statusVarsAccordion').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassLabel').insertBefore('#inventoryLabel')")
      JS.eval ("$('#compassAccordion').insertBefore('#inventoryLabel')")
    }
    if (game.showpanes and game.commandpane) {
      JS.setCss ("#commandPane", "display:block")
    }
    if (game.showpanes and game.customstatuspane) {
      JS.setCss ("#customStatusPane", "display:block")
    }
    if (game.colourblend) {
      JS.colourBlend (game.colourblendtop, game.colourblendbottom)
    }
    if (game.borderlesscursor) {
      JS.addScript ("<style>#txtCommand { outline:none; border:none; margin:0; padding:0; width:100px; background-color:transparent;}</style>")
      JS.setCss ("#txtCommandDiv", "color:" + game.defaultforeground)
      JS.eval ("$('#txtCommandPrompt').html('" + game.commandcursor + "')")
      request (SetInterfaceString, "TypeHereLabel=")
    }
    else if (game.shadowbox) {
      JS.addScript ("<style>#txtCommand { outline:none; border:none; margin:2px; padding:7px; width:100 px;box-shadow: 0px 0px 15px 5px #888;}</style>")
    }
    if (game.panestheme = "Midnight") {
      JS.setPanes ("white", "midnightblue", "midnightblue", "skyblue")
    }
    if (game.panestheme = "Nature") {
      JS.setPanes ("#A1C935", "#254117", "#306754", "#A1C935", "green")
    }
    if (game.panestheme = "Parchment") {
      JS.setPanes ("#493D26", "#FAEBD7", "#FAEBD7", "#493D26", "#C88141")
    }
    if (game.panestheme = "Vanilla") {
      JS.setPanes ("black", "white")
    }
    if (game.panestheme = "Black") {
      JS.setPanes ("orange", "black", "black", "orange")
    }
    if (game.panestheme = "Blood") {
      JS.setPanes ("orange", "#800000", "#800000", "orange", "yellow")
    }
    if (game.panestheme = "Tranquil") {
      JS.setPanes ("midnightblue", "skyblue", "white", "midnightblue", "blue")
    }
    if (game.respondtogridclicks) {
      JS.respondToGridClicks (true)
    }
    //
    // -----------------------------------------------------------------------
    // This is in the original, but must come last
    if (not game.showborder) {
      JS.hideBorder ()
    }
    if (game.showpanes) {
      request (Show, "Panes")
    }
    else {
      request (Hide, "Panes")
    }
    JS.getDivCount ()
    if (not game.pov = null) {
      JS.updateLocation (CapFirst(GetDisplayName(game.pov.parent)))
    }
    InitUserInterface
    if (HasScript(game, "inituserinterface")) {
      do (game, "inituserinterface")
    }
  ]]></function>
  <function name="InitUserInterface">
  </function>
  <function name="StartGame"><![CDATA[
    StartTurnOutputSection
    if (game.showtitle) {
      JS.StartOutputSection ("title")
      PrintCentered ("<span style=\"font-size:260%\">" + game.gamename + "</span>")
      if (game.subtitle <> null) {
        if (LengthOf(game.subtitle) > 0) {
          PrintCentered ("<span style=\"font-size:130%\">" + game.subtitle + "</span>")
        }
      }
      if (game.author <> null) {
        if (LengthOf(game.author) > 0) {
          PrintCentered ("<br/><span style=\"font-size:140%\">by " + game.author + "</span>")
        }
      }
      msg ("<div style=\"margin-top:20px\"></div>")
      JS.EndOutputSection ("title")
    }
    if (game.pov = null) {
      playerObject = GetObject("player")
      if (playerObject = null) {
        if (ListCount(AllObjects()) > 0) {
          firstRoom = ObjectListItem(AllObjects(), 0)
        }
        else {
          create ("room")
          firstRoom = room
        }
        create ("player")
        player.parent = firstRoom
      }
      game.pov = player
    }
    else {
      InitPOV (null, game.pov)
    }
    InitStatusAttributes
    UpdateStatusAttributes
    InitVerbsList
    if (HasScript(game, "start")) {
      do (game, "start")
    }
    foreach (obj, AllObjects()) {
      if (HasScript(obj, "_initialise_")) {
        do (obj, "_initialise_")
      }
    }
    UpdateStatusAttributes
    UpdateObjectLinks
    on ready {
      if (game.gridmap) {
        Grid_DrawPlayerInRoom (game.pov.parent)
      }
      if (game.displayroomdescriptiononstart) {
        OnEnterRoom (null)
      }
      UpdateStatusAttributes
      UpdateObjectLinks
    }
  ]]></function>
  <function name="InitVerbsList">
    game.verbattributes = NewStringList()
    game.verbattributeslookup = NewObjectDictionary()
    foreach (cmd, AllCommands()) {
      if (HasString(cmd, "property")) {
        list add (game.verbattributes, cmd.property)
        dictionary add (game.verbattributeslookup, cmd.property, cmd)
      }
    }
  </function>
  <function name="GetDisplayVerbs" parameters="object" type="stringlist">
    if (Contains(game.pov, object)) {
      baselist = object.inventoryverbs
    }
    else {
      baselist = object.displayverbs
    }
    if (not game.autodisplayverbs or GetBoolean(object, "usestandardverblist") or not HasAttribute(game, "verbattributes")) {
      return (baselist)
    }
    else {
      if (HasAttribute(object, "generatedverbslist")) {
        verbs = object.generatedverbslist
      }
      else {
        verbs = NewStringList()
        foreach (attr, GetAttributeNames(object, false)) {
          if (ListContains(game.verbattributes, attr)) {
            cmd = ObjectDictionaryItem(game.verbattributeslookup, attr)
            if (HasString(cmd, "displayverb")) {
              displayverb = CapFirst(cmd.displayverb)
            }
            else {
              displayverb = CapFirst(attr)
            }
            if (not ListContains(baselist, displayverb)) {
              list add (verbs, displayverb)
            }
          }
        }
        object.generatedverbslist = verbs
      }
      if (GetBoolean(object, "useindividualverblist")) {
        return (verbs)
      }
      else {
        return (ListCombine(baselist, verbs))
      }
    }
  </function>
  <function name="InitPOV" parameters="oldPOV, newPOV"><![CDATA[
    if (oldPOV <> null) {
      oldPOV.alias = oldPOV.external_alias
      oldPOV.alt = oldPOV.external_alt
      oldPOV.look = oldPOV.external_look
      oldPOV.gender = oldPOV.external_gender
      oldPOV.article = oldPOV.external_article
    }
    newPOV.external_alias = newPOV.alias
    newPOV.external_alt = newPOV.alt
    newPOV.external_look = newPOV.look
    newPOV.external_gender = newPOV.gender
    newPOV.external_article = newPOV.article
    if (not GetBoolean(newPOV, "pov_used")) {
      if (newPOV.alt = null) {
        newPOV.pov_alt = newPOV.pov_alt
      }
      else {
        newPOV.pov_alt = ListCombine(newPOV.alt, newPOV.pov_alt)
      }
      if (newPOV.alias <> null) {
        list add (newPOV.pov_alt, newPOV.alias)
      }
      if (game.showmoney and not HasInt(newPOV, "money")) {
        newPOV.money = 0
      }
      if (game.showhealth) {
        newPOV.health = 100
        newPOV.changedhealth => {
          if (this.health > 100) {
            this.health = 100
          }
          else if (this.health = 0) {
            if (HasScript(game, "onhealthzero")) {
              do (game, "onhealthzero")
            }
          }
          else if (this.health < 0) {
            this.health = 0
            // changedhealth will be called again so the onhealthzero script will run
          }
        }
      }
      newPOV.pov_used = true
    }
    newPOV.alias = newPOV.pov_alias
    newPOV.alt = newPOV.pov_alt
    newPOV.look = newPOV.pov_look
    newPOV.gender = newPOV.pov_gender
    newPOV.article = newPOV.pov_article
  ]]></function>
  <function name="HideOutputSection2" parameters="name"><![CDATA[
    JS.uiHide ("#location")
    ClearScreen
    JS.uiHide ("#txtCommand")
    JS.setBackground ("black")
    msg ("<center><image width=\"80%\" src=\"" + GetFileURL("qdk-background.jpg") + "\" onload=\"$(this).fadeOut(4300);\" /></center>")
    JS.uiHide ("#gamePanes")
    SetBackgroundImage ("px_avatar.png")
    SetBackgroundOpacity (0.8)
    SetBackgroundColour ("black")
    JS.setCss ("#gameBorder", "box-shadow:0px 0px 15px 5px #fac4ff;")
    JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 2px 2px #296231;")
    ChangePOV (player)
    RemoveObject (player1)
    // FinishTurn
  ]]></function>
  <function name="AddToHubGateway" parameters="room">
    if (not ListContains(Quest Forum.destinations, room)) {
      list add (Quest Forum.destinations, room)
    }
  </function>
  <function name="HandleButtonClick" parameters="s"><![CDATA[
    msg ("")
    msg (">" + s)
    msg ("")
    params = NewDictionary()
    HandleCommand (s, params)
    JS.scrollToEnd ()
  ]]></function>
  <function name="AddQuest" parameters="author, quest, description">
    qst = quest
    if (not EndsWith (qst, "_questComplete")) {
      qst = qst + "_questComplete"
    }
    if (not HasAttribute (author, "incompleteQuests")) {
      author.incompleteQuests = 0
    }
    if (not HasAttribute (author, qst)) {
      set (author, qst, false)
      author.incompleteQuests = author.incompleteQuests + 1
      player.activeQuests = player.activeQuests + 1
      dictionary add (player.activeQuestList, GetDisplayName(author) + quest, description)
    }
  </function>
  <function name="AreAllQuestsCompleted" type="boolean"><![CDATA[
    alldone = true
    foreach (obj, AllObjects()) {
      if (HasAttribute(obj, "incompleteQuests")) {
        // msg (obj)
        // msg (obj.incompleteQuests)
        if (obj.incompleteQuests > 0) {
          // msg ("Checking quest count")
          alldone = false
        }
      }
    }
    // msg ("Checking ALLDONE")
    // msg (alldone)
    if (alldone) {
      player.allQuestsComplete = true
      if (DictionaryContains(player.statusattributes, "activeQuests")) {
        dictionary remove (player.statusattributes, "activeQuests")
      }
      // msg ("<br/>All current Quests have been completed!<br/><br/>")
    }
    else {
      player.allQuestsComplete = false
      if (not DictionaryContains(player.statusattributes, "activeQuests")) {
        dictionary add (player.statusattributes, "activeQuests", "<a onclick=\"ASLEvent('HandleButtonClick', 'quest');\" style=\";cursor:pointer;\" title=\"Click here to view a list of active Quests!\">Active Quests: !</a>")
      }
    }
    return (alldone)
  ]]></function>
  <function name="QuestComplete" parameters="author, quest"><![CDATA[
    // msg ("Completing quest...")
    // msg ("")
    qst = quest
    if (not EndsWith(quest, "_questComplete")) {
      qst = qst + "_questComplete"
      // msg (qst)
    }
    if (HasAttribute(author, qst)) {
      set (author, qst, true)
      // msg ("Quest complete: " + GetDisplayName(author) + quest)
      msg ("")
      if (not HasAttribute(player, "activeQuestList")) {
        player.activeQuestList = NewStringDictionary()
      }
      msg ("<center><b>[ Quest complete: " + DictionaryItem(player.activeQuestList, "" + GetDisplayName(author) + quest + "") + " ]</b></center>")
      // msg ("set to true")
      // msg (author.incompleteQuests)
      author.incompleteQuests = author.incompleteQuests - 1
      // msg ("Decreased incomplete quests")
      player.activeQuests = player.activeQuests - 1
      n = ListCount(player.completedQuests)
      list add (player.completedQuests, n + ".  " + quest)
      dictionary remove (player.activeQuestList, "" + GetDisplayName(author) + quest + "")
      AreAllQuestsCompleted
    }
    else {
      Log (author + qst + " does not exist!\"")
    }
  ]]></function>
  <function name="QuestFailed" parameters="author, quest"><![CDATA[
    // msg ("Completing quest...")
    // msg ("")
    qst = quest
    if (not EndsWith(quest, "_questComplete")) {
      qst = qst + "_questComplete"
      // msg (qst)
    }
    // set (author, qst, true)
    // msg ("Quest complete: " + GetDisplayName(author) + quest)
    if (HasAttribute(author, qst)) {
      msg ("")
      msg ("<b>[ Quest FAILED: " + Eval(DictionaryItem(player.activeQuestList, "" + GetDisplayName(author) + quest + "")) + " ]</b>")
      // msg ("set to true")
      // msg (author.incompleteQuests)
      author.incompleteQuests = author.incompleteQuests - 1
      // msg ("Decreased incomplete quests")
      player.activeQuests = player.activeQuests - 1
      dictionary remove (player.activeQuestList, "" + GetDisplayName(author) + quest + "")
      if (not HasAttribute(player, "failedQuests")) {
        player.failedQuests = NewStringList()
      }
      list add (player.failedQuests, quest)
      AreAllQuestsCompleted
    }
    else {
      Log (author + qst + " does not exist!")
    }
  ]]></function>
  <function name="ShowMenuNoNumbers" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      list add (game.menuoptionskeys, option)
      count = count + 1
      if (TypeOf(options) = "stringlist") {
        optionText = option
      }
      else {
        optionText = StringDictionaryItem(options, option)
      }
      msg ("<a class=\"cmdlink\" style=\"" + GetCurrentLinkTextFormat() + "\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</a>")
    }
    game.menuopt = option
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
  <function name="showHint" parameters="object"><![CDATA[
    if (HasAttribute(object, "hintlist")) {
      game.this = object
      optNo = 0
      choices = NewStringList()
      game.hintmenulist = object.hintlist
      foreach (h, object.hintlist) {
        optNo = optNo + 1
        opt = optNo + ": " + h
        list add (choices, "Hint " + optNo)
      }
      if ((ListCount(choices)) > 1) {
        hint = "Hints"
      }
      else {
        hint = "Hint"
      }
      ShowHintMenu ("<br>" + hint + " for " + GetDisplayName(game.this) + ":", choices, true) {
        r = Split(result, " ")
        thehint = ListItem(r, 1)
        thehint = ToInt(thehint)
        thehint = thehint -1
        msg (ListItem(game.this.hintlist, thehint))
        if (thehint +1 < (ListCount(game.this.hintlist))) {
          // msg ("RERUN MENU")
          // msg (game.this)
          HandleSingleCommand ("hint " + game.this.alias + "")
        }
      }
    }
    else {
      msg ("There are no hints set up for this item.")
    }
  ]]></function>
  <function name="addHint" parameters="object, string">
    if (not HasAttribute(object, "hintlist")) {
      object.hintlist = NewStringList()
    }
    hn = (ListCount(object.hintlist)) + 1
    string = "Hint " + hn + ": " + string
    list add (object.hintlist, string)
  </function>
  <function name="HandleHintClick" parameters="s"><![CDATA[
    // msg (game.this)
    // msg (s)
    game.hintOptNo = s
    s = ToInt(s) - 1
    ClearMenu
    msg (game.caption)
    msg (ListItem(game.this.hintlist, s))
    if (ListCount(game.this.hintlist) > s + 1) {
      do (game.this, "hint")
    }
    JS.scrollToEnd ()
  ]]></function>
  <function name="ShowHintMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      list add (game.menuoptionskeys, option)
      count = count + 1
      if (TypeOf(options) = "stringlist") {
        optionText = option
      }
      else {
        optionText = StringDictionaryItem(options, option)
      }
      msg ("<button class=\"cmdlink\" style=\"background:#296231;color:#fac4ff;padding:4px;margin:6px\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</button>")
    }
    game.menuopt = option
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
  <function name="checkMaxScore">
    game.maxScore = 0
    foreach (o, AllObjects()) {
      if (HasAttribute(o, "maxScore")) {
        game.maxScore = game.maxScore + o.maxScore
      }
    }
    // msg (game.maxScore)
  </function>
  <function name="Rot" parameters="s, n" type="string">
    result = ""
    for (i, 1, LengthOf(s)) {
      result = result + _Rot(Mid(s, i, 1), n)
    }
    return (result)
  </function>
  <function name="_Rot" parameters="c, n" type="string">
    // For just one character
    if (c = UCase(c)) {
      upper = true
    }
    else {
      upper = false
      c = UCase(c)
    }
    x = IndexOf(game.alphabet, c)
    if (x = -1) {
      return (c)
    }
    x = (x + n) % 26
    c = StringListItem(game.alphabet, x)
    if (upper) {
      return (c)
    }
    else {
      return (LCase(c))
    }
  </function>
  <function name="SetCss" parameters="id, css">
    JS.setCss (id, css)
  </function>
  <function name="alertCheck"><![CDATA[
    if (player.activeQuests > 0) {
      game.stats = "<span class=\"game-stats\" style=\"background:black;border:1px solid;float:right;margin-right:4px;box-shadow:0 0 2px black;\">&nbsp;&nbsp; Health: " + player.health + " |   Score: " + game.score + "| Turns: " + game.turns + " | <a onclick=\"ASLEvent('HandleNavCmdClick', 'quest');\" style=\"cursor:pointer;\" title=\"Click here to view a list of active Quests&#33;\">Quests</a>: " + player.activeQuests + "&nbsp; &nbsp;  </span>"
    }
    else {
      game.stats = "<span  class=\"game-stats\" style=\"background:black;border:1px solid;text-align:right;margin-right:4px;box-shadow:0 0 2px black;\">&nbsp;&nbsp; Health: " + player.health + " |   Score: " + game.score + "| Turns: " + game.turns + "&nbsp; &nbsp;  </span>"
    }
    if (not game.showpanes) {
      if (kv_device.havealerts) {
        if (ListCount(kv_device.alertsnow) > 1) {
          kv_device.S = "YOU HAVE NEW ALERTS!"
          game.locationmsg = ""+ CapFirst(GetDisplayName(game.pov.parent)) + "       |       <a onclick=\"ASLEvent('HandleButtonClick', 'use PX');\" style=\";cursor:pointer;\">" + kv_device.S + "</a> | <a onclick=\"ASLEvent('HandleButtonClick', 'panes');\" style=\";cursor:pointer;\">     SHOW PANES</a> " + game.stats + ""
        }
        else if (ListCount(kv_device.alertsnow) = 1) {
          kv_device.S = "YOU HAVE A NEW ALERT!"
          // msg ("alertCheck:")
          // msg (kv_device.alertsnow)
          game.locationmsg = ""+ CapFirst(GetDisplayName(game.pov.parent)) + "       |       <a onclick=\"ASLEvent('HandleButtonClick', 'use PX');\" style=\";cursor:pointer;\">" + kv_device.S + "</a> | <a onclick=\"ASLEvent('HandleButtonClick', 'panes');\" style=\";cursor:pointer;\">     SHOW PANES</a> " + game.stats + ""
        }
        else {
          kv_device.S = "     CLICK HERE TO SHOW THE SIDE PANES"
          game.locationmsg = "" + CapFirst(GetDisplayName(game.pov.parent)) + " | <a onclick=\"ASLEvent('HandleButtonClick', 'panes');\" style=\";cursor:pointer;\">     SHOW PANES</a></a> " + game.stats + ""
        }
      }
      else {
        game.locationmsg = ""+ CapFirst(GetDisplayName(game.pov.parent)) + " | <a onclick=\"ASLEvent('HandleButtonClick', 'panes');\" style=\";cursor:pointer;\">     SHOW PANES</a>" + game.stats+ ""
      }
    }
    else {
      game.locationmsg = "" + CapFirst(GetDisplayName(game.pov.parent)) + " " + game.stats + ""
    }
    request (UpdateLocation, game.locationmsg)
  ]]></function>
  <function name="viewAlerts"><![CDATA[
    if (ListCount(kv_device.alerts) > 0) {
      ShowMenu ("What alert would you like to view?", kv_device.alerts, true) {
        msg ("> " + result)
        x = GetObject(result)
        do (x, "look")
        JS.scrollToEnd ()
      }
    }
    else {
      msg ("You have no alerts.")
    }
  ]]></function>
  <function name="statusmove">
    JS.eval ("$('#status').css('top', '95%')")
  </function>
  <function name="isClone" parameters="subject" type="boolean"><![CDATA[
    copied = false
    if (HasAttribute(subject, "clone")) {
      copied = true
    }
    if (copied) {
      msg (subject + ": Flagged!<br/>")
    }
    return (copied)
  ]]></function>
  <function name="ageCheck"><![CDATA[
    ClearScreen
    JS.setForeground ("white")
    JS.setBackground ("red")
    JS.setCss ("body", "background:black")
    JS.uiHide ("#gamePanes")
    JS.uiHide ("#location")
    JS.setCss ("#status", "background:none;border:none")
    JS.eval ("$('#status').css('max-height','0');")
    JS.setInterfaceString ("TypeHereLabel", "Please enter YES or NO.")
    msg ("<center style=\"text-shadow:0px 0px 2px black;padding:60px;margin:60px;text-align:justify;color:white;\"><h2>WARNING:</h2><h3>This game contains explicit language, adult situations, scary monsters, puzzles, middle-aged people, one hot lady, computer programming, more explicit language, and lots of other things that are inappropriate for people under the age of 18.</h3></center><center style=\"color:white\"><h3>Do you agree that you are 18 years of age or older and that nothing at all offends you?<br/><br/>(Enter <a id=\"verblinkyes\" style=\"font-family:'Source Sans Pro', Georgia, serif;color:White;font-size:12pt;\" class=\"cmdlink commandlink\" data-elementid=\"\" data-command=\"YES\">YES</a> or <a id=\"verblinkno\" style=\"font-family:'Source Sans Pro', Georgia, serif;color:White;font-size:12pt;\" class=\"cmdlink commandlink\" data-elementid=\"\" data-command=\"NO\">NO</a>)</h3><h4>(Remember: Santa Claus is watching you!)</h4></center>")
    JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 5px 5px red;")
    get input {
      switch (LCase(result)) {
        case ("yes", "y") {
          JS.uiShow ("#gamePanes")
          JS.uiShow ("#location")
          JS.setBackground ("white")
          JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 2px 2px gold;")
          JS.setCss ("#status", "background:#5c9ccc url(\"images/ui-bg_gloss-wave_55_5c9ccc_500x100.png\") 50% 50% repeat-x;border:1px solid #4297d7")
          ClearScreen
        }
        case ("no", "n") {
          ClearScreen
          JS.setForeground ("white")
          JS.setBackground ("red")
          JS.setCss ("body", "background:black")
          // JS.uiShow ("#commandPane")
          JS.uiShow ("#gamePanes")
          create ("notOldEnough")
          notOldEnough.alias = ""
          notOldEnough.usedefaultprefix = false
          MoveObject (game.pov, notOldEnough)
          ClearScreen
          msg ("<center><h3>SORRY! (THIS GAME IS NO GOOD ANYWAY!)</h3></center>")
          finish
        }
        case ("bool", "kv", "dl", "xm", "px") {
          game.devMode = true
          px_cheat.parent = null
          kv_showme.parent = null
          kv_showme_it.parent = null
          JS.uiShow ("#gamePanes")
          JS.uiShow ("#location")
          JS.setBackground ("white")
          JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 2px 2px gold;")
          JS.setCss ("#status", "background:#5c9ccc url(\"images/ui-bg_gloss-wave_55_5c9ccc_500x100.png\") 50% 50% repeat-x;border:1px solid #4297d7")
          ClearScreen
        }
        default {
          ClearScreen
          ageCheck
        }
      }
    }
  ]]></function>
  <function name="LoadFile" parameters="filename">
    s = GetFileData (filename)
    current_object = null
    game.setUp = false
    foreach (line, Split(s, "\n")) {
      line = Crop(line)
      if (not line = "" and not StartsWith(line, "#")) {
        bits = Split(line, "=")
        if (StringListItem(bits, 0) = "new") {
          if (ListCount(bits) = 2) {
            create (StringListItem(bits, 1))
            current_object = GetObject(StringListItem(bits, 1))
          }
          else {
            create (StringListItem(bits, 2), StringListItem(bits, 1))
            current_object = GetObject(StringListItem(bits, 2))
          }
        }
        else if (StringListItem(bits, 0) = "find") {
          current_object = GetObject(StringListItem(bits, 1))
          if (current_object = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else if (StringListItem(bits, 0) = "exit") {
          create exit (StringListItem(bits, 2), null, null, null, StringListItem(bits, 1))
          current_object = GetObject(StringListItem(bits, 2))
        }
        else if (StringListItem(bits, 0) = "parent") {
          newParent = StringListItem(bits, 1)
          if (newParent = "game.pov") {
            current_object.parent = game.pov.name
            game.setUp = true
            list remove (bits, "game.pov")
            list add (bits, game.pov.name)
          }
          else if (newParent = "game.pov.parent") {
            current_object.parent = game.pov.parent.name
            game.setUp = true
            list remove (bits, "game.pov.parent")
            list add (bits, game.pov.parent.name)
          }
          else if (newParent = "here") {
            current_object.parent = game.pov.parent.name
            game.setUp = true
            list remove (bits, "here")
            list add (bits, game.pov.parent.name)
          }
          else if (newParent = "player.parent") {
            current_object.parent = player.parent.name
            game.setUp = true
            list remove (bits, "player.parent")
            list add (bits, player.parent.name)
          }
          current_object.parent = GetObject(StringListItem(bits, 1))
          if (current_object.parent = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else if (StringListItem(bits, 0) = "to") {
          current_object.to = GetObject(StringListItem(bits, 1))
          if (current_object.to = null) {
            error ("Failed to find " + StringListItem(bits, 1) + " in the game world. Things will go badly...")
          }
        }
        else {
          if (LCase(StringListItem(bits, 1)) = "false") {
            set (current_object, StringListItem(bits, 0), false)
          }
          else if (LCase(StringListItem(bits, 1)) = "true") {
            set (current_object, StringListItem(bits, 0), true)
          }
          else if (IsInt(StringListItem(bits, 1))) {
            set (current_object, StringListItem(bits, 0), ToInt(StringListItem(bits, 1)))
          }
          if (not game.setUp) {
            set (current_object, StringListItem(bits, 0), StringListItem(bits, 1))
          }
          else {
            set (current_object, StringListItem(bits, 0), game.pov)
          }
        }
      }
    }
    msg ("Done.")
  </function>
  <function name="Crop" parameters="s" type="string"><![CDATA[
    start = 1
    end = LengthOf(s)
    for (i, 1, LengthOf(s)) {
      if (Asc(Mid(s, i, 1)) < 33) {
        if (start = i) {
          start = i + 1
        }
      }
      else {
        end = i
      }
    }
    return (Mid(s, start, end - start + 1))
  ]]></function>
  <function name="UpdateContentsInLists"><![CDATA[
    foreach (o, ListExclude(ScopeVisible(),game.pov)) {
      if (not HasAttribute(o, "listalias")) {
        o.listalias = GetDisplayAlias(o)
      }
      o.listalias = Replace(o.listalias,"&nbsp;","")
      containers = ListExclude(ListParents(o), game.pov)
      containers = ListExclude(containers, ListParents(game.pov))
      foreach (c, containers) {
        o.listalias = "&nbsp;&nbsp;" + o.listalias
      }
    }
  ]]></function>
  <function name="PrettyInventory"><![CDATA[
    stuff = ScopeInventory()
    list = ""
    int = 0
    foreach (o, stuff) {
      int = int + 1
      o.prettyalias = "&nbsp;&nbsp;" + GetDisplayNameLink(o, "object")
      foreach (c, ListExclude(ListParents(o), game.pov)) {
        if (ListContains (stuff, c)) {
          o.prettyalias = "&nbsp;&nbsp;" + o.prettyalias
        }
      }
      br = ""
      if (int > 1) {
        br = "<br/>"
      }
      list = list + br + o.prettyalias
    }
    msg ("You are carrying:")
    msg (list)
  ]]></function>
  <function name="FinishGame" parameters="message"><![CDATA[
    message = "<h3>GAME OVER</h3>" + message
    ShowGameOverMenu (message)
  ]]></function>
  <function name="ShowGameOverMenu" parameters="message"><![CDATA[
    ShowMenu (message + "<br/>What would you like to do?", Split("UNDO your last command;RESTART from the beginning;QUIT the game", ";"), false) {
      switch (result) {
        case ("UNDO your last command") {
          invoke (undo.script)
        }
        case ("RESTART from the beginning") {
          // FIXME when updating to 5.8!!!
          // JS.RestartGame ()
          msg ("Press CTRL+R to restart!")
          ShowGameOverMenu
        }
        case ("QUIT the game") {
          JS.setCss ("#gamePanes", "display:block;background:transparent")
          JS.uiHide ("#sidenav-open")
          finish
        }
        default {
          ShowGameOverMenu
        }
      }
    }
  ]]></function>
  <function name="SetupSidenav"><![CDATA[
    // Setup navCmdClick() function to handle sideNav command link clicks
    JS.eval ("function navCmdClick(cmd){if (_waitMode || isElementVisible('#gamePanesFinished')){return;}ASLEvent('HandleNavCmdClick', cmd);}")
    // Add the CSS
    JS.addScript ("<style> .sidenav  {  height: 100%;    width: 0;    position: fixed;  transition: 0.5s;  z-index: 999;    top: 0;    right: 0;    background-color:#296231;    overflow-x: hidden;    padding-top: 60px;   } .sidenav a {   padding: 8px 8px 8px 32px;    text-decoration: none;  transition: 0.5s;  font-size: 25px;    color: #fac4ff;    display: block;   } .sidenav a:hover {   color: #f1f1f1;  } .sidenav .closebtn {   position: absolute;    top: 0;    right: 25px;    font-size: 36px;    margin-left: 50px; }#sidenav-open{top:25px;}</style>")
    // Add the sidenav element
    mySidenav = ""
    // Move it to the body element
    JS.eval ("$('#mySidenav').remove(); $('body').append(\"<div id='mySidenav' class='sidenav'><br/>    <a href='' class='closebtn' onclick='closeNav();'>&times;</a> <center><span id='map-holder' /></center></div><span id='sidenav-open' style='font-size:30px;cursor:pointer;top:0;right:0;color:white;background:#296231;border:2px solid #fac4ff;position:fixed;z-index:998;opacity:0.7;' onclick='openNav()'>&#9776;</span>\");")
    // Move the button, too.
    JS.eval ("$('body').append($('#sidenav-open'));")
    // Set up the openNav() and closeNav() functions
    JS.eval ("function openNav() { $('#mySidenav').width(($(window).width() - $('#gameBorder').width()) / 2);}; function closeNav() {  $('#mySidenav').width('0');};if(isMobilePlayer()){closeNav();}")
    AddSidenavCmdLink ("Look")
    AddSidenavCmdLink ("Get all")
    AddSidenavCmdLink ("Undo")
    AddSidenavCmdLink ("Wait")
    AddSidenavCmdLink ("Save")
    AddSidenavCmdLink ("Clear")
    AddSidenavCmdLink ("Panes")
    AddSidenavCmdLink ("HINTS")
    AddSidenavContactLink
  ]]></function>
  <function name="AddSidenavCmdLink" parameters="cmd"><![CDATA[
    // Add a link with "cmd" as the text, which will handle the command on click
    JS.eval ("$('#mySidenav').append('<a href=\"\" class=\"sidenav-cmdlink\" onclick=\"navCmdClick($(this).html());\">"+cmd+"</a><br/>');")
  ]]></function>
  <function name="AddSidenavContactLink"><![CDATA[
    // Add a link with a mailto href, which pulls the email address from game.contactaddress
    JS.eval ("$('#mySidenav').append('<a href=\"mailto:"+game.contactaddress+"?subject="+JSSafe(game.gamename)+"\">Contact</a><br/>');")
  ]]></function>
  <function name="HandleNavCmdClick" parameters="cmd">
    // game.runturnscripts = true
    params = NewDictionary()
    dictionary add (params, "object", cmd)
    HandleCommand (cmd, params)
    JS.scrollToEnd ()
  </function>
  <function name="FilterTakeDisplayVerbs">
    foreach (obj, FilterByAttribute(AllObjects(),"take", false)) {
      obj.displayverbs = ListExclude(obj.displayverbs, "Take")
    }
  </function>
  <function name="AslSet" parameters="data"><![CDATA[
    if (not HasAttribute (game, "runturnscripts")) {
      game.suppressturnscripts = true
    }
    data = Split(data,"||")
    foreach (bit, data) {
      stuff = Split(bit,"=")
      obj_attr = stuff[0]
      obj_attr = Split(obj_attr,".")
      if (ListCount(obj_attr)>2) {
        exclude = obj_attr[ListCount(obj_attr)-1]
        obj = Join(ListExclude(obj_attr,exclude),".")
        obj_attr = NewStringList()
        list add (obj_attr, obj)
        list add (obj_attr, exclude)
      }
      else {
        obj = obj_attr[0]
      }
      if (obj = "game.pov") {
        obj = game.pov
      }
      else if (obj = "game.pov.parent") {
        obj = game.pov.parent
      }
      else {
        obj = GetObject(obj)
      }
      attr = obj_attr[1]
      val = stuff[1]
      if (EndsWith(val,"_toInt")) {
        val = ToInt(Replace(val,"_toInt",""))
      }
      else if (EndsWith(val,"_toDouble")) {
        val = ToDouble(Replace(val,"_toDouble",""))
      }
      else if (LCase(val)="false") {
        val = false
      }
      else if (LCase(val)="true") {
        val = true
      }
      set (obj, attr, val)
    }
    FinishTurn
  ]]></function>
  <function name="FinishTurn">
    if (not GetBoolean(game, "suppressturnscripts")) {
      RunTurnScripts
    }
    game.suppressturnscripts = false
    UpdateStatusAttributes
    CheckDarkness
    UpdateObjectLinks
  </function>
  <function name="InitPxUi" parameters="unused">
    JS.setBackground ("black")
    SetBackgroundImage ("px_avatar.png")
    SetBackgroundOpacity (1.0)
    SetBackgroundColour ("black")
    JS.setCss ("#gameBorder", "box-shadow:0px 0px 15px 5px #fac4ff;")
    JS.setCss ("#txtCommand", "outline:none;box-shadow:0px 0px 2px 2px #296231;")
    game.pxui = true
  </function>
  <javascript src="pqstuff.js" />
</asl>